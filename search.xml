<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>团队处理器系列（0x04）：木心开发环境-重新出发</title>
      <link href="/zh-cn/2022/06/19/team_cpu_4_treecore_ide_restart/"/>
      <url>/zh-cn/2022/06/19/team_cpu_4_treecore_ide_restart/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事实再次证明那句至理名言：<strong>只要一件事你现在不去做，以后大概率也不会去做。</strong>去年6月份我们团队携木心处理器项目在第一届RISC-V中国峰会上与大家见面，当时有很多志同道合的朋友对我们的开源项目感兴趣，但是由于下半年我们团队受到公司加班和学校毕业等诸多因素的影响，<strong>木心开发环境第一版</strong>并没有如期发布，不过好在我的队友<code>maksyuki</code>以<strong>国科大第三期“一生一芯”项目</strong>为契机，成功编写出了<strong>木心处理器核第一版（代号TC-L1）</strong>并通过了前端仿真与验证，得到了一次极其宝贵的流片机会，这可以算是2021年木心项目为数不多的高光时刻。转眼间来到2022年，项目开发依旧处于半停滞的状态，为此我和队友深入地探讨了一番，终于搞明白了问题出在哪里并制订了详细的解决方案。接下来我会以为本项目为例，简要分享一下我们对开源项目的可持续发展的一些见解，如有表述不对之处，欢迎大家批评指正。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><strong>开发项目的决心依然不够坚定</strong><br>决心是做成一件事情最重要的因素，如果不抱着破釜沉舟般的决心，就算是掌握了事半功倍的方法，在遇到各种诱惑或艰难险阻时，也大概率会败下阵来。以我本人为例，去年在第一届RISC-V中国峰会落幕之后，由于自己开发项目的决心发生了些许的动摇，被压制在骨子深处的惰性便轻而易举地占据了上风，使得自己本就不富裕的业余时间被各种娱乐活动消磨殆尽，而且再加上本人手头上还有几个跟机器人有关的开源项目要做，顾此失彼，从而导致木心项目被一拖再拖。现在回头想想如果当初我能将全部的时间和精力投入到木心项目中去，也许维持决心也不是一件那么难的事情。</p></li><li><p><strong>缺少简单强大的项目管理工具</strong><br>古人曾经说过：<strong>工欲善其事，必先利其器。</strong>在拥有了坚定的决心之后，方法就显得尤为重要了，因为它不仅可以提高开发项目的效率，而且还能让我们逐步积累成就感，更好地促进项目不断向前发展，从而形成一个良性的正反馈闭环。还是以我们木心团队为例，在日常开会或开发的过程中，我们会统一使用印象笔记的共享笔记功能来记录<strong>项目文档</strong>，如果在网上发现比较好的资料也会用印象笔记进行裁剪收藏。此外，印象笔记还允许用户以Markdown格式编写文档，这对于经常写个人博客的程序员来说非常友好，但是它的缺点也很明显，<strong>第一就是富文本编辑模式下跨平台的字体和格式无法做到统一</strong>，比如经常会发生队友写的文章在我浏览器端显示错位的问题。<strong>第二就是文件目录树的层级只有两级</strong>，这肯定无法满足后期展示项目复杂层级结构的需求。</p></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过一段时间的搜索以及比较后，我们决定使用<strong>我来（wolai）笔记</strong>来构建属于我们团队自己的知识体系，它最吸引我的特点是其引入了不同于传统云笔记（如印象笔记、有道云笔记）的<strong>块系统</strong>，可通过嵌套任意个块的方式搭建出复杂的多层级知识结构，此外得益于块的<strong>双向链接</strong>功能，文档中的信息不再是一座座没有联系的孤岛，而是依靠彼此之间的链接形成了一个庞大的网状结构，这相比传统线性知识管理更有助于我们思考和梳理项目内部各个模块间的关系，并可由此打造出一套属于每个团队自己的高效协作新模式，所以这里推荐给大家使用。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/wolai_doc.png" alt="项目文档首页图"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/wolai_progress.png" alt="项目开发进度图"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/wolai_log_1.png" alt="项目开发日志图1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/wolai_log_2.png" alt="项目开发日志图2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/wolai_log_3.png" alt="项目开发日志图3"></p><p>除了构建全新的项目文档体系之外，我们团队还对已有的组织代码仓库进行了优化，添加了木心项目的介绍文档并根据其他开源项目的模板重新编写了每个代码仓库的README，与此同时我们也规范化了代码仓库的协作开发流程，即每位开发人员仅在自己负责的模块分支上进行开发，所有变动只有在提交时才会依次合并到开发分支和主分支上（合并前须从远程仓库拉取最新的提交），这使得多人协作开发一个大型工程项目不再是个棘手的问题，极大地提高了项目开发的效率。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/github_repo_1.png" alt="项目代码仓库图1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/github_repo_2.png" alt="项目代码仓库图2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/git_branch.png" alt="项目代码分支图"></p><p>在Docusaurus开源项目的帮助下，我们在很短的时间内便将木心网站的基础框架搭建了出来，虽然很多页面还没来得及设计和优化，但是木心项目终于有了属于自己的主页，算是基本凑齐了一个标准开源项目所需的所有元素。未来我们会对项目网站进行不断地改进，拟采用全新的方式来呈现项目的教程、新闻、社区等内容，届时我们希望木心网站能够成为启发并激励爱好者学习处理器知识的在线乐园。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/4_treecore_ide_restart/website.png" alt="项目开源网站图"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在前一篇文章中我介绍了我们木心团队目前是由两位<strong>非微电子专业</strong>的爱好者所组成的，论专业知识和开发经验我们确实不如很多具有学术背景的领域内人士，所以目前我们是处于边学习边探索的阶段，肯定会在开发项目的过程中遇到各种各样的问题，希望大家能够给予一定的理解。Vue创始人尤雨溪在码云的一篇报道中曾经讲到自己开发了三年多时间才发布Vue 1.0版本，因此我们也决定开发和维护木心项目至少三年时间，到时候欢迎新老朋友们回来看看，<strong>也许那时木心项目也能成为开源世界天空中一颗闪耀的明星！</strong></p><p>前几天在知乎上看到一篇文章，里面有一段话让我感触很深：<strong>我国是全球唯一拥有联合国全部工业门类的国家，但高端数控机床、工业设计软件、智能制造等领域的基础设备却严重依赖进口。</strong>对于半导体行业来说，工业设计软件几乎全部被欧美几大巨头所垄断，涉及处理器前端设计和后端制造的整个生命周期，如果未来有朝一日欧美像制裁华为一样不再允许中国使用这些工业软件，那我们的核心产业该如何生存下去？个人认为我们可以先从开源工业软件做起，经过一段时间的版本迭代与知识积累之后，再适当地进行商业化运作，以保证软件的稳定性不会受到开源框架碎片化问题的影响，当然最关键的还是<strong>要有人愿意去开发这些难度高且收益低的底层工业软件</strong>，期待不久的将来能有更多的团队去做这方面的研究，为处理器自主可控贡献自己的一份力量。</p>]]></content>
      
      
      <categories>
          
          <category> 团队处理器系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> CPU </tag>
            
            <tag> TreeCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队处理器系列（0x03）：木心开发环境-概念设计</title>
      <link href="/zh-cn/2021/09/05/team_cpu_3_treecore_ide_design/"/>
      <url>/zh-cn/2021/09/05/team_cpu_3_treecore_ide_design/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要跟各位喜欢计算机体系结构并且持续关注木心处理器项目的朋友们说声抱歉，由于3月份我参加了芯来科技举办的RISV-C在线培训课程，所以有一个半月的时间完全没有做木心这个项目。之后又赶上<strong>第一届RISC-V中国峰会</strong>在上海召开，我们作为<strong>业余处理器爱好者团队</strong>非常幸运的得到了主办方提供的线下演讲机会，为了准备好这次会议，我们前前后后也搭进去不少时间。当然，最重要的原因是还是自己懒，总想着把项目代码完成后再编写文档，所以拖到现在有大半年之久文档还是一字没动……</p><p>上一篇文章里提到的木心处理器，按照原有计划来看，其整体开发进度明显处于滞后状态，这一方面是由于我们的很多业余时间被工作或其他优先级更高的事项所占用，另一方面则在于5月份左右我们对项目的发展方向做出了重大调整，由我的队友 <a href="https://www.zhihu.com/people/maksyuki">@maksyuki</a> 来负责处理器核的设计和验证工作，而我则转向去主攻一个全新的领域——<strong>处理器开发环境</strong>，这些新增加的工作量使得原有的计划被完全打乱，所以我们决定将项目第一阶段的最终完成期限修改为年底之前，<strong>这里我们向大家保证届时木心处理器项目一定能够以实物的形式展示在大家面前！</strong></p><span id="more"></span><p>接下来我会主要介绍一下木心处理器开发环境的概念设计，<strong>以下大部分内容摘自我之前在第一届RISC-V中国峰会后所写的总结</strong>，不对的地方欢迎大家批评指正。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本次峰会我们的演讲内容主要关注的是<strong>面向教育领域的处理器软件集成开发环境</strong>，其实最早我在创立木心处理器项目的时候只是想做一个可以让初学者快速上手的软核处理器，但是后来我们在开发的过程中发现只有软核还是远远不够的，对于一个没有什么知识积累的初学者来说，<strong>一款简单易用的软件集成开发环境或者说是一种全新的处理器开发模式才是最重要的</strong>，在意识到这个问题之后，我和队友决定暂时先把软核部分放一放，把精力全部转向IDE的开发当中，我们当时想的是如果未来它能够被顺利地实现出来的话，那到时<strong>我们就可以用这套自己设计的工具集来编写木心软核处理器</strong>，无论是开发效率还是代码质量相较之前都会有巨大的提升。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_01.png" alt="木心处理器项目标题"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着近几年RISC-V在教育领域的快速发展，很多与其相关的书籍资料、在线课程和开源项目开始进入爱好者的视野中。与此同时，<strong>得益于RISC-V指令集架构免费和开源的先天优势，嵌入式学习与开发的成本正变得越来越低，于是这便会吸引更多的爱好者参与到RISC-V软件应用生态的建设中来</strong>。比如我在今年3月参加了芯来科技举办的嵌入式在线课程，只用了几个周末的时间就实现了一个自巡线机器人，能做到开发速度如此之快主要是因为芯来的开发板价格相对来说比较便宜，而且其在线文档和开发工具也做得很完善，这就为初学者快速入门创造了一个绝佳的机会（具体内容可以查看<a href="https://myyerrol.xyz/zh-cn/2021/04/14/diy_robots_4_line_tracking_robot_part_1">这篇</a>文章）。</p><p>此外，国科大的“一生一芯”项目让学生能够带着自己设计的处理器毕业，这有力地证明了RISC-V指令集在处理器教育领域的巨大潜力，然而一些处理器开发工具的学习曲线较高，对初学者不是很友好，再加上软件平台缺少<strong>开源的IP核管理工具、可视化调试工具</strong>以及<strong>对多种HDL语言支持</strong>等功能，使得初学者在面对新的开发工具时往往手足无措。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_02.png" alt="木心处理器项目背景"></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>我们正处于互联网发展的鼎盛时期，而支撑这些海量服务背后的Web技术也早已十分成熟，比如<strong>各种美观且实用的可视化交互界面、基于Electron框架的跨平台程序运行技术</strong>以及<strong>丰富的前后端组件开发库等</strong>，这些都为构建下一代处理器IDE提供了一种全新的思路——<strong>即将当下的Web技术应用到传统处理器集成开发环境设计的流程中。</strong></p><p>当然，我们并不是第一个有这种想法的开发者，下图右侧所展示的几个开源项目就是国外大神们基于Web技术所打造的IDE，其中terosHDL在软件功能多样性方面做得最为出色，目前已经能够支持诸如Verilog/VHDL语法补全、模块代码间任意跳转、模块静态图表分析等功能，而Logic2则基于Vue.js前端库实现了一个代码在线编辑与分析器，用户只需在浏览器中对代码进行编辑，系统就能实时地将该模块的图表结构显示在右侧窗口中，有助于用户加深对代码的理解。</p><p>但是就像任何事物在某个特定条件下均存在天花板一样，基于传统Web技术实现的软件平台也存在着不可忽视的性能瓶颈问题，具体表现如下图左下角内容所示，当我们通过JS来分析一个大小仅为374KB的VCD文件时，浏览器消耗了高达2GB左右的系统内存，而且图表的渲染和处理速度也相应会变慢，后来我们分析出现该问题的主要原因是<strong>这些IDE在处理大量数据时并没有采用并行加速技术</strong>。因此，我们团队决定扬长避短，要做一款用户界面更加现代化且性能也不输给传统单机软件的处理器IDE。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_03.png" alt="木心处理器项目研究现状"></p><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>如下图所示，我们木心IDE在系统架构上主要分为两大部分，分别为<strong>开源工具链</strong>和<strong>IDE平台</strong>，其中开源工具链又包含有<strong>TreeLang、TreeIP、TreeWave</strong>和<strong>TreeDebug</strong>等核心模块，它们可以为IDE平台中的后端处理引擎TreeCore提供双向数据支持。此外IDE平台中还包含有前端GUI模块，使得用户能够通过图表控件直观地查看或操作当前工程内部相关模块的数据，从而有效地加速处理器学习与开发流程。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_04.png" alt="木心处理器项目概述"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_05.png" alt="木心处理器项目TreeLang技术介绍"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_06.png" alt="木心处理器项目TreeIP技术介绍1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_07.png" alt="木心处理器项目TreeIP技术介绍2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_08.png" alt="木心处理器项目TreeWave技术介绍"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_09.png" alt="木心处理器项目硬件实例"></p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_10.png" alt="木心处理器项目未来工作"></p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/3_treecore_ide_design/ppt_11.png" alt="木心处理器项目开源仓库"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="我们是谁"><a href="#我们是谁" class="headerlink" title="我们是谁"></a>我们是谁</h3><p>我们是一个由两个人组成的业余开发团队，虽然成员人数非常少，但是我们关系非同一般，<strong>如果大家仔细观察演讲稿标题就会发现我们两个人的名字非常接近，没错就是你们猜想的那样——我们是双胞胎</strong>，所以经常会有一些爱好者在加微信交流时分不清我们俩（确实有些难度），这里我就简单介绍一下，我叫缪宇飏（昵称为myyerrol），毕业于西北工业大学计算机学院计算机科学与技术专业本科，而我弟叫缪宇驰（昵称为maksyuki），目前是西北工业大学航天学院精确制导与控制研究所在读研究生，其他具体信息我就不展开了。</p><p>然后我再介绍一下我们团队，我们团队的中文名叫<strong>微动（英文名为MicroDynamics）</strong>，创立于2016年暑假，早期主要从事微型机器人的研发工作。说心里话，我们当时的目标是希望自己做的微型机器人的运动性能可以接近波士顿动力的水平，但是经过几年的开发，<strong>我们发现机器人领域的确是一个不折不扣的多学科交叉融合的产物</strong>，想要让机器人达到更高的性能，不仅软件算法要重构，硬件也要同步进行升级，而作为硬件核心的处理器自然就是我们关注的重点，再加上近几年RISC-V在中国不断地发展壮大，为了紧跟时代潮流，于是我们决定将团队的研发方向暂时由机器人转变为处理器，<strong>希望未来有一天我们自己的机器人可以用上自己设计的高性价比处理器。</strong></p><h3 id="名称由来"><a href="#名称由来" class="headerlink" title="名称由来"></a>名称由来</h3><p>估计很多人都想知道为什么我们的开源处理器项目要命名为<strong>木心</strong>，其实这个名字的由来我之前在文章里就曾经提到过，这里我就直接引用那篇文章里的相关内容：</p><blockquote><p>处理器作为硬件的中枢神经，其重要性自然不言而喻，<strong>如果把整个信息产业比喻成一棵树木的话，那我认为处理器就是这棵树的精神核心（简称木心，没错本项目的命名便是由此而来的）</strong>，只有一棵树的木心足够稳定和强大，那它才能不断成长为根系错综复杂、枝叶繁盛茂密的参天大树，从而有力量抵抗外部各种恶劣环境而长久屹立不倒，处理器亦是如此。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为本次RISC-V中国峰会的演讲嘉宾，我们除了给大家简单讲了讲木心处理器项目的构想与成果之外，也在台下听了很多学术界和工业界大佬们的精彩演讲，说心里话听完这些演讲后我最大的感受就是<strong>RISC-V在中国的发展速度实在是太惊人了</strong>，这不仅体现在各大商业公司或学术机构所发布的相关产品或开源项目的数量上面，还在于RISC-V的受众群体正变得越来越多元化。本次峰会上已经开始有一些<strong>在校大学生、独立开发者</strong>以及<strong>开源社区精英</strong>从幕后走到前台，讲述他们为RISC-V生态建设所做出的贡献，中国有句谚语叫做：<strong>众人拾柴火焰高</strong>，一个新兴领域各行各业参与的人多了，生态自然就会做起来。</p><p>最近我们即将迎来互联网成立52周年纪念日，想当初它诞生于美国国防部高级研究计划局的ARPANET项目，但是却让中国成为全世界因其技术发展而收益最多的国家之一，我认为除了时代发展的必然之外，另一个最重要的因素就是<strong>我们将互联网技术与本国的实际需求紧密结合在了一起，从而使很多能够提高人们生活便利水平的技术落地（电商物流、在线直播、移动支付等）</strong>。RISC-V也是一样的，它发源于美国加州大学伯克利分校，却在中国创新的土壤中不断成长和分化，如果按照互联网技术的发展历程来看，可以预计在不久的将来，<strong>RISC-V有很大的机会能够成为实现处理器自主可控最强有力的助推器。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 团队处理器系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> CPU </tag>
            
            <tag> TreeCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制机器人系列（0x04）：巡线解迷宫机器人</title>
      <link href="/zh-cn/2021/04/14/diy_robot_4_line_tracking_robot/"/>
      <url>/zh-cn/2021/04/14/diy_robot_4_line_tracking_robot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间自己趁着开发<strong>木心软核处理器</strong>的间隙，有幸参加了<strong><a href="https://www.nucleisys.com/index.php">芯来科技</a></strong>举办的《RISC-V处理器嵌入式开发》在线课程，该课程基于全球首颗RISC-V架构的通用量产微控制器GD32VF103，采用理论学习与动手实践相结合的方式，详细介绍了RISC-V嵌入式处理器的<strong>基础知识</strong>与<strong>实战开发</strong>等内容。作为本土最早一批的RISC-V拓荒者，我觉得芯来此次以直播课的形式来推广国产RISC-V处理器应用生态的做法是非常值得称赞的，希望后期能够有更多有益于国产处理器生态建设的活动推出。</p><p>好了言归正传，本次芯来在线课程的最后有一个终极考核，需要各位学员基于<strong>RV-STAR开发板</strong>（或其他采用GD32VF103处理器的开发板）做一个面向嵌入式应用方面的小项目，题材与形式均不限。<span id="more"></span>考虑到自己是第一次使用国产处理器来做实际的项目，在上手开发的过程中可能会遇到一些阻力（比如环境配置、代码封装等方面的），所以这次我打算先做一个简单点的项目来练练手，想来想去觉得自己下半年计划要做的巡线解迷宫机器人最为合适，不过由于时间有限的缘故，我决定先把这个机器人的原理验证机先搭建出来，等硬件和软件都经过验证没有问题后，我再实现一款像<strong>稚晖君</strong>所做的Qbot那样的小型且高度集成的巡线机器人。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>巡线解迷宫机器人是一款能够通过红外反射传感器实现自主巡线以及解迷宫等功能的小型三轮机器人，该机器人的硬件核心采用的是芯来基于GD32VF103处理器所自主设计的RV-STAR开发板，它主要负责处理红外反射传感器采所集到的模拟数据，并将处理后的数据后向下发送给电机驱动模块来精确控制两个直流电机的转向和转速。由于该机器人为原理验证机且为了提高项目整体的开发速度，机器人的所有元器件均采用TB上的现有模块，并使用洞洞板直接焊接的方式来构建其机械结构和电气连接。</p><p>在软件层面上，该机器人内部集成有经典的PID闭环控制算法，可根据模拟输入数据自动调整整个系统的动态平衡，使得机器人最终能够快速且平滑地沿着黑线移动。除此之外，该项目最大的亮点是我根据GD32VF103处理器的库函数手册等相关资料为RV-STAR开发板封装了一个类Arduino语法的静态链接库，取名为<strong><a href="https://github.com/myyerrol/RVStarArduino">RVStarArduino</a></strong>，这样不仅我可以将自己之前基于Arduino所做的机器人项目中的一些代码无缝地移植过来，从而大大提高了项目的开发效率，还使得一些刚接触GD32嵌入式开发的小白用户能够快速上手实践，打消他们对传统嵌入式应用开发的畏难心理，毕竟不是所有人都喜欢研究底层技术嘛。</p><p>最后，该项目的代码可以从我<strong><a href="https://github.com/myyerrol/line-tracking-robot">GitHub仓库</a></strong>上获得，感兴趣的朋友可以下载到本地玩一玩，当然如果你在使用的过程中遇到了一些问题，欢迎在GitHub上给我提交Issues或者在文章评论区里留言，有空的话我肯定会及时回复的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_1.jpg" alt="巡线解迷宫机器人图1"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li><h4 id="电机电源层"><a href="#电机电源层" class="headerlink" title="电机电源层"></a>电机电源层</h4><p>电机电源层是整个机器人硬件架构中<strong>最底层且最基础的单元</strong>，它主要包含直流减速电机、电机驱动模块以及电源管理模块共三大部分，其中关于直流减速电机这块儿，我本次采用的是目前市场上应用广泛且体积较小的N20减速电机，考虑到机器人总装之后的负载情况以及自己对机器人巡线速度的需求，我最终购买的N20电机减速比为30:1，且额定电压为6V时，其空载转速为300RPM（即每分钟300转），这样就能保证动力系统在大负载情况下也能提供较为稳定的扭矩和速度输出，从而使得机器人的巡线过程变得更加高效。</p><p>电机驱动模块我选用的是智能小车里面最常用的TB6612FNG，它相较于其他模块的最大优点在于其在驱动两路大电流电机的同时还能保持自身体积非常小巧，因为我这次做的巡线解迷宫机器人的尺寸非常小，为了节省宝贵的内部空间，TB6612FNG模块几乎可以说是我的唯一选择。至于该模块具体该如何使用，网上有很多教程可供参考，这里我就不展开讲解了，不过有两点大家需要注意一下：<strong>一是TB6612FNG的3个GND引脚是互通的；二是其STBY引脚必须接高电平才能正常驱动电机。</strong></p><p>最后，电源管理部分我使用的是TB上的一款低成本的锂电池充放电一体模块，这个模块最厉害的地方在于它不仅能够通过外置USB接口给锂电池充电，还能在锂电池放电的时候将其电压从3.7V升到5V，功能相当于原先的充电模块+升压模块，这对于寸土寸金的机器人内部空间来说简直就是一个梦幻般的存在。此外，该模块还带有智能省电功能，即当外接负载所需电流小于50mA达到30秒时会自动关闭电源输出，从而有效降低电池电量的损耗。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/elec/elec_1.jpg" alt="电机电源层正面"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/elec/elec_2.jpg" alt="电机电源层背面"></p></li><li><h4 id="主控处理层"><a href="#主控处理层" class="headerlink" title="主控处理层"></a>主控处理层</h4><p>主控处理层作为上层决策单元，<strong>是整个机器人硬件架构中的核心</strong>。在本次的巡线解迷宫机器人中，它主要用于采样红外反射传感器回传的模拟数据并根据PID算法进行数学运算，最后将计算结果以逻辑电平信号的形式反馈给电机控制板，从而实现对直流电机转向与转速的精确控制。当然除了最核心的功能之外，主控处理层这块儿将来还会涉及到与带有IIC接口的OLED显示屏以及基于ESP8266的Wi-Fi模块间的数据交互等内容，也许到时候主控的性能才能被完全地发挥出来。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/elec/elec_3.jpg" alt="RV-STAR开发板示意图（引用自官方论坛）"></p><p>接下来为了让大家对主控有一个基本的认识，这里先简要介绍一下芯来主推的这款RV-STAR开发板（以下内容引用自官网论坛）：</p><blockquote><p>RV-STAR是一款基于GD32VF103 MCU的RISC-V评估开发板，提供了板载调试器、Reset和Wakeup用户按键、RGB LED、USB OTG，以及EXMC、Arduino和PMOD扩展接口等资源。</p></blockquote><p>相较于开发板本身的不俗性能以及所搭载的丰富外设资源，其实我更看重的是它在硬件上完全兼容Arduino这一点。玩过Arduino的同学们都知道，Arduino之所以一经推出便火遍全世界，就是在于它在软硬件层面上的易用性，而RV-STAR在硬件上支持Arduino扩展，这无疑可以让其复用很多现有的Arduino扩展板，如果后期能打通软件语法方面的壁垒（感兴趣的可以关注一下我写的RVStarArduino库），<strong>就可以真正实现将RV-STAR无缝接入到庞大且成熟的Arduino生态中</strong>，我想这也许是未来国产处理器生态环境建设可以走的捷径之一吧。</p></li><li><h4 id="外设模块层"><a href="#外设模块层" class="headerlink" title="外设模块层"></a>外设模块层</h4><p>外设模块层位于机器人硬件架构的最顶层，<strong>主要用于与外部环境进行数据交互</strong>，在本项目最早的规划中这部分应该是由红外反射传感器、OLED显示屏与Wi-Fi透传模块等三个核心外设组成，不过由于时间缘故后两个我并没有添加到机器人上，所以这次我就先详细介绍一下红外反射传感器的原理与使用，而OLED和Wi-Fi模块我打算留到下篇的时候再讲。</p><p>如下图所示，机器人底盘前端布置的一排黑色物体便是红外反射传感器，考虑到机器人的体积以及主控的运算能力，在器件选型方面我采用的是DIP封装的红外反射管TCRT5000，为了尽可能提高机器人巡线的精度，我总共使用了4个红外反射传感器，后期实际测试效果相当不错。在数据采集方面，我参考了稚晖君文章里所提到的方法，即直接使用主控的ADC功能来读取传感器的模拟数据，这样做的好处是<strong>不仅可以在代码中动态调整传感器的阈值，更重要的是它还能够让我们获得额外的道路信息</strong>，这对于提高机器人巡线的鲁棒性是非常有益的，具体内容我会在后文的算法部分进行讲解。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/elec/elec_4.jpg" alt="电机电源层背面的四路红外反射传感器"></p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>古人曾经说过：<strong>工欲善其事，必先利其器</strong>，广大开发者们想要高效地开发嵌入式应用，简单易用且性能强大的开发工具肯定是必不可少的。根据论坛<strong>快速入门</strong>板块的介绍，RV-STAR开发板支持芯来的Nuclei Studio、Segger的Embedded Studio以及基于VSCode的PlatformIO等多种开发平台，当然如果你追求极致的开发效率，直接在命令行中用Make来编译、调试与上传代码也是没有问题的，不过这里我还是推荐小白用户首选IDE，这样后期在配置环境的过程中遇到的问题会少一些。</p><p>有关具体如何配置IDE以及设备驱动的方法，官方手册和论坛里都介绍得很详细了，这里就不再赘述了，接下来我主要想讲讲<strong>自己是如何在Ubuntu 16.04等这类依赖低版本Python 3的GNU/Linux系统中安装最新版本的PlatformIO扩展插件，以及如何在PlatformIO中安装和使用我编写的RVStarArduino库进行二次开发。</strong></p><p>由于新版的PlatformIO最低仅支持Python 3.6，所以对于像我一样使用旧版GNU/Linux系统的人来说是无法使用PlatformIO的，唯一的解决办法就是通过第三方软件源来安装新版本的Python 3，具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">$&gt; sudo apt update</span><br><span class="line">$&gt; sudo apt install python3.8 python3.8-distutils</span><br></pre></td></tr></table></figure><p>安装完成后需要手动将系统的Python 3环境变量指向最新安装的这个版本（下面命令中的python3.5请根据自己系统的实际情况进行修改）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line">$&gt; sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2</span><br><span class="line">$&gt; sudo update-alternatives --config python3</span><br></pre></td></tr></table></figure><p>配置成功后即可按照正常流程在VSCode中安装PlatformIO扩展插件，但是<strong>注意如果你的系统使用的是类GNOME桌面环境的话，那切换到高版本Python 3很有可能会导致GNOME命令行终端软件无法使用</strong>，所以在装完PlatformIO后需要再次使用下面这个命令将Python 3的版本切换回去：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo update-alternatives --config python3</span><br></pre></td></tr></table></figure><p>至此，如果你能在重启VSCode后看到如下界面即表明PlatformIO扩展插件已成功安装。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/soft/soft_1.png" alt="PlatformIO的主界面"></p><p>接下来我介绍一下如何在PlatformIO中安装RVStarArduino库，其实这个步骤非常简单，如下图所示，各位只需要在PlatformIO的库管理器中搜索RVStarArduino关键词，并在其介绍界面中点击【Add to Project】即可将库文件添加到自己的项目中。除此之外，你也可以直接在platformio.ini配置文件中添加库依赖参数，这样PlatformIO在编译项目代码的时候会自动下载对应版本的库文件。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/soft/soft_2.png" alt="RVStarArduino库的主界面1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/soft/soft_3.png" alt="RVStarArduino库的主界面2"></p></li><li><h4 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h4><p>巡线解迷宫机器人的软件部分主要涉及传感器读取以及PID控制等核心算法，其中传感器读取部分我采用的是模拟式输入，即通过主控的ADC功能直接获取红外反射传感器的模拟电压值，数值范围为0~1023，估计看到这儿很多人都会问为什么我不使用更简单的数字式输入，其实这主要是因为现实场景中的很多事物并不是只有0和1两种状态，在本项目中红外反射传感器相对于黑线的位置是实时变化的，如果采用模拟量的话，系统可以表示两个边界之间的所有位置信息，精度相较于数字量的0和1会有比较大的提升。除此之外，得益于精度的显著提升，模拟量所表示的信息还能通过加权求和的方式更好地表征系统误差的大小，这对于后面的PID运算过程至关重要。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取每个红外反射传感器的模拟值</span></span><br><span class="line"><span class="comment">// Get the analog value of each infrared reflection sensor</span></span><br><span class="line"><span class="keyword">uint16_t</span> a0 = <span class="built_in">analogRead</span>(A0);</span><br><span class="line"><span class="keyword">uint16_t</span> a1 = <span class="built_in">analogRead</span>(A1);</span><br><span class="line"><span class="keyword">uint16_t</span> a2 = <span class="built_in">analogRead</span>(A2);</span><br><span class="line"><span class="keyword">uint16_t</span> a3 = <span class="built_in">analogRead</span>(A3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用加权求和的方式来表示系统误差</span></span><br><span class="line"><span class="comment">// Use weighted summation to represent systematic errors</span></span><br><span class="line"><span class="keyword">float</span> turn_error = <span class="number">0.0</span>;</span><br><span class="line">turn_error = turn_error + g_turn_error_k0 * a0;</span><br><span class="line">turn_error = turn_error + g_turn_error_k1 * a1;</span><br><span class="line">turn_error = turn_error - g_turn_error_k1 * a2;</span><br><span class="line">turn_error = turn_error - g_turn_error_k0 * a3;</span><br></pre></td></tr></table></figure><p>接下来就到了最经典的PID部分了，所谓PID就是比例、积分和微分的英文缩写，主要应用于各种闭环控制系统中。根据反馈器件的类型，PID中常见的控制环有：速度环、角度环和转向环，那大家可以猜猜本项目中使用的是哪种控制环吗？没错，因为我选择的是可以返回<strong>位置信息</strong>的红外反射传感器，所以机器人实际应用的是转向环PID算法。关于PID算法的原理网上有很多详细的资料可供参考，这里我就不再过多介绍了，大家可以尝试直接阅读下面的代码来理解其中的精髓。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算转向环PID</span></span><br><span class="line"><span class="comment">// Calculate turn PID</span></span><br><span class="line">g_turn_p = g_turn_kp * turn_error;</span><br><span class="line">g_turn_i = g_turn_ki * (g_turn_i + turn_error);</span><br><span class="line">g_turn_d = g_turn_kd * (turn_error - g_turn_error_last);</span><br><span class="line"><span class="keyword">float</span> turn_sum = (g_turn_p + g_turn_i + g_turn_d) / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据计算结果与当前所处状态控制电机的转速或转向</span></span><br><span class="line"><span class="comment">// Control the speed or direction of the motor according to the</span></span><br><span class="line"><span class="comment">// calculation result and the current state</span></span><br><span class="line"><span class="keyword">int16_t</span> motor_speed_a = MOTOR_SPEED_REF;</span><br><span class="line"><span class="keyword">int16_t</span> motor_speed_b = MOTOR_SPEED_REF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规定机器人水平向左为负向右为正，此时如果PID计算结果为正，则机器人需要向右偏移，</span></span><br><span class="line"><span class="comment">// 右侧电机应降低一定的速度，速度变化值由PID计算结果的绝对值表示，反方向同理</span></span><br><span class="line"><span class="comment">// It is stipulated that the horizontal left of the robot is negative</span></span><br><span class="line"><span class="comment">// and the right is positive. At this time, if the PID calculation</span></span><br><span class="line"><span class="comment">// result is positive, the robot needs to shift to the right, and the</span></span><br><span class="line"><span class="comment">// right motor should reduce a certain speed. The speed change value is</span></span><br><span class="line"><span class="comment">// represented by the absolute value of the PID calculation result.</span></span><br><span class="line"><span class="comment">// The same goes in the opposite direction</span></span><br><span class="line"><span class="keyword">if</span> (turn_sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    motor_speed_b = motor_speed_b - turn_sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    motor_speed_a = motor_speed_a - <span class="built_in">abs</span>(turn_sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setMotorSpeed</span>(MOTOR_A, motor_speed_a);</span><br><span class="line"><span class="built_in">setMotorSpeed</span>(MOTOR_B, motor_speed_b);</span><br></pre></td></tr></table></figure><p>核心算法完整代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> g_turn_kp = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_ki = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_kd = <span class="number">5.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_p  = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_i  = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_d  = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> g_turn_error_k0   = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_error_k1   = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">float</span> g_turn_error_last = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> g_timer_turn_pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cacluteTurnPID</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> ms = <span class="built_in">millis</span>();</span><br><span class="line">    <span class="keyword">if</span> (ms - g_timer_turn_pid &gt;= <span class="number">50</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_PID_CYCLE</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Time turn: %lums\n&quot;</span>, ms);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">// 获取每个红外反射传感器的模拟值</span></span><br><span class="line">        <span class="comment">// Get the analog value of each infrared reflection sensor</span></span><br><span class="line">        <span class="keyword">uint16_t</span> a0 = <span class="built_in">analogRead</span>(A0);</span><br><span class="line">        <span class="keyword">uint16_t</span> a1 = <span class="built_in">analogRead</span>(A1);</span><br><span class="line">        <span class="keyword">uint16_t</span> a2 = <span class="built_in">analogRead</span>(A2);</span><br><span class="line">        <span class="keyword">uint16_t</span> a3 = <span class="built_in">analogRead</span>(A3);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_ADC_VALUE</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;A0: %u, A1: %u, A2: %u, A3: %u\n&quot;</span>, a0, a1, a2, a3);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">// 使用加权求和的方式来表示系统误差</span></span><br><span class="line">        <span class="comment">// Use weighted summation to represent systematic errors</span></span><br><span class="line">        <span class="keyword">float</span> turn_error = <span class="number">0.0</span>;</span><br><span class="line">        turn_error = turn_error + g_turn_error_k0 * a0;</span><br><span class="line">        turn_error = turn_error + g_turn_error_k1 * a1;</span><br><span class="line">        turn_error = turn_error - g_turn_error_k1 * a2;</span><br><span class="line">        turn_error = turn_error - g_turn_error_k0 * a3;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算转向环PID</span></span><br><span class="line">        <span class="comment">// Calculate turn PID</span></span><br><span class="line">        g_turn_p = g_turn_kp * turn_error;</span><br><span class="line">        g_turn_i = g_turn_ki * (g_turn_i + turn_error);</span><br><span class="line">        g_turn_d = g_turn_kd * (turn_error - g_turn_error_last);</span><br><span class="line">        <span class="keyword">float</span> turn_sum = (g_turn_p + g_turn_i + g_turn_d) / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_PID_VALUE</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Turn E: %.2f, Turn P: %.2f, Turn I: %.2f, Turn D: %.2f, &quot;</span></span><br><span class="line">               <span class="string">&quot;Turn Sum: %.2f\n&quot;</span>,</span><br><span class="line">                turn_error, g_turn_p, g_turn_i, g_turn_d, turn_sum);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据计算结果与当前所处状态控制电机的转速或转向</span></span><br><span class="line">        <span class="comment">// Control the speed or direction of the motor according to the</span></span><br><span class="line">        <span class="comment">// calculation result and the current state</span></span><br><span class="line">        <span class="keyword">int16_t</span> motor_speed_a = MOTOR_SPEED_REF;</span><br><span class="line">        <span class="keyword">int16_t</span> motor_speed_b = MOTOR_SPEED_REF;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 规定机器人水平向左为负向右为正，此时如果PID计算结果为正，则机器人需要向右偏移，</span></span><br><span class="line">        <span class="comment">// 右侧电机应降低一定的速度，速度变化值由PID计算结果的绝对值表示，反方向同理</span></span><br><span class="line">        <span class="comment">// It is stipulated that the horizontal left of the robot is negative</span></span><br><span class="line">        <span class="comment">// and the right is positive. At this time, if the PID calculation</span></span><br><span class="line">        <span class="comment">// result is positive, the robot needs to shift to the right, and the</span></span><br><span class="line">        <span class="comment">// right motor should reduce a certain speed. The speed change value is</span></span><br><span class="line">        <span class="comment">// represented by the absolute value of the PID calculation result.</span></span><br><span class="line">        <span class="comment">// The same goes in the opposite direction</span></span><br><span class="line">        <span class="keyword">if</span> (turn_sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            motor_speed_b = motor_speed_b - turn_sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            motor_speed_a = motor_speed_a - <span class="built_in">abs</span>(turn_sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_MTR_VALUE</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Motor A: %d, Motor B: %d\n\n&quot;</span>, motor_speed_a, motor_speed_b);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">setMotorSpeed</span>(MOTOR_A, motor_speed_a);</span><br><span class="line">        <span class="built_in">setMotorSpeed</span>(MOTOR_B, motor_speed_b);</span><br><span class="line"></span><br><span class="line">        g_turn_error_last = turn_error;</span><br><span class="line">        g_timer_turn_pid = ms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>我在测试TB6612FNG驱动板的时候，发现无论自己怎么设置电机始终不转，在排查硬件问题的过程中，我先后用万用表测试了电源管理模块输出和TB6612FNG驱动板的逻辑输入引脚，发现电源供电电压与信号高低电平均正常，所以首先可以排除电源供电不足和逻辑信号错误所导致电机不转的可能，之后我对驱动板的相邻引脚做了短路测试，偶然发现其BIN0、BIN1和GND引脚短接了，而短接出现的原因比较特殊：<strong>因为我是将两个电机直接固定在双面敷铜的洞洞板上，此时电机的外壳与正面的焊盘紧密接触，而背面的BIN和GND信号正好走在电机外壳的区域内，焊接时焊锡过孔导致两个信号与电机外壳联通，从而出现短接</strong>。但神奇的是解决短路问题后电机依旧不转，最后我是在面包板上复现TB6612FNG驱动电路的时候才发现自己竟然犯了一个非常低级的错误——忘记在代码中设置电机的PWM信号，我当初下意识认为PWM只用于调速，只要AIN或BIN信号设置对就能让电机转起来，可惜事与愿违。这个经历给我的启示在于<strong>做项目时要以官方提供的芯片或模块手册为准，不要想当然地按照自己的想法去做，否则后期出现问题的概率会比较高。</strong></p></li><li><p>在测试四路红外反射传感器的时候，我发现板子串口输出的数值竟然全部一样，经过单步调试后最终确定是自己编写的RVStarArduino库里的analogRead函数存在Bug，使得函数每次只能返回第一次设置的ADC通道的数值。解决方法是根据网上STM32 ADC多通道数据采集范例，将<strong>通道配置库函数</strong>从初始化阶段移动到analogRead函数中，这样系统就能根据不同的引脚编号来读取相对应的ADC通道数值了。</p></li><li><p>转向环PID算法中存在浮点变量和与之相关的运算过程，但是令人费解的是，程序在执行过程中始终无法在串口里打印出浮点数值，后来经过仔细排查发现系统自带的newlib为了优化编译后的体积，默认并没有开启浮点数运算功能，所以程序一遇到浮点变量就直接跳过执行了。解决方法其实很简单，只需要在编译器的链接参数中指定【-u _printf_float】即可。</p></li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_2.jpg" alt="巡线解迷宫机器人图2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_3.jpg" alt="巡线解迷宫机器人图3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_4.jpg" alt="巡线解迷宫机器人图4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_5.jpg" alt="巡线解迷宫机器人图5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/4_line_tracking_robot/robot_6.jpg" alt="巡线解迷宫机器人图6"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>巡线解迷宫机器人是我基于国产处理器来开发嵌入式应用的首次尝试，通过一个月左右的理论学习与动手实践，我学会了如何在项目正式开始前做需求分析，如何根据机器人所要实现的功能来做软硬件方案的选型，如何在遇到Bug的时候通过调试机制来定位并解决问题，如何规划机器人内部空间使硬件布局更加合理与美观等等。虽然最后因为其他项目节点的缘故，我并没有给机器人添加OLED显示和Wi-Fi传输模块，同时也没有实现解迷宫功能，但是我至少验证了<strong>采用RISC-V架构的国产嵌入式处理器无论是在运行时性能还是在开发便捷性等方面均不输于目前主流的STM32</strong>，所以本项目成果从原理验证的角度上来看还是达到了自己的预期。</p><p>最后我一直坚信<strong>学习某个理论知识最好的办法就是将其应用到某个具体的项目中</strong>，特别是对于嵌入式开发来说，在开始上手前应该先给自己选择一个比较有挑战性的小项目，然后在后期学习的过程中通过不断地搜集资料与解决问题，尽自己最大的努力将其实现出来，这样到时候你就会发现很多原本晦涩难懂的理论知识都是那么的合理与自然。本次巡线解迷宫机器人项目就是一个最好的范本，对此感兴趣的同学也可以自己尝试做一个，然后去实现一些文中提到却没实现的功能，当然相比最后的成果，享受过程才是最重要的，预祝大家玩得开心。</p>]]></content>
      
      
      <categories>
          
          <category> 自制机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> RISC-V </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队处理器系列（0x02）：木心处理器核-需求设计</title>
      <link href="/zh-cn/2021/02/06/team_cpu_2_treecore_design/"/>
      <url>/zh-cn/2021/02/06/team_cpu_2_treecore_design/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我是在大三下学期的时候（即2016年的夏天）第一次听到了RISC-V这个词，那会儿我舍友刚好参加了学院组织的《计算机体系结构》试点班，<strong>而他们的任务就是要基于RISC-V指令集去设计一款简单的软核CPU</strong>，当时我只知道它是由伯克利大学推出的开源RISC指令集，觉得跟我们普通班学习所要用到的MIPS指令集类似，所以就没有太放在心上。可是令人没有想到的是，经过短短几年的发展，RISC-V指令集已经得到了全世界众多互联网和半导体巨头的支持，而且有越来越多的研究机构和初创公司开始基于它来设计自己的专有处理器，我认为目前的RISC-V就像早期的Linux内核，虽然功能和性能还非常有限，但是借助开源协作的力量，<strong>我相信总有一天RISC-V也能在某些领域迎来一场足以改变旧有格局的革命</strong>。<span id="more"></span>因此为了不被即将到来的新时代所抛弃，作为一名业余硬件爱好者，我觉得自己还是很有必要好好学习一下RISC-V指令集的，没准以后有机会还能为国产自主可控处理器的设计和研发贡献自己的一份力量！</p><p>古人曾经说过：<strong>纸上得来终觉浅，绝知此事要躬行</strong>，既然自己决定要学习RISC-V，那就必须亲身实践才能搞明白，而对于这种处于计算机体系结构底层的项目来说，没有什么能够比自己从零实现一遍更好的方法了，于是抱着这种想法我开始在网上搜集资料，结果比较令人失望，虽说国外与RISC-V相关的开源项目有不少，但是其中很多都是用Chisel这种高级硬件构建语言来实现的，学习门槛非常高，再加上为了追求整体的性能，一些CPU的系统架构设计得非常复杂（如采用五级以上流水线、多核处理、乱序执行等），初学者想入门非常困难。所以经过深思熟虑后，我决定从零编写一款系统<strong>架构足够精简、代码足够清晰、封装足够优秀</strong>的开源处理器项目，希望它能像从众多微控制器中脱颖而出的Arduino一样，让更多的硬件爱好者可以快速上手体验，并基于此开发很多有意思的应用，未来在软硬件生态环境的互相促进下，也许会有更多的人喜欢上CPU开发并愿意花时间去钻研，如果真的能够做到如此，我也就心满意足了。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h3><p>如下图所示，根据木心开源处理器项目所涉及的技术要点，我将其第一版的开发任务总共划分为了5个阶段，分别为<strong>需求设计、硬件设计、软件设计、板级验证</strong>和<strong>板级应用</strong>，其中考虑到自己是第一次从零开始编写处理器，应该把更多的注意力放在代码的实现和调试上，所以<strong>板级应用</strong>这个阶段我将其设置成了选做，如果后期有时间的话，我还是希望自己能够将木心处理器封装到自己设计的开发板上的，好了废话不多说了，接下来简单介绍一下前4个阶段所必须要完成的任务内容。</p><p>首先是<strong>需求设计</strong>阶段，这个阶段主要是根据相关专业书籍和RISC-V指令集手册，确定木心处理器的整体架构，并完成软件开发环境的配置；紧接着是<strong>硬件设计</strong>阶段，这一步需要基于需求设计阶段所确定的系统架构，完成处理器功能模块与数据通路等核心硬件代码的编写和测试工作；接下来是<strong>软件设计</strong>阶段，在这期间需要完成软件底层（汇编文件、启动文件、链接脚本等）配置以及RTOS系统移植，从而确保木心处理器最终能够分别在裸机和RTOS环境下运行C语言程序；最后是<strong>板级验证</strong>阶段，顾名思义就是将软硬件代码烧录到FPGA开发板上，然后在物理端验证处理器的功能和性能等指标是否满足项目要求。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_1.png" alt="木心处理器任务进度图（该图不是最终版，后期可能会更新）"></p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><ul><li><h4 id="指标参数"><a href="#指标参数" class="headerlink" title="指标参数"></a>指标参数</h4><p>基于为了<strong>能够让初学者们更好入门</strong>的核心目标，我将第一版木心处理器的内部开发代号命名为<strong>TC-L1(TreeCore Learn 1)</strong>，即<strong>木心学习专用处理器第一版</strong>的英文简写，它是一款由处理器核、数据总线和外围设备所组成的SoC，无论是系统的核心与外围功能模块，还是指令执行所依托的数据通路在设计与实现阶段均追求极致的精简，只保留能够维持系统正常运行的最小环境，所以你可以把它看成是处理器领域的一个最小系统。<strong>注意：后文所有【处理器】特指的是SoC，而【处理器核】则指的是SoC中能够执行具体指令的硬件逻辑单元。</strong></p><p>木心TC-L1处理器的特性如下所示：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_2.png" alt="木心处理器功能模块图（该图不是最终版，后期可能会更新）"></p><ol><li>处理器核支持最基础的RV32I指令集，且能通过RISC-V指令集兼容性测试；</li><li>处理器核采用最经典的的<strong>五级流水线结构</strong>（即取指、译码、执行、访存和写回），且所有指令均是<strong>单发射顺序执行</strong>的，即系统架构设计满足Unix内核的<strong>K.I.S.S.</strong>准则；</li><li>处理器核设计有标准的JTAG调试接口，可通过OpenOCD实现系统的在线调试与升级；</li><li>处理器核设计有专用的数据总线接口，可通过数据总线与外围设备（目前设计有GPIO、SPI、UART等）进行单向或双向通信；</li><li>处理器核能够在裸机和RTOS环境下运行C语言程序；</li><li>处理器可通过参数进行配置，方便移植到各种FPGA平台（在逻辑资源允许的情况下）。</li></ol></li><li><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><p>如下图所示，TC-L1处理器的功能模块主要分为4大部分，分别为<strong>TC-L1处理器核、TCD调试模块、TCB数据总线</strong>以及<strong>TCC外部组件</strong>，其中处理器核毫无疑问是整个SoC里面最重要的一个模块，它主要负责处理经过软件编译生成的底层指令，并可通过总线接口与其他模块进行数据交互；调试模块则扮演的是辅助角色，用于在编写处理器的过程中提供快速定位系统Bug的能力；接下来的数据总线模块，其功能就好比是现实世界中的桥梁，可建立起处理器内部各模块之间的数据通路，便于实现数据的快速访问；而最后的外部组件模块则包含<strong>外部设备</strong>和<strong>存储器</strong>件共两个子模块，其中外部设备模块可实现处理器核与外部标准设备进行数据通信，而存储器件模块则主要用于存储维持处理器运行的各种指令和数据。</p></li><li><h4 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h4><p>在介绍完TC-L1处理器的各种功能模块之后，接下来让我们简单了解一下其内部的数据通路具体是什么样子的。如下图所示，TC-L1处理器核的数据通路采用经典的五级流水线结构，整条流水线由4个流水线寄存器（图中用细长条矩形标识）加以划分开来，其中最左侧的区域为<strong>取指阶段</strong>，此时处理器会根据PC寄存器中的地址，从指令存储器中获取需要执行的指令，并将其加载到IF/ID流水线寄存器中，以便在下一个时钟边沿到来时能够将数据传递给下一阶段；取指之后自然是<strong>译码阶段</strong>，此时处理器会根据组合逻辑译码后的结果，初始化核心<strong>控制逻辑</strong>，并依据指令的具体内容，执行内部中断、读寄存器或符号扩展等操作。</p><p>之后3个阶段依次分别为执行、访存和写回，其中在<strong>执行阶段</strong>，处理器会使用ALU对指令数据进行运算，并将最终运算得到的结果保存到流水线寄存器EX/MEM中以供后面使用；而对于<strong>访存阶段</strong>来说，此时处理器在控制信号的约束下，会对数据存储器进行读写操作，如果指令是读数据的话，则类似需要将获取到的数据保存到流水线寄存器MEM/WB中以供后面使用；流水线的最后是<strong>写回阶段</strong>，这一步其实执行逻辑很简单，就是将上一阶段读出的数据或在执行阶段得到的运算结果写回到译码阶段中的寄存器堆中，为之后指令的执行奠定数据基础。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_3.png" alt="木心处理器数据通路图（该图不是最终版，后期可能会更新）"></p></li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><h4 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h4><p>在上一篇<strong>《团队处理器系列（0x01）：软件安装与配置》</strong>文章中，我曾经详细地介绍了如何在Ubuntu系统上安装ModelSim这款CPU仿真利器，不过由于它本身是付费软件，配置过程（大家都懂的）对于新手来说比较复杂，再加上本项目对波形仿真的功能与性能没有太高的要求，所以这次我决定采用免费、开源的<strong>iverilog+gtkwave</strong>组合来替代之前的ModelSim。在类Debian系统（如Ubuntu）上的安装方法如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt update</span><br><span class="line">$&gt; sudo apt install iverilog</span><br><span class="line">$&gt; sudo apt install gtkware</span><br></pre></td></tr></table></figure></li><li><h4 id="例程测试"><a href="#例程测试" class="headerlink" title="例程测试"></a>例程测试</h4><p>在打开的命令行终端中依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir ~/Workspaces</span><br><span class="line">$&gt; <span class="built_in">cd</span> ~/Workspaces</span><br><span class="line">$&gt; git <span class="built_in">clone</span> git@github.com:microdynamics-cpu/tree_core_cpu.git</span><br><span class="line">$&gt; <span class="built_in">cd</span> tree_core_cpu/env</span><br><span class="line">$&gt; ./hello_world_tb.sh</span><br></pre></td></tr></table></figure><p>如果正常的话，此时应该能看到如下界面：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_4.png" alt="波形仿真界面"></p><p>以上是我编写的一个Verilog版的Hello World!程序的波形仿真结果，从图中可以看到测试模块的逻辑非常简单，只有两个信号，分别为时钟信号clk和复位型号rst_n，其中时钟信号每半个周期改变一次高低电平状态，而复位信号rst_n则是在10个周期后才由低电平变为高电平，之后系统在保持其高电平状态的情况下再运行10个周期，整个仿真流程便结束了。虽然这个例程的逻辑功能非常简单，但是却还原了一个最小的硬件仿真流程，能够让初学者们对接下来的硬件开发先有一个最基本的认识。</p><p>此外，我编写该测试例程的另一目的是为了<strong>实现一套最简单的RTL代码自动化编译与波形仿真的模板</strong>，如下图所示，用户只需在Testbench文件中添加两行<strong>$dumpfile配置函数</strong>，并Shell脚本中将测试模块的名称修改为实际Testbench文件的名字，便可通过在终端中执行该脚本以完成对RTL代码的自动化编译与加载波形仿真的工作，可以说有效地提高了硬件代码的验证效率，后期木心项目也会采用该模板来组织工程内的RTL代码。至于测试文件与脚本文件的具体内容，这里由于篇幅原因就不再过多赘述了，感兴趣的同学可以自行研究。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_5.png" alt="测试文件与脚本文件界面"></p></li></ul><h3 id="资料搜集"><a href="#资料搜集" class="headerlink" title="资料搜集"></a>资料搜集</h3><ul><li><h4 id="专业书籍"><a href="#专业书籍" class="headerlink" title="专业书籍"></a>专业书籍</h4><p><strong><a href="https://book.douban.com/subject/26604008/">《计算机组成与设计：硬件/软件接口（第五版）》</a></strong></p><p>下面这本书绝对称得上是计算机体系结构领域里最有名的著作之一，因为它是由RISC架构的奠基者帕特森教授和亨尼斯教授合作编写的<strong>（两位宗师级大佬荣获了2017年ACM图灵奖）</strong>，书中详细介绍了计算机体系结构的相关基础知识，并以MIPS指令集为例给出了一款经典RISC处理器的设计方法，内容质量非常高。这里推荐给大家一方面是因为<strong>第一版木心处理器采用的就是这本书中所介绍的经典五级流水线架构</strong>，这样后期大家学习起来会比较容易，<strong>二是这本书的译者之一是大学本科给我们上过课且带过我毕设的老师</strong>，出于对母校的感情，就允许我任性地自荐一下吧。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_6.png" alt="《计算机组成与设计：硬件/软件接口（第五版）》"></p><p><strong><a href="http://www.riscvbook.com/chinese/RISC-V-Reader-Chinese-v2p1.pdf">《RSIC-V手册》</a></strong></p><p>这本指南是由<strong>中科院计算所包云岗老师团队</strong>负责翻译的，原作为帕特森教授（RISC架构发明者）和沃特曼博士（SiFive创始人）合作编写的《The RISC-V Reader》，这本书给出了所有官方已定义的RISC-V指令集格式，并按照章节对RISC-V基础整数指令子集RVI、乘除法指令子集RVM、浮点指令子集RVF和RVD、原子操作指令子集RVA，以及其他可选的扩展子集进行了详细介绍，可以说是<strong>目前关于RISC-V指令集最权威且最全面的资料</strong>。在开始学习或动手实践前，强烈建议各位好好研究一下这本书，绝对受益匪浅。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_7.png" alt="《RISC-V手册》"></p></li><li><h4 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h4><p><strong><a href="https://liangkangnan.gitee.io/2020/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99RISC-V%E5%A4%84%E7%90%86%E5%99%A8/">tinyriscv项目</a></strong></p><p>目前国内与RISC-V相关的开源项目屈指可数，其中我觉得最适合小白入门学习的是下图中的这个tinyriscv项目，推荐理由主要是因为这款处理器不仅系统架构设计得非常简单，而且代码书写风格也非常规范，初学者只需要花很短的时间就能弄明白处理器执行指令的整个流程。除此之外，作者还编写了与本项目相配套的设计文档——<strong>《从零开始写RISC-V处理器》</strong>，里面详细地介绍了处理器的硬件实现、外部调试、软件测试等内容，文章总体质量非常高，后期木心项目也会在一定程度上借鉴tinyriscv项目的某些设计理念，当然无论最终本项目的完成情况如何，这里我都要先给tinyriscv项目的作者点一个大大的赞。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/2_treecore_design/treecore_design_8.png" alt="tinyriscv项目主页"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从大学选择硬件作为自己本科的学习方向开始，<strong>我就一直坚信它是支撑整个信息时代最关键的组件</strong>，试想一下倘若没有硬件所搭建的基础环境，那面向用户的高级操作系统也将不复存在，而如果没有了操作系统作为硬件和软件间的桥梁，那可以毫不夸张的说，当下信息时代的所有产物（互联网、大数据、AI等）都不可能会出现。处理器作为硬件的中枢神经，其重要性自然不言而喻，<strong>如果把整个信息产业比喻成一棵树木的话，那我认为处理器就是这棵树的精神核心（简称木心，没错本项目的命名便是由此而来的）</strong>，只有一棵树的木心足够稳定和强大，那它才能不断成长为根系错综复杂、枝叶繁盛茂密的参天大树，从而有力量抵抗外部各种恶劣环境而长久屹立不倒，处理器亦是如此。</p><p>前段时间我在知乎上看到了包云岗老师所写的有关<strong>国科大“一生一芯”</strong>计划的故事，相较于本科生能够带着自己设计的芯片毕业，我觉得该计划更大的意义在于：<strong>它打破了传统芯片教学无法在物理层面实践的壁垒，让更多的学生看到了独自设计芯片的可能性</strong>，如果能有更多的人喜欢处理器设计并愿意投入到其中，那未来国内芯片设计人才短缺的问题将会得到不断改善，中国也就有机会逐渐摆脱被发达国家卡脖子的窘境，于是借着“一生一芯”计划带给自己的启示，我决定启动<strong>木心项目</strong>，希望除了CS专业的大学生之外，普通的爱好者们也能转变对芯片设计的态度，并愿意尝试去学习底层技术，假以时日，星星之火也许真的可以燎原。</p><p>最后，感慨一下：<strong>在当前这个利益至上的时代，情怀是肯定敌不过生活的，但是人的生命只有一次，能够在有限的生命里去做一件有意义且难度大的事情，就算最后没有达到自己当初所设立的目标，我觉得这份经历本身也足以配得上成功二字！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 团队处理器系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> CPU </tag>
            
            <tag> TreeCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活随笔系列（0x03）：2019 日本关西赏枫自由行（准备篇）</title>
      <link href="/zh-cn/2020/09/23/life_note_3_2019_travel_kansai_preparation/"/>
      <url>/zh-cn/2020/09/23/life_note_3_2019_travel_kansai_preparation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为前几个月工作非常忙再加上自己平时就有拖延的习惯，所以今年都过半了<strong>《2019日本关西赏枫九日自由行》</strong>系列的第一篇文章才跟大家见面，这个本人必须好好检讨一下。好了言归正传，我是去年11月份中旬独自一人到日本关西赏枫的，至于为什么自己要将<strong>人生第一次出国旅行</strong>的目的地选在霓虹国，这个原因估计很多人听完后都会大吃一惊，没错，让我最终鼓起勇气决定去日本旅行的理由是一<strong>首日本歌曲。</strong></p><p>本人跟大多数同龄人一样都是从小看日漫长大的，动漫中的很多场景（如神社中的鸟居和各种祭祀活动等）都曾给我留下非常深刻的印象，可是不知为何自己的脑海里却从来没有产生过想要去日本看看的想法，直到去年4月份的一个周末，我在重温<strong>《名侦探柯南：唐红的恋歌》</strong>剧场版的时候突然被其中麻衣姐献唱的<strong>《渡月橋 ～君 想ふ～》</strong>这首歌所深深吸引，歌曲优美的和风曲调，再加上动漫中古都和红叶交相辉映的场景，实在是梦幻到令人无法抗拒，于是当时我就暗自下定决心——<strong>一定要在日本红叶季的时候去渡月橋看看。</strong></p><span id="more"></span><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preface.png" alt="《名侦探柯南：唐红的恋歌》中的渡月橋"></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>有了上面最初想要去日本旅行的想法之后，我又结合自己平时的兴趣爱好以及未来的人生规划（这个可能有些牵强） ，最终确立了自己本次日本之行所要达到的几个目的，具体如下：</p><ul><li><p><strong>欣赏历史建筑</strong><br>本人从小就非常喜欢历史建筑，我记得自己还在西安上大学的时候便经常坐车到市区去看各种寺庙和园林，每次去都能被这些古建筑巧夺天工般的结构设计以及蕴藏于其中的厚重历史所深深折服，说心里话，中国历史建筑的精致与雄伟真的很难用语言来形容，而作为模仿唐长安城而建立的<strong>平城京（奈良）</strong>和<strong>平安京（京都）</strong>，其存留至今的文化遗产数量也非常可观，所以正好趁着这次去日本关西赏枫的机会，我打算好好看看这两个古都的历史建筑到底与西安的有何不同。</p></li><li><p><strong>尝试圣地巡礼</strong><br>我在准备旅行攻略的时候，曾在<strong>穷游网</strong>上看到过一篇有关<strong>《名侦探柯南：迷宫的十字路口》圣地巡礼</strong>的文章，里面详细地讲述了每个巡礼地点的具体位置（有部分是作者根据剧情和现实推理得到的）以及如何安排行程等内容，当时看完之后我的内心无比激动：<strong>竟然真的可以在现实中抓拍到和动漫中几乎一样角度的照片</strong>，而且这种超越虚拟和现实的新奇感实在是太具吸引力，于是圣地巡礼也顺利地进入到了我的旅行规划之中。</p></li><li><p><strong>拜访京都大学</strong><br>我一直坚信<strong>大学是一个城市，乃至一个国家人文价值精神的最好体现</strong>，所以我每次出差或出去旅游的时候，一定要到当地的大学校园里走一走，当然本次日本之行也不例外，<strong>作为拥有众多诺贝尔奖获得者的亚洲顶尖名校</strong>，京都大学自然成为我的首选目标，不过除了声名显赫的学术地位以及本身悠久的历史之外，京都大学还有一个比较吸引我的就是其<strong>自由开放的学风</strong>，比如京大的学生经常会做一些批判学校或时事的看板放到校园里进行展示，至于现实中是不是这样，只能靠自己的双眼去判断了。</p></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>行前准备可以说是整个旅行过程中最重要的一个环节，接下来我将以自己本次日本旅行前的筹备经历作为参照给大家进行讲解，这里为了能够突出重点并方便读者快速掌握所需内容，我此次只介绍旅行前必须要准备的一些物品，至于其他像旅行攻略如何制订、公共交通的乘坐方法以及除必需外还要准备那些东西之类的，我之后还会再专门写一篇文章进行归纳和总结，好了让我们开始正题：</p><h3 id="证件类"><a href="#证件类" class="headerlink" title="证件类"></a>证件类</h3><p>旅行前的第一件事就是办理签证，目前签证的办理方式有很多种，这里我强烈推荐采用在线办理的方式，既方便又快捷，而且还能保证比较高的出签率，当然签证办理的套餐种类有很多，这个需要根据自己的实际情况来选，高校在校生或毕业生（好像是三年内有效）可以走教育那条线，而对于那些想要最大程度减少前期准备签证材料时间的在职人员来说，我觉得<strong>极简VIP套餐</strong>是最好的选择，你只需要将护照和照片寄给旅游中介机构，并在平台上填写一个申请表就可以了，其余像在职证明（我就是因为单位公章不好盖才选的这个套餐）、银行流水和资产证明等统统不用，价格虽说会贵一些，但是能省去很多不必要的麻烦。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/certificate/visa_1.png" alt="在飞猪平台上购买的极简VIP签证套餐"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/certificate/visa_2.png" alt="可在线实时查看签证办理进度"></p><h3 id="资金类"><a href="#资金类" class="headerlink" title="资金类"></a>资金类</h3><ul><li><h4 id="现金"><a href="#现金" class="headerlink" title="现金"></a>现金</h4><p>虽然日本被公认为制造业强国，但是受制于其有限的互联网技术水平以及大和民族固有的保守思想，日本的移动支付普及率其实远没有国内那么高，基本上除了便利店、繁华地段的购物和餐饮场所可以使用诸如支付宝、PayPal进行支付外，很多地方都需要用现金才能结算，所以去日本旅行<strong>一定要带现金</strong>，而且最好是在国内先换好，这样汇率会划算一些。我自己去之前总共换了4万日元现金，最后全部都花完了，各位可以根据实际情况自行斟酌到底带多少日元，个人建议如果要在日本玩7天的话，一个人最少要带3万日元才比较保险，<strong>这样万一银行卡在日本取不出来现金时还有回旋的余地（别问我是怎么知道的）。</strong></p></li><li><h4 id="银行卡"><a href="#银行卡" class="headerlink" title="银行卡"></a>银行卡</h4><p>银行卡对于出国旅行的人来说绝对算是必备物品中的必备物品，不管你是在第三方平台（比如Booking或Airbnb之类的）上预订酒店还是直接在线下刷卡消费都非常方便，当然最重要的是如果你“不幸”在国外把先前兑换好的现金都花完了，你还可以从当地的ATM机上取现以解燃眉之急，<strong>不过这个是有先决条件的</strong>，下面我将以自己本次旅行的惨痛经历（我带的两张银行卡都没能取出现金）来告诉大家如何正确地用<strong>银联储蓄卡</strong>从日本ATM机上取现。</p><p>首先先铺垫一下，日本的ATM机数量很多（因为放置在便利店里的缘故）而且绝大部分都可以完美识别银联卡，但这并不意味着你直接将卡插进机器就能取出现金，你还需要弄明白以下两件事：<strong>1、银行卡必须带有磁条而不能只有芯片；2、银行卡已经在国内开通了境外支付服务。</strong>第2条其实非常好理解，主要是发卡银行出于安全考虑，默认将境外支付服务关闭了，这个只要用手机银行开通一下就好，而对于第1条，我估计知道的人就不多了，我也是拿自己的两张卡对比尝试后才发现的（一张带磁条和芯片，一张只带芯片），个人推测日本现存的ATM机都比较老旧，只能识别带有磁条的旧卡，而对于带有芯片的新卡是不兼容的，所以第一次去日本的小伙伴们一定要注意这点，否则你可能就得跟我一样面对差点回不了国的尴尬境地了。</p></li></ul><h3 id="交通类"><a href="#交通类" class="headerlink" title="交通类"></a>交通类</h3><ul><li><h4 id="飞机类"><a href="#飞机类" class="headerlink" title="飞机类"></a>飞机类</h4><p>选购飞机票无外乎地要考虑两个关键因素：<strong>起降时间</strong>和<strong>机票价格</strong>，其中关于航班的起降时间如何选择，这个主要得根据你住的地方离机场的距离以及第一天的行程安排有关，比如酒店办理入住的最晚时间是否能够满足、到日本之后是否需要先到商店吃晚饭或买东西（日本一些店铺关门较早）之类的，个人建议航班到达日本或国内的时间不要晚于当地时间18:00，这样不会因为过度劳累而影响第二天的旅行或工作，至于航班的起飞时间，最好不要太早，这样可以防止因堵车或其他原因而无法按时到达机场情况的发生。</p><p>第二关键因素是机票价格，这个就相对来说好选择一些，主要看自己准备投入多少预算，如果预算高可以直接预订大航司的直飞航班（如国航、南航以及ANA全日空等），如果想省钱可以考虑廉价航空（如春秋、亚航、虎航、捷星等），它们的机票价格有时会降到令人难以置信的1000元以内，但是要注意一点：<strong>廉价航空的免费行李托运额是有严格限制的，一般4折以下机票是不带免费行李托运额</strong>，如果超过需要另外购买行李额度，费用应该不会太便宜（不然廉航怎么赚钱），所以在购票前一定要关注行李托运这块儿，可千万别因贪小便宜而吃大亏。<strong>最后非常不建议为了省钱而专门去预订那种中转航班</strong>，飞行时间不仅长且徒增旅行的疲劳，很得不偿失，还不如加一些钱买廉航的票，这样性价比会更高一些。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/traffic/plane_ticket.png" alt="携程机票订单"></p></li><li><h4 id="交通卡"><a href="#交通卡" class="headerlink" title="交通卡"></a>交通卡</h4><p>日本的交通卡跟国内的一卡通比较类似，只要卡里面有足够的现金，就可以直接刷卡乘坐交通工具，使用起来非常方便，除此之外，日本的交通卡还有几个国内没有的优势：<strong>1、不管购买哪家公司的IC卡，都可以在全国范围内使用</strong>，能做到这地步主要得益于遍布日本各地的十大IC卡公司成立了一个联盟，并将各自所拥有的线路进行了整合，这样就算你手持关西地区发行的ICOCA卡（下图所示）也能在东京搭乘Suica卡使用范围下的所有交通系统，大大提高了每条线路的复用效率；<strong>2、可以直接刷卡乘坐国营或私营电车（火车）</strong>，当然考虑到国内铁路的客运压力以及存在黄牛倒卖车票的情况，所以日本这种非实名购票制几乎无法在中国实现，这点还是比较可惜的；<strong>3、可以在便利店、商店、餐厅等场所消费</strong>，这条国内一些一卡通确实也能做到，但是考虑到上面第1条因素，我想就不用多说什么了。总之，去日本旅行，一张万能交通卡是必不可少的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/traffic/icoca_card.jpg" alt="ICOCA卡"></p></li><li><h4 id="优惠劵"><a href="#优惠劵" class="headerlink" title="优惠劵"></a>优惠劵</h4><p>日本跟旅游相关的优惠劵种类非常多，光京都就有<strong>京都巴士一/二日劵、京都地铁一日劵、京都观光一/二日劵（巴士+地铁）、岚电一日乘车券等等</strong>，这其中的原因主要在于乘坐日本公共的成本比较高（至少对于外国人是这样的），举个例子在京都坐一次<strong>均一系统</strong>（统一票价）的公交车就要230日元，折算成人民币大概15元左右，价格还是相当高的，所以为了吸引更多的国外游客来日本旅游和消费，官方就顺势推出了一些优惠劵，除了坐满一定次数便能值回票价外，还有一些优惠劵会附加景点优惠的政策，比如下图右侧的<strong>大阪周游一日劵</strong>，不仅市区内所有地铁随便坐，而且还附带几十个景点或设施的免费入场权限，其中就包括<strong>大阪城天守阁、通天阁</strong>等热门景点，总之如果你规划得当的话，优惠劵能帮你省下不少钱，而且还可以缩短排队等候的时间，是个不折不扣的旅行好帮手。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/traffic/travel_pass.jpg" alt="京都巴士一日劵和大阪周游一日劵"></p></li></ul><h3 id="住宿类"><a href="#住宿类" class="headerlink" title="住宿类"></a>住宿类</h3><p>住宿这块儿主要是需要根据自己实际的经济情况来选择，毕竟经济基础决定上层建筑，如果预算多可以优先考虑酒店或民宿，如果资金有限或者是想要体验最原始的背包客生活，那么可以跟别人一起合住的青年旅馆就非常适合你，总之不管你最终倾向于哪种类型的酒店或旅馆，在开始正式预订前一定要先好好阅读以下几条建议：<strong>1、最好在Booking（缤客）、Agoda（安可达）等官方平台上去预订房间</strong>，这样可以有效避免因第三方平台可能存在的信息不对称问题而导致无法入住情况的发生；<strong>2、如果是在旅游旺季（樱花季或红叶季）去日本旅游，一定要至少提前3个月就预订好房间</strong>，不然到时候价格会贵得令人咋舌而且还不一定能订到；<strong>3、住的地方最好离交通枢纽近一些，这样可以大大节省一早赶往热门景点的时间以及换乘成本。</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/accommodation/jin_hotel.png" alt="在Booking上预订的吉恩旅馆（价格前面的符号代指的是日元，不是人民币）"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/accommodation/oto_hotel.png" alt="在Booking上预订的奥托旅馆（价格前面的符号代指的是日元，不是人民币）"></p><h3 id="数码类"><a href="#数码类" class="headerlink" title="数码类"></a>数码类</h3><ul><li><h4 id="微单相机"><a href="#微单相机" class="headerlink" title="微单相机"></a>微单相机</h4><p>如今智能手机的更新速度越来越快，其拍照功能也越来越强大，甚至在某些指标方面已经达到主流单反相机的水平，而且用户不用学习很多专业知识也能依靠系统自带的AI算法拍出相当优秀的照片，所以如果你对照片没有特别高的要求，去国外旅行使用手机拍照也是不错的选择，不过我建议那些对画质要求稍微高一些的用户可以考虑买台微单相机，对没错，<strong>是微单而不是单反</strong>，这里推荐微单主要原因在于其轻便，我猜你肯定不想扛着一台“大炮”去爬山吧，不然还没开始拍照可能你就已经累个半死了:-(</p><p>至于微单相机买什么品牌的，这个得根据自己的预算和需求进行综合考量，如果实在不知道如何选择相机，知乎上也有很多专业回答可供参考，反正对于我来说，<strong>轻便、颜值、操作</strong>和<strong>价格</strong>是我最看重的几个指标，所以我很容易就排除了<strong>索尼、松下</strong>和<strong>富士</strong>（这里并没有说这几家微单不好，只是它们不太适合我）并最终选择了<strong>奥林巴斯</strong>，后来事实证明我的选择确实没有错，这款相机不仅操作感极佳（有很多外置波轮），而且最厉害的地方在于它机身自带五轴防抖，这意味着在夜晚拍照时，我可以在不增加光圈或ISO的情况下，也能通过降低快门时间来保证照片有准确的曝光，总之它是一款性能不错的中端微单相机，感兴趣的朋友可以关注一下。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/digital/olympus_camera.jpg" alt="奥林巴斯EM5II相机+12-40 Pro标准变焦镜头"></p></li><li><h4 id="万能插头"><a href="#万能插头" class="headerlink" title="万能插头"></a>万能插头</h4><p>万能插头对于经常出国旅行的人来说肯定不会陌生，有了它基本上去全球任意一个国家都能够愉快地给自己的电子设备充电，当然如果你去的国家是日本的话，这个万能插头的作用可能不会太明显，因为国标的双插设备是可以直接插在相应的日标插座上的，而且目前绝大部分电子设备的电源适配器均支持100-240v宽电压以及频率为50/60Hz的交流电，所以除非你要携带三插设备，否则不带万能插头其实影响也不大。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/digital/universal_plug.jpg" alt="万能插头"></p></li><li><h4 id="上网卡-amp-移动WiFi"><a href="#上网卡-amp-移动WiFi" class="headerlink" title="上网卡&amp;移动WiFi"></a>上网卡&amp;移动WiFi</h4><p>我认为去日本旅游除了签证和现金之外，第三需要解决的就是上网问题，毕竟当今我们正处于互联网时代，没有网络很多事情都做不了，因此在国外如何上网绝对是个要优先考虑的事项，不过由于这块儿内容本身比较多，解释起来会花费比较大的篇幅，所以这里我不展开讲解，先直接给出结论，等后期自己写自由行专题攻略时再给大家进行详细介绍。好了长话短说，结论具体如下：</p><p><strong>如果你是一个人去日本旅游的话，那我推荐你使用类似下图中的这种上网卡</strong>，优点在于套餐价格便宜而且不占体积，直接装到手机里就可以用，但是对于某些不是全网通手机（比如移动的部分合约机）来说可能无法使用；<strong>而如果你是和同伴一起去的话，那租移动WiFi是最好的选择</strong>，不仅平摊费用低而且还不用考虑手机硬件是否支持国外网络制式的问题，但缺点也很明显，就是携带起来会比较沉且需要定时充电；当然，<strong>如果你想省事且不差钱的话，可以选择开通国内厂商提供的境外上网服务</strong>，比如移动的<strong>无忧行</strong>、小米的<strong>全球上网</strong>、华为的<strong>天际通</strong>等，但至于最终上网效果如何，就需要各位自行体验了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/digital/network_card.jpg" alt="亿点上网卡套装"></p></li></ul><h3 id="软件类"><a href="#软件类" class="headerlink" title="软件类"></a>软件类</h3><p>如果你想要在出国旅行的时候畅通无阻，那么好用的手机App肯定是必不可少的，这里我主要根据自己前期看过的旅行攻略以及从网上收集到的一些资料，总结出了一份个人认为比较全面的<strong>手机App安装清单（如下两图所示）</strong>，其中组内每个App的排列顺序我又根据其细分类别和使用频次进行了调整，优先级越高的越靠前，这样大家就能很清楚地知道哪些App对于旅行是十分重要的，好了废话不多说，接下来直接进入App简介板块：</p><p>对于国内旅行App这块儿，我主要推荐下图中的这几款，其中<strong>携程旅行</strong>我主要用它来买飞机票，原因很简单，因为它上面聚合了很多航司的航班信息（包括廉价航空），可以很方便地查阅最新的机票价格，而且作为国内旅行平台的元老，其可靠程度还是非常高的；此外，我会用<strong>马蜂窝旅游</strong>和<strong>穷游（包括穷游锦囊）</strong>这两个平台来看旅行攻略，相较于其他同类软件，它们最大的特点在于<strong>提供免费且详实的离线版攻略文件</strong>，这样只要将它们保存在手机里就可以随时随地翻看，非常方便；最后我要特别推荐<strong>穷游行程助手</strong>这款App，它不仅内置各种景点、交通和酒店信息用于制订行程，还贴心地提供有<strong>花费、汇率、问路</strong>等小工具，可以毫不夸张地说，有了这个软件，你的旅行绝对会轻松很多！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/software/domestic_app.png" alt="国内旅行App"></p><p>对于国外旅行App这部分，我用的最多的是下图第一行里的<strong>换乘案内</strong>和<strong>谷歌地图</strong>这两款，其中<strong>换乘案内</strong>这个软件我首先推荐给大家，因为它的功能实在是太强大了，只要你在这个App里输入起点和终点，它就能帮你自动计算出<strong>最快到达、换乘最少</strong>以及<strong>费用最少</strong>共三种搭乘方案，而且每个方案里面给出的路线均标注了搭乘某种交通工具的详细名称、所需费用、途径站台以及换乘方法等信息，非常好用；<strong>谷歌地图</strong>这个我就不多说了，出国旅游绝对必装软件，无论是导航（在国外，精度比百度要高很多）还是查找路线都很方便，不过对于Android用户来说，要想享受高质量的定位服务，就<strong>必须先在自己的手机上安装谷歌框架才行</strong>，不然就算装上谷歌地图也用不了，至于谷歌框架如何安装，网上有很多这方面的教程，这里就不再赘述了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/preparations/software/foreign_app.png" alt="国外旅行App"></p><h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><h3 id="第一天（2019-11-16）"><a href="#第一天（2019-11-16）" class="headerlink" title="第一天（2019.11.16）"></a>第一天（2019.11.16）</h3><p>以下是我在<strong>穷游行程助手App</strong>中做的第一天旅行规划，按照地域主要划分为国内和国外两个部分，其中国内行程比较简单，首先是从北京南站坐京津城际高铁抵达天津，然后打车去天津滨海国际机场办理登机和出关手续，最后只要等待飞机顺利起飞就万事大吉了；而国外部分则稍显复杂，首先要从关西空港站坐关空特快列车HARUKA前往京都，然后在京都站附近找个快餐店解决晚饭，待休整完毕后需要坐地铁去位于三条附近的LOFT文具店买集各种徽章<strong>（日本的很多车站、景点都会有限量款的印章供游客加盖收藏）</strong>用的手账本，最后再坐市营巴士到之前预订的青年旅社办理入住即可完成第一天的所有安排。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/qiongyou/qiongyou_1.png" alt="穷游第一天行程1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/qiongyou/qiongyou_2.png" alt="穷游第一天行程2"></p><p>看到这里估计很多小伙伴会问为什么我不选择从首都国际机场出发前往大阪，而非得要拖着笨重的行李箱辗转跑到天津去坐飞机？这个原因其实很好解释，因为从天津出发往返大阪的<strong>直飞机票</strong>要比从北京出发的便宜很多，我当时计算过，如果购买从首都机场出发的机票，最便宜的也得要3500+，而天津航空GS7979这个航班的机票最便宜的时候曾一度降到2000元左右，如果购买他们的机票，就算是加上高铁和出租车的费用，也能省下大概1000多块钱，这对于刚参加工作没几年的我来说绝对是个好事，不过代价就是得起得非常早去赶高铁。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/beijing_north_station/crh_fuxing.jpg" alt="京津城际高铁的列车头（头一次拍高铁的列车头，感觉国产列车也挺好看的）"></p><p>俗话说得好：<strong>一分钱一分货</strong>，我之前在<strong>航旅纵横APP</strong>上查看这趟航班信息的时候，就曾看到过很多旅客对机场和航班的餐饮服务表示过担忧，虽说自己早已做好了心理准备，但是实际情况还是比较令人失望的，候机大厅里除了一两家便利店之外连个吃饭的地方也没有，而且也不能自助值机和打印登机牌，感觉国内一些二三线城市的机场设施都要比这个直辖市的强许多，唉算了，毕竟自己选择的是穷游，吃一些苦也是旅途的一部分吧。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/tianjin_airport/check_in.jpg" alt="游客们正在排队办理值机和行李托运手续"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/tianjin_airport/plane.jpg" alt="执行本次飞行任务的客机"></p><p>经过漫长的等待之后，我们的客机终于要起飞了，为了能够拍到客机飞越渤海湾以及大阪市区时的美丽景色，我在值机前就研究过本次航班的机型并根据其飞行路线，最终选择了客机中部右侧一个靠近舷窗的座位，这样不仅能够保证拍照时画面有充足的光线，而且还能以最佳角度拍到机翼掠过蓝天碧海的动人景致，后来事实也的确印证了我的想法，只不过现实中的美景更加震撼人心，好了废话不多说了，直接上图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/tianjin_airport/plane_take_off.jpg" alt="客机马上就要起飞了"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/air/air_1.jpg" alt="从客机舷窗处拍到的壮观云海1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/air/air_2.jpg" alt="从客机舷窗处拍到的壮观云海2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/air/air_3.jpg" alt="客机机翼与远处的云海交相辉映"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/air/air_4.jpg" alt="从客机舷窗处俯瞰到的大阪市区（因为舷窗玻璃刮痕较多且存在大块的模糊区域，所以拍出来的照片会给人一种雾蒙蒙的感觉，其实大阪的天空非常干净）"></p><p>伴随着客机在停机坪上缓缓地停稳，我和一部分乘客也开始忙碌起来——<strong>给手机更换SIM卡</strong>，虽然旅行之前我已经确认过自己的手机不是合约机，但是内心还是有一些忐忑不安，毕竟上网卡跟移动WiFi不一样，<strong>只能在飞机落地后才可以激活使用</strong>，所以如果此时真的出现因手机硬件不兼容而导致无法上网情况的话，解决起来可就非常麻烦了，不过好在经过一番简单的操作之后，手机的信号格旁终于出现了软银的标志，这下悬着的心总算可以放下了。</p><p>接下来就是和大家一起排队等待出关了，其实这块儿的流程我觉得比想象中的要简单，基本上只要跟着大部队走就没啥大问题，这里为了普及还是简单介绍一下，从日本机场出关主要分为<strong>入境审查、行李领取</strong>以及<strong>海关检查</strong>三部分，其中对于入境审查和海关检查这两步，你只需要将填好的<strong>入境记录卡</strong>和<strong>行李申报单</strong>夹在护照里交给工作人员即可，此外入境审查还会额外要求拍照和录指纹，这个也没啥难度，只要按照示范去做就行。</p><p>最后，我想提一下行李领取这块儿，一般国内的机场行李都是放在<strong>蜿蜒曲折</strong>的转盘上让乘客自行取走的，如果错过的话就只能再多等一会儿，而当我从关西国际机场入境审查关口走出来的时候，几乎所有旅客的行李箱均已从转盘上被搬下来并按照顺序码放得非常整齐，说实话看到这一幕，我内心其实是非常震惊的——<strong>短短二十几分钟的时间竟然可以做到如此程度</strong>，看来日本这个国家还是很多东西值得我们好好学习的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kansai_airport/airport_bus.jpg" alt="关西国际机场的免费摆渡列车"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kansai_airport/airport_nintendo.jpg" alt="关西国际机场出口处的任天堂展位（毕竟任天堂的总部就在京都）"></p><p>从关西国际机场出关后，沿着指示牌走便可到达<strong>关西空港站</strong>，关西空港站是关西地区最重要的交通枢纽之一，它主要由<strong>南海电气铁道（南海电铁）</strong>与<strong>西日本铁道（JR西日本）</strong>两个公司共同运营，有意思的是由于一些历史原因，日本是允许存在私营铁路公司的（这也是为什么日本被称为<strong>电车王国</strong>的主要原因之一），而上边提到的那个南海电铁就是一家私铁，总体来说如果不是专门为了体验某种型号电车的话，其实坐公铁还是私铁感觉区别不是很大。好了，下面具体介绍一下如何从关西空港站乘车。</p><p>在日本乘坐电车无非就是要搞明白三件事：<strong>选择哪条线路、怎么购买车票</strong>以及<strong>如何搭车换乘</strong>，首先对于线路选择这块儿，南海电铁（以下简称南海）和JR西日本（以下简称JR）均有两种类型的电车，分别为特急（JR对应为特快）和急行（JR对应为快速），顾名思义特急（或特快）电车运行时速快且停站较少，但价格也相应会贵一些，如果你决定去大阪且赶时间的话，你可以选择南海的<strong>特急列车Rapi:t号</strong>或JR的<strong>特快列车HARUKA号</strong>，如果不着急可以坐南海的<strong>空港急行</strong>或JR的<strong>关空快速</strong>，不过如果你第一站要去京都的话，我强烈建议你乘坐JR的特快列车HARUKA号，它不仅速度快而且还能直达京都，性价比非常高。</p><p>关于如何购买车票，我觉得最简单的方法就是在淘宝或其他电商平台上先买好，这样到关西空港站后就可以直接检票乘车，避免<strong>旅游旺季</strong>时需要在现场排队购票或取票而耽误时间。在拿到车票之后，你还需要弄明白如何<strong>乘坐正确的电车</strong>，这个对于从关西空港站上车的游客来说其实没啥难度，因为不管是南海还是JR，其站台的<strong>每条铁路均只运行1个特定的线路（日本别的一些站台就不是这样的）</strong>，所以你只要根据站台上方提示牌里的信息站好位置就肯定不会坐错。最后提醒一下各位，日本的一些电车是分<strong>自由席、指定席、女性专用</strong>等车厢的（站台上会有相应的标记），千万别走错，不然补票那都算是小事，要是被认定为痴汉可就麻烦了……</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kansai_airport/airport_station_1.jpg" alt="关西空港站的售票大厅"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kansai_airport/airport_station_2.jpg" alt="关西空港站的JR电车检票口"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kansai_airport/airport_station_3.jpg" alt="关西空港站台上的列车信息提示柱"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation//routes/kansai_airport/jr_haruka.jpg" alt="关空特快列车HARUKA号（Hello Kitty的涂装确实很卡哇伊）"></p><p>列车顺利抵达京都站后，按照之前制订的旅行规划，我决定先解决自己的晚饭问题（毕竟中午在飞机上我只吃了一袋饼干），由于后面本人要赶时间去位于<strong>京都三条</strong>的<strong>LOFT文具店</strong>购买手账（日本很多商铺关门时间较早），所以我就没去伊势丹百货楼里的那条有名的<strong>拉面小路</strong>，而是选择了离站台很近的一家可以自助点餐的小店，虽然店面看上去不是很大，但是他家的肥牛饭很有特色（可能是我人生第一次吃日料的缘故），饭里面好像加入了一些由黄色剁椒做成的汤汁，吃起来跟撒了胡椒一样，越吃越入味，推荐着急赶路的伙伴们去这家店尝尝，好吃又不贵。</p><p>在吃完简餐并忍耐着喝完冰水后（日本人果然不喝热水），我拉着行李箱开始向位于市中心的京都三条进发，其实在最初的旅行计划中，这段时间我应该去京都站对面的<strong>京都塔</strong>上慢慢欣赏古都夜景的，可惜事与愿违，双十一那天自己买的<strong>MIDORI手账本</strong>迟迟不发货，为了不影响后几天收集各种限定款徽章，我只能忍痛割爱选择去日本当地的线下实体店购买手账，看来京都塔之旅只能等下次二刷京都的时候再实现了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/travel_notes/1_kansai_2019_preparation/routes/kyoto/kyoto_tower.jpg" alt="夜幕中的京都塔还是很迷人的"></p><p>从京都站出来后我就没再拍照片了（现在想想觉得挺后悔的），所以后面的行程没办法一一详细地介绍给大家，不过在这个过程中却发生了几件比较有意思的事情，这里我觉得还是很有必要跟大家分享一下，以防止一些小伙伴重蹈我的覆辙：</p><ul><li><p><strong>准备乘坐京都地铁乌丸线，却无法通过电车的闸机口</strong><br>这个问题会出现主要是因为我把京都站的出站闸机错当成地跌的入站闸机了，而且我在关西空港站是用纸质车票过的闸机，并没有刷ICOCA卡，所以出站的时候怎么刷ICOCA卡肯定都是没有用的（没有入站信息），解决方法其实非常简单，<strong>只需将HARUKA或其他电车的纸质车票插入到闸机里即可</strong>，不过由于当时自己赶时间比较着急，并没有想到这块儿，经过几次尝试都无功而返后，我只能比划着向车站工作人员求助（本人不会日语）。</p><p>接待我的是一位穿着制服的中年大叔，他在弄明白我的意思之后开始重复说一个英文单词，但是不知出于什么缘故，我并没有立刻听懂那个单词的意思，后来我灵机一动，从挎包里拿出护照夹（里面还收纳有纸质车票、交通卡、交通劵、日元现金和银行卡等）并打开让他选，几乎是在一瞬间的功夫，大叔用手指点了点我夹子里的那个HARUKA车票，我突然醒悟过来——<strong>原来大叔一直在重复说的单词是Ticket啊</strong>，看来日式英语要能听懂还真得花一些时间去适应才行:-)。</p></li><li><p><strong>根据导航前往三条文具店，但是几次都莫名其妙走过</strong><br>那天晚上不知道是中了什么邪，地图上明明显示LOFT文具店就位于河原町通和六角通的交汇处，可是我都走到<strong>蛸药师通</strong>了还没有发现店门的入口，然后低头一看手机，发现自己竟然莫名其妙地走过了，这对于平时方向感极佳的我来说是难以想象的，没办法我只好先过马路然后再掉头往回走，这次我特意在看谷歌地图的同时还用眼睛四处寻找店面的招牌，果不其然经过几分钟的路程，我终于找到了这个占据好几层商场的文具店。</p><p>事后我分析了一下原因，发现是<strong>因为我的红米手机开了省电模式，此时系统会自动关闭GPS，而只用WiFi进行定位，所以定位精度有时会偏差好几米甚至十几米。</strong>不过好在我还是凭着方向感找到了商店，不然晚上能不能按时到达民宿都是个问题。</p></li><li><p><strong>打算乘坐出租车赶往民宿，但车还没启动就被轰下车</strong><br>这个故事我跟周边的很多人讲，他们都不相信，<strong>毕竟日本可是公认的全世界服务业水平最高的国家之一，这种搁国内都令人气愤的拒载事件怎么可能发生？</strong>但是很不幸的是它确实发生了，事情的具体经过是这样的：那天我从LOFT文具店买完手账出来时间已经不早了，为了能及时赶到民宿办理入住（听说日本人特别守时，迟到会给人留下不好的印象），我急忙招呼了一辆停在路边的出租车，一开始都没问题，可是等我用英语告诉司机我要去谷歌地图上的某个地点时，感觉司机的态度立马来了一个180度大转变，嘴里跟连珠炮似地吐出一堆日语，最后索性把车门和后备箱也给打开了，虽然我一句日语也没听懂，但是司机的肢体语言已经表达得很明确，没办法我只好无奈地下了车。</p><p>后来那天晚上我没再敢叫出租车，而是选择老老实实乘坐巴士赶往目的地。<strong>时至今日，我也没弄明白自己到底做错了什么或者触犯了什么禁忌，才导致一开始礼貌有加的司机后来变得如此生气</strong>，如果大家有知道原因的可以在评论区给我留言，我会积极改正，当然如果那位司机很不走运地是个右翼份子的话，我也已经想好了对策，等我下次再去日本旅行的时候，再遇到此类事情时，我绝对连投诉都不投，而是直接用新学的日语怼回去，到时候看他们还敢这么嚣张吗！（这里稍微有些言重）</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在我动身前往日本之前，身边的一些朋友就曾问过我：<strong>你独自一人出国旅行不害怕吗？</strong>说实话不仅不害怕，反而非常期待，因为对于我来说，<strong>探索未知事物的那种冒险感觉更令我着迷</strong>，当然自己在旅途过程中也确实遇到过一些困难（我会在后面的文章中讲到），但是这样的旅行才有意思不是吗？这就好比《海贼王》世界里的路飞海贼团无论陷入何种险境，也不会靠永久指针前往终点<strong>拉夫坦路</strong>一样，有些时候战胜艰难险阻的过程才是一趟旅行中最有意思且最值得怀念的那部分！</p><p>最后，简单介绍一下这个游记系列本身，由于本人在此次旅行中参观过很多景点且不想像一些网上的攻略那样把所有内容都堆砌在一篇文章里，所以我决定将游记共拆分为五篇，其中第一篇（就是本篇）主要讲解旅前准备以及去程的整个经过；第二至四篇分别记录自己在奈良、京都和大阪的游玩经历，最后一篇着重记述整趟旅行的感悟与收货，<strong>可以说每一篇内容都是干货满满，希望感兴趣的读者能够多多支持，谢谢！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
            <tag> 自由行 </tag>
            
            <tag> 旅行攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队处理器系列（0x01）：软件安装与配置</title>
      <link href="/zh-cn/2020/05/05/team_cpu_1_software_install_config/"/>
      <url>/zh-cn/2020/05/05/team_cpu_1_software_install_config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得自己大三在上《计算机体系结构》课程的时候，曾经独自完成过一个基于MISP指令集的多周期CPU，虽然当时它只能执行大概50多条基本指令且没法像流水线CPU那样可以并行工作，但是当看到自己编写的Verilog模块代码能够通过Modelsim仿真得到正确的波形时，那种成就感是编写普通的软件程序所无法比拟的。也许正是得益于此次经历，让我后来萌发了想要DIY一个完整CPU的想法，不过由于学业和工作上的种种原因，这个想法就被暂时搁置了。</p><p>随着近几年RISC-V开源指令集逐渐在学术和工业界得到认可，个人设计CPU已经不再是遥不可及的事情，再加上自己最近被胡振波老师的<strong>《手把手教你设计CPU——RISC-V处理器篇》</strong>这本书中的内容所深深吸引，于是我决定重启<strong>自制CPU项目</strong>。当然，因为我目前只能算是一个初学者，所以如果接下来的文章中有哪些内容写得有误，欢迎各位大佬指正！</p><span id="more"></span><p>好了言归正传，作为整个《团队处理器系列》专栏的开篇，本篇文章主要介绍如何在Ubuntu系统上安装ModelSim和Quartus II这两款CPU开发利器。<strong>注意：文章中所涉及的软件安装与配置仅在64位的Ubuntu 16.04系统上测试通过，如果你使用的Ubuntu版本大于16.04或者使用的是其他GNU/Linux发行版，则以下部分步骤可能并不适用。</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="ModelSim"><a href="#ModelSim" class="headerlink" title="ModelSim"></a>ModelSim</h3><blockquote><p>Mentor公司的ModelSim是业界最优秀的HDL语言仿真软件，它能提供友好的仿真环境，是业界唯一的单内核支持VHDL和Verilog混合仿真的仿真器。它采用直接优化的编译技术、Tcl/Tk技术、和单一内核仿真技术，编译仿真速度快，编译的代码与平台无关，便于保护IP核，个性化的图形界面和用户接口，为用户加快调错提供强有力的手段，是FPGA/ASIC设计的首选仿真软件。</p></blockquote><ul><li><h4 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h4><p>如果已经手动配置过Java运行环境，则请忽略下面的安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt update</span><br><span class="line">$&gt; sudo apt install default-jre</span><br><span class="line">$&gt; sudo apt install default-jdk</span><br></pre></td></tr></table></figure></li><li><h4 id="安装32位依赖库"><a href="#安装32位依赖库" class="headerlink" title="安装32位依赖库"></a>安装32位依赖库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo dpkg --add-architecture i386</span><br><span class="line">$&gt; sudo apt install libxext6:i386 libxtst6:i386 libxi6:i386 libstdc++5:i386</span><br></pre></td></tr></table></figure></li><li><h4 id="安装程序文件"><a href="#安装程序文件" class="headerlink" title="安装程序文件"></a>安装程序文件</h4><p>将安装脚本赋予755可执行权限，然后以管理员权限运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir ~/Softwares</span><br><span class="line">$&gt; cp -r ~/Downloads/modelsim_se_10.2c ~/Softwares</span><br><span class="line">$&gt; <span class="built_in">cd</span> ~/Softwares/modelsim_se_10.2c</span><br><span class="line">$&gt; sudo chmod 755 install.linux</span><br><span class="line">$&gt; sudo ./install.linux</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_1.png" alt="modelsim_1"></p><p>点击窗口中的【Install Products】选项。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_2.png" alt="modelsim_2"></p><p>选择安装目录为【/opt/modelsim】，并点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_3.png" alt="modelsim_3"></p><p>勾选【10.2c】目录前面的多选框以安装全部内容，并点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_4.png" alt="modelsim_4"></p><p>点击【Agree】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_5.png" alt="modelsim_5"></p><p>点击【Install】按钮进行安装。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_6.png" alt="modelsim_6"></p><p>点击【Done】按钮关闭安装程序。</p></li><li><h4 id="破解程序文件"><a href="#破解程序文件" class="headerlink" title="破解程序文件"></a>破解程序文件</h4><blockquote><p>注意：将Windows下破解ModelSim时所生成的【license.txt】文件复制到GNU/Linux系统的相应目录下或先将  其重命名为【license.dat】后再作为ModelSim软件的许可证文件，经过测试都是不可以的；此外，不同版本的许可  证文件也可能⽆法通⽤，⽤这些存在问题的许可证文件运⾏vsim时，基本都会提⽰当前软件⽆显⽰图形界⾯权限。</p></blockquote><p>以上内容大意来源于简书作者<strong>锦穗</strong>的《Quartus/Modelsim Linux搭建笔记v0.1》这篇文章。关于锦大神提到  的在Windows下生成的ModelSim许可证文件在GNU/Linux系统下无效的问题，这个本人没有实际测试过，不过既然作  者如此坚持，为保险起见，我最终也采用了作者提出的曲线救国方法，即先在Ubuntu下安装Wine，然后再用其调用破  解工具直接生成许可证文件。Wine官方推荐的安装步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; wget -nc https://dl.winehq.org/wine-builds/winehq.key</span><br><span class="line">$&gt; sudo apt-key add winehq.key</span><br><span class="line">$&gt; sudo apt-add-repository <span class="string">&#x27;deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main&#x27;</span></span><br><span class="line">$&gt; sudo apt install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure><p>在成功安装Wine之后，需要在第一次使用之前使用下面的命令初始化wine配置文件，并将其添加到root用户组里，以便接下来我们能够以管理员权限运行ModelSim的破解工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; winecfg</span><br><span class="line">$&gt; sudo chown root:root -R ~/.wine</span><br></pre></td></tr></table></figure><blockquote><p>注意：在运行下述的wine命令时，不要在电脑usb口上插外置的usb网卡，如果是笔记本电脑，最好把外设都给拔掉。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> /opt/modelsim/modeltech/linux_x86_64/</span><br><span class="line">$&gt; sudo cp ~/Softwares/modelsim_se_10.2c/.../MentorKG.exe ./</span><br><span class="line">$&gt; sudo wine MentorKG.exe -patch .</span><br></pre></td></tr></table></figure><p>如果终端没有报错的话，系统会弹出下图所示的文本编辑器窗口。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_7.png" alt="modelsim_7"></p><p>点击文本编辑器工具栏【File】下的【Save As】选项。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_8.png" alt="modelsim_8"></p><p>在弹出的文本保存窗口中，手动将文件名称修改为【license.dat】，并选择文件编码格式为【Unicode(UTF-8)】，最后点击【Save】按钮即可将生成的许可证文件保存到系统本地（推荐放到【~/Documents/License/modelsim】目录下）。</p><p>最后，将破解补丁文件拷贝到ModelSim的安装目录下，并在赋予755可执行权限之后，使用管理员权限调用patch_calibre2011_linux脚本文件执行破解。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> /opt/modelsim</span><br><span class="line">$&gt; sudo cp ~/Softwares/modelsim_se_10.2c/.../patch_calibre2011_linux ./</span><br><span class="line">$&gt; sudo cp ~/Softwares/modelsim_se_10.2c/.../sfk ./</span><br><span class="line">$&gt; sudo chmod 755 patch_calibre2011_linux sfk</span><br><span class="line">$&gt; sudo ./patch_calibre2011_linux</span><br></pre></td></tr></table></figure><p>如果终端里只出现类似下面的错误，则表明破解补丁已经成功被打入到软件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; error: failed to <span class="built_in">read</span>+write: sfk - skipping</span><br></pre></td></tr></table></figure><p>如果终端中出现多于1个错误（出现概率比较小），则很可能是因为wine或之前其他不恰当的操作导致ModelSim安装目录下的某些文件被损坏，此时只需重装ModelSim软件并再次执行上述打补丁命令即可。</p></li><li><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>使用文本编辑器打开【~/.bashrc】或【~/.zshrc】，并在文件末尾添加以下几行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Modelsim</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/modelsim/modeltech/linux:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LM_LICENSE_FILE=<span class="variable">$HOME</span>/Documents/License/modelsim/license.dat</span><br></pre></td></tr></table></figure><p><strong>备注：在锦大神的教程中，ModelSim可执行程序的环境变量设置的是64位目录（即【/opt/modelsim/modeltech/linux_x86_64 】），但是我设置成这个后，终端总是提示无法读取许可证文件，使用【lmutil lmdiag】命令也显示正常，最后我修改为上述的32位目录就好了，至于原因目前还不清楚。</strong></p></li><li><h4 id="修改网卡名称"><a href="#修改网卡名称" class="headerlink" title="修改网卡名称"></a>修改网卡名称</h4><p><strong>注意：这一步是破解ModelSim的关键，因为Ubuntu系统从16.04开始网卡名称的命名出现了较大的变化（如有线网卡从【eth0】变为了【enp2s0】），所以为了让ModelSim和下面将会讲到Quartus II软件能够正确读取系统的NIC ID，需要用户手动修改网卡名称，具体步骤如下：</strong></p><p>首先备份【/etc/default/grub】文件，然后以管理员权限打开它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo cp /etc/default/grub /etc/default/grub.bak</span><br><span class="line">$&gt; sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>在文件中找到【GRUB_CMDLINE_LINUX】配置项，并将其修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;net.ifnames=0 biosdevname=0&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后执行命令更新grub引导文件，并重启系统即可完成所有的破解工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">$&gt; sudo reboot</span><br></pre></td></tr></table></figure></li><li><h4 id="启动软件程序"><a href="#启动软件程序" class="headerlink" title="启动软件程序"></a>启动软件程序</h4><p>在终端中输入以下命令即可正常启动ModelSim。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vsim</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/modelsim/modelsim_9.png" alt="modelsim_9"></p></li></ul><h3 id="Quartus-II"><a href="#Quartus-II" class="headerlink" title="Quartus II"></a>Quartus II</h3><blockquote><p>Quartus II 是Altera公司的综合性CPLD/FPGA开发软件，原理图、VHDL、VerilogHDL以及AHDL（Altera Hardware 支持Description Language）等多种设计输入形式，内嵌自有的综合器以及仿真器，可以完成从设计输入到硬件配置的完整PLD设计流程。Quartus II可以在Windows、Linux以及Unix上使用，除了可以使用Tcl脚本完成设计流程外，提供了完善的用户图形界面设计方式。具有运行速度快，界面统一，功能集中，易学易用等特点。</p></blockquote><ul><li><h4 id="安装程序文件-1"><a href="#安装程序文件-1" class="headerlink" title="安装程序文件"></a>安装程序文件</h4><p>在终端中挂载Quartus的镜像安装文件，然后以管理员权限执行安装脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Downloads</span><br><span class="line">$&gt; sudo mkdir /media/quartus</span><br><span class="line">$&gt; sudo mount -o loop Quartus-13.0.1.232-linux.iso /media/quartus</span><br><span class="line">$&gt; sudo /media/quartus/setup.sh</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_1.png" alt="quartusii_1"></p><p>点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_2.png" alt="quartusii_2"></p><p>选择【I accept the agreement】选项，然后点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_3.png" alt="quartusii_3"></p><p>选择安装目录为【/opt/altera/13.0sp1】，并点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_4.png" alt="quartusii_4"></p><p>使用默认的选项即可，点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_5.png" alt="quartusii_5"></p><p>使用默认的选项即可，点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_6.png" alt="quartusii_6"></p><p>点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_7.png" alt="quartusii_7"></p><p>如下图所示，安装程序会自动在桌面生成64位软件的快捷方式，至此Quartus II的主程序文件就全部安装完毕了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_8.png" alt="quartusii_8"></p></li><li><h4 id="安装设备文件"><a href="#安装设备文件" class="headerlink" title="安装设备文件"></a>安装设备文件</h4><p>同理，在终端中挂载Quartus的镜像设备文件，然后以管理员权限执行安装脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Downloads</span><br><span class="line">$&gt; sudo mount -o loop Quartus-13.0.1.232-devices-1.iso /media/quartus</span><br><span class="line">$&gt; sudo /media/quartus/components/DeviceInstall-13.0.1.232.run</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_9.png" alt="quartusii_9"></p><p>点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_10.png" alt="quartusii_10"></p><p>选择安装目录为【/opt/altera/13.0sp1】，并点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_11.png" alt="quartusii_11"></p><p>选择自己开发所需的设备，然后点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_12.png" alt="quartusii_12"></p><p>点击【Next】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_13.png" alt="quartusii_13"></p><p>点击【Finish】按钮关闭安装程序。</p></li><li><h4 id="破解程序文件-1"><a href="#破解程序文件-1" class="headerlink" title="破解程序文件"></a>破解程序文件</h4><p>将压缩包内的破解补丁替换到软件安装目录下的两个同名文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Softwares/Crack_QII_13.0_SP1_Linux</span><br><span class="line">$&gt; sudo cp linux/libsys_cpt.so /opt/altera/13.0sp1/quartus/linux</span><br><span class="line">$&gt; sudo cp linux64/libsys_cpt.so /opt/altera/13.0sp1/quartus/linux64</span><br></pre></td></tr></table></figure><p>使用Wine执行Windows下的破解工具（忽略开始阶段需要选择破解补丁这一步），并将生成的【license.dat】文件保存到系统本地，最后将文件中的【XXXXXXXXXXXX】用自己电脑的有线网卡号替换即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Softwares/Crack_QII_13.0_SP1_Windows</span><br><span class="line">$&gt; sudo wine Quartus_13.0_SP1_x64破解器.exe</span><br></pre></td></tr></table></figure><p>双击桌面的Quartus II图标启动软件，此时软件会弹出许可证提醒窗口。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_14.png" alt="quartusii_14"></p><p>点击【OK】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_15.png" alt="quartusii_15"></p><p>选择之前修改过的【license.dat】文件，点击【Open】按钮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_16.png" alt="quartusii_16"></p><p>窗口出现以上内容，则表明软件破解成功。</p></li><li><h4 id="设置环境变量-1"><a href="#设置环境变量-1" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>使用文本编辑器打开【~/.bashrc】或【~/.zshrc】，并在文件末尾添加以下几行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Quartus II</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/altera/13.0sp1/quartus/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LM_LICENSE_FILE=<span class="variable">$HOME</span>/Documents/License/quartus/license.dat:<span class="variable">$LM_LICENSE_FILE</span></span><br></pre></td></tr></table></figure></li><li><h4 id="启动软件程序-1"><a href="#启动软件程序-1" class="headerlink" title="启动软件程序"></a>启动软件程序</h4><p>启动32位Quartus II。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; quartus</span><br></pre></td></tr></table></figure><p>启动64位Quartus II。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; quartus --64bit</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_cpu/1_software_install_config/quartusii/quartusii_17.png" alt="quartusii_17"></p><p><strong>备注：一般情况下，双击快捷方式图标就能正常启动Quartus II，可是我每次这样启动时，软件总是提示我要重新选择许可证文件，而使用上述从终端启动的方法就没有问题，至于原因目前还不清楚。</strong></p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><h4 id="USB-Blaster"><a href="#USB-Blaster" class="headerlink" title="USB Blaster"></a>USB Blaster</h4><p>首先将UBS Blaster下载器插到电脑上，然后在终端中输入【lsusb】，此时终端中返回的内容应该包含以下类似信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bus 001 Device 051: ID 09fb:6001 Altera Blaster</span><br></pre></td></tr></table></figure><p>然后切换到设备目录下并创建一个规则文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> /etc/udev/rules.d</span><br><span class="line">$&gt; sudo vim 80-usbblaster.rules</span><br></pre></td></tr></table></figure><p>在上述新建的规则文件中写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ATTRS&#123;idVendor&#125;==&quot;09fb&quot;, ATTRS&#123;idProduct&#125;==&quot;6001&quot;, MODE=&quot;666&quot;</span><br></pre></td></tr></table></figure><p>最后重新插线并在终端中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面命令中的【001】和【051】分别对应于上述返回信息中的【Bus 001 Device 051】</span></span><br><span class="line">$&gt; ls -l /dev/bus/usb/001/051</span><br></pre></td></tr></table></figure><p>如果系统返回的目录权限为【crw-rw-rw-】，则表明USB Blaster设置成功。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/ad131936a6c4">Quartus/Modelsim Linux搭建笔记v0.1</a></li><li><a href="http://bbs.eeworld.com.cn/thread-475336-1-1.html">64位ubuntu15.04安装quartus ii 15.0 - FPGA/CPLD - 电子工程世界-论坛</a></li><li><a href="https://blog.csdn.net/xforce_zuoxiang/article/details/24530329">ubuntu14.04 64bit 安装 &amp;&amp; 破解quartus13.0 记录</a></li><li><a href="https://www.cnblogs.com/tracyone/p/3604090.html">ubuntu 14.04 安装 Quartus II 13.1 过程</a></li><li><a href="https://blog.csdn.net/wenwenxiong/article/details/52937539">ubuntu16.04修改网卡名称enp2s0为eth0_运维_wenwenxiong的专栏-CSDN博客</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实在我动手开始安装和配置ModelSim和Quartus II软件之前，就曾在网上搜索过一些类似的教程，不过其中大部分讲的都是如何在Windows下实现软件的完美安装，而有关GNU/Linux的则寥寥无几，就算是有，其教程内容也都比较老旧，如果不经过修改是无法使用的，所以为了满足嵌入式方向的研究者或爱好者们能够在GNU/Linux系统下顺利地安装和使用ModelSim和Quartus II这两款软件，我把自己安装和配置软件的方法总结下来，希望大家喜欢。</p><p>最后借着这个《团队处理器系列》开篇的机会，我决定给自己的<strong>自制CPU项目</strong>设定几个需要达成的目标，一方面是想以此来鞭策自己，确保这个项目不会烂尾（毕竟像设计CPU这种涉及底层且难度较大的任务，没有Push可能坚持不下来），另一方面也算是实现自己的人生价值吧。目标具体如下：<strong>首先通过学习RISC-V的指令架构和编译语法，独自完成一个简单的RISC-V软核IP；其次是将学习和开发过程中所遇到的问题和经验都总结下来以供其他人参考使用；最后是想设计一套完全由中国人主导的开源RISC指令集，并努力让它能够像其前辈RISC-V一样得到全世界学术界和工业界的认可！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 团队处理器系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPU </tag>
            
            <tag> ModelSim </tag>
            
            <tag> Quartus II </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活随笔系列（0x02）：2019 仓木麻衣北京演唱会</title>
      <link href="/zh-cn/2019/07/21/life_note_2_2019_maikuraki_beijing_concert/"/>
      <url>/zh-cn/2019/07/21/life_note_2_2019_maikuraki_beijing_concert/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在《生活随笔系列（0x01）：我与EOP键盘钢琴》这篇文章里曾提到过自己今年4月份的时候因《渡月橋 ～君 想ふ～》这首歌开始重新喜欢上了仓木麻衣，当时自己几乎将音乐播放器上所有麻衣的歌曲都听了一遍，并且还在网上观看了很多她参加活动时的演唱视频，可以说是打心底里越来越喜欢这位平成年代曾红极一时的日本歌姬，不过也许是因为脑海中一直存在<strong>偶像距离普通人很遥远</strong>的固有见解，所以自己从来没有产生过要去现场看演唱会的奢望，只寄希望于能用EOP钢琴弹奏来表达自己对偶像的敬意之情。</p><p>后来4月底的一天，我在B站上又重温了一遍麻衣的TAT演唱会视频，竟无意中从视频的弹幕中得知麻衣7月19号要来中国开演唱会，当时我以为这是好几年前的事了，可是没想到自己在网上一搜发现演唱会的举办年份就是2019年，而且第一场的举办地还在北京！<span id="more"></span>当时直觉告诉我，如果这种天载难逢的绝佳机会如果不把握住的话，自己肯定会后悔一辈子的，于是当天晚上我就怀着激动的心情就在官方票务网站大麦上预定好了门票，不过可惜的是由于自己之前没用过新浪微博，错过了官方发售和仓木麻衣国际应援站团购的日期，所以我只买到了座位在第21排的门票，现在回过头来想想还是有些遗憾的。</p><h2 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h2><h3 id="剧场外景"><a href="#剧场外景" class="headerlink" title="剧场外景"></a>剧场外景</h3><p>麻衣北京演唱会那天正好是周五，为了避开下班高峰期且能及时领到限量纪念品，我中午请完假后就直奔北展剧场了。虽说自己从小就生活在北京，但这还是我第一次去北展剧场看演唱会，根据网上的介绍，北展剧场始建于1954年，起初是一个露天剧场，后来于1959年加盖顶棚才改建为目前的室内剧场，是<strong>首批中国20世纪建筑遗产</strong>之一，的确从下面的照片中可以看到，北展剧场顶部巨大的圆形穹顶以及建筑外部层次分明的棱角无疑会让接近它的人产生一种历史的沉重感，于是当时我就在心里想：<strong>能在如此充满古典主义风格的剧场中观看麻衣的演唱会，到底会是一种怎样的体验呢？</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/exterior/exterior_1.jpg" alt="北展剧场侧面全景图"></p><p>我去的时候北展剧场售票处的电子大屏一直在轮流播放近期的演出资讯，果不其然里面也有麻衣的门票海报和演出时间等相关信息，趁着屏幕还没有切换到下一条内容的功夫我赶快掏出手机抓拍了一张以作纪念。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/exterior/exterior_2.jpg" alt="剧场售票处播放的麻衣演出信息"></p><p>北展剧场周围除了莫斯科餐厅以及南边的展览馆后湖外，我觉得最吸引人眼球的是下图中的这款编号为5039的<strong>建设型蒸汽机车</strong>，说起建设型机车很多铁路迷肯定不会陌生，它是新中国成立后制造的第一台干线货运蒸汽机车，曾广泛应用于华北地区的货运铁路网，为中国近代工业化的发展发挥了重要作用。据我所知目前全中国现存的建设型机车还不到30台，所以能够在北展剧场偶遇如此稀有的古董级蒸汽机车，也算是参加麻衣北京演出会收获的另外一种“福利”吧。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/exterior/exterior_3.jpg" alt="剧场旁边的蒸汽机车和车厢模型"></p><h3 id="入场阶段"><a href="#入场阶段" class="headerlink" title="入场阶段"></a>入场阶段</h3><ul><li><h4 id="排队入场"><a href="#排队入场" class="headerlink" title="排队入场"></a>排队入场</h4><p>在经过一段时间的等待之后，演唱会组织方终于打开剧场大门开始检票，总的来说在排队入场这块儿（如下图所示），麻衣的粉丝们做得还是相当不错的，整个过程都在组织方的协调下有条不紊地进行着，不过这里有一个小插曲，由于官方会在现场统一发放可控的发光手环，所以像荧光棒之类带有发光属性的应援物品是不被允许带入剧场内的，可是不知道是安检机器没检查出来还是等待入场的歌迷太多导致工作人员没顾上，我背包里的<strong>国际应援站限量款应援棒</strong>竟然“幸运”地没有被发现，不然被收走后再要回来可就不容易喽。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/entrance/entrance_1.jpg" alt="剧场门口等待入场的麻衣粉丝们"></p></li><li><h4 id="购买物品"><a href="#购买物品" class="headerlink" title="购买物品"></a>购买物品</h4><p>在顺利经过安检进入剧场之后，我以为能够很快地买到官方推出的周边产品，可是麻衣粉丝们的热情又一次颠覆了我的想象，原本面积不大的售卖区域可以说是在一眨眼的功夫之内就被歌迷们团团围住，好在最后经过自己的不懈努力，终于买到了下图所示的周边产品，不过说实话第一个纪念T恤衫的价格虚高非常明显，而且质量也非常堪忧（当时我买的是L号，可是回家一试发现衣服实际尺码至少得有XXL，这个锅组织方<strong>路口文化</strong>必须背），但是作为麻衣的忠实粉丝，我觉得再贵的纪念品也要收入囊中，毕竟此次中国巡演的机会非常难得，如果错过不买的话估计自己得后悔一辈子。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/entrance/entrance_2.jpg" alt="演唱会官方周边纪念品的购买凭证"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/entrance/entrance_3.jpg" alt="等待购买和领取周边纪念品的粉丝"></p></li><li><h4 id="座位实拍"><a href="#座位实拍" class="headerlink" title="座位实拍"></a>座位实拍</h4><p>说心里话在来北展剧场看演唱会之前，我一直非常担心自己第21排的座位会离舞台非常远，因此在来现场之前我特意花了一些时间在网上选购了一个便携式望远镜，以便能够在现场“近距离”地欣赏麻衣姐的精彩表演，可是随着人群进入到剧场大厅之后，我欣喜地发现自己的座位其实距离舞台并不算太远，而且再加上长时间举着望远镜会非常累，所以最后就没用上，不过后来事实证明我的选择是非常明智的：<strong>演唱会开始后我连应援都忙过不来，哪有功夫再举着笨重的望远镜呢？</strong>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/entrance/entrance_4.jpg" alt="暖场阶段播放的《渡月橋》MV"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/entrance/entrance_5.jpg" alt="从座位上拍的应援手幅和门票"></p></li></ul><h3 id="安可阶段"><a href="#安可阶段" class="headerlink" title="安可阶段"></a>安可阶段</h3><p>随着麻衣唱完最后一首《薔薇色の人生》，演唱会也正式进入到安可阶段，在麻衣和乐队重新返场之前，全场几千名歌迷们（包括我在内）依旧像在每首歌曲演唱间隙所做的那样不断齐声高喊Mai-K为麻衣打call，虽然自己的嗓子已经嘶哑且佩戴有应援手环的手也挥舞得酸痛不已，但是沉浸在这种的氛围里实在是令人无法自拔。</p><p>终于在大家热情的呼唤之下，麻衣穿着北京场限定的黄色T恤衫又重回舞台开始演唱，第一首是麻衣粉丝们最期待的新歌《きみと恋のままで終われない いつも夢のままじゃいられない》，麻衣在日本的音番上唱过很多次这首歌，果然还是自己的演唱会发挥得最好；第二首是《Chance for you》，后面的中文大合唱环节让人非常感动，歌词也得很好而且麻衣的中文水平也相当不错；最后一首是永远不变的《Always》，那句不断反复的<strong>“Always give my love to you”</strong>可以说把演唱会的气氛推到了最高潮。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/encore/encore_1.jpg" alt="在舞台上致谢的麻衣团队"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/encore/encore_2.jpg" alt="麻衣写给歌迷们的感谢信"></p><h3 id="出待阶段"><a href="#出待阶段" class="headerlink" title="出待阶段"></a>出待阶段</h3><p>演唱会结束之后，在国际应援站工作人员的协调和安排之下，我和其他麻衣粉丝来到剧场侧门参加出待活动，说实话这是我第一次能够有机会近距离看到心中的女神，内心真的是既兴奋又紧张，当然麻衣也没有让我们这些苦苦等了快40多分钟的铁粉们失望，一身黑色休闲装外加丸子头亮相简直不要太可爱，更令人感动的是麻衣并没有表现出丝毫的倦意，依旧满含笑容地向大家挥手致谢并热情地与大家合影留念，不过非常可惜的是由于前排的粉丝太多且受限于安保人员的阻拦，她还没走到我这边就先行乘车离开了，算是一个不小的遗憾吧。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/wait/wait.jpg" alt="麻衣跟粉丝们的大合影"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我人生第一次看演唱会，现场气氛好到我真的不知道该用什么语言来形容，只记得当时自己一直随着每首歌曲的节奏不停地挥舞着手腕上的应援手环，并且在每首歌结束的时候和其他歌迷们一起高喊Mai.K（特别是在麻衣第二次下台换装时，我和其他歌迷连续喊Mai.K足足有七八分钟之久），而麻衣可能也是感受到了来自中国广大歌迷们的巨大热情，现场的发挥很明显要比之前参加日本国内音乐祭时要好很多，无论是唱歌的气场还是与粉丝们的互动都做得非常棒，其中除了我最喜欢的《Time after time ～花舞う街で～》以及入坑神曲《渡月橋 ～君 想ふ～》之外，给我留下印象最深的是《PUZZLE》这首快歌，麻衣激情的演唱再加上全程踩点式的伴舞，可以说让当时现场的气氛简直嗨到爆！</p><p>当然，除了感谢仓木麻衣和其他团队成员为本次中国巡演所做的努力之外，我还要特别感谢<strong>仓木麻衣国际应援站</strong>和<strong>仓木麻衣日常</strong>这两大歌迷组织提供的精美纪念品以及在台前幕后为演唱会成功举办所付出的辛勤汗水，我想如果没有他们的话，这次弥足珍贵的演唱会很有可能并不会像现在这般令人刻骨铭心。</p><p>最后，作为歌迷的我们其实很清楚出道二十周年对于麻衣来说意味着什么，尽管她现在的人气远不如当年刚出道那会儿，期间也曾因为迷茫陷入生涯的低谷，但是就像她在《Chance for you》这首歌里写到的那样：<strong>无悔地生活，创造在这里诞生的意义</strong>，麻衣正在用不懈的努力证明自己作为歌手所存在的价值，没错她做到了，她所演唱的《名侦探柯南》主题曲系列已经成为很多90后成长之路上不可磨灭的记忆之一，此外，她也用积极向上的正能量感染了很多人，所以无论麻衣在将来会不会考虑隐退，还会不会再次来中国开演唱会，我都会永远支持Mai.K的！<strong>Let’s GOAL！～薔薇色の人生～！</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/4_mk_beijing_2019/summary/summary.jpg" alt="领到的演唱会纪念品"></p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演唱会 </tag>
            
            <tag> Mai.Kuraki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活随笔系列（0x01）：我与EOP键盘钢琴</title>
      <link href="/zh-cn/2019/07/15/life_note_1_me_eop_keyboard_piano/"/>
      <url>/zh-cn/2019/07/15/life_note_1_me_eop_keyboard_piano/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从大学时代开始，我就是很多人眼中的技术大神，除了完成课内的作业之外，我基本上把时间都投入到了机器人或个人项目的开发上，我记得那会儿自己写代码的时候经常会听日韩风格的轻音乐，但是脑子里却从来没有产生过想要自学乐器并进行演奏的想法，也许是因为童年时期音乐老师教的五线谱给自己心里留下的阴影比较重（开个玩笑），所以导致我一直认为学习乐器是一个非常困难的过程。虽然我很羡慕那些在艺术节的舞台上轻松驾驭各种乐器的同学，但是如天书般的乐理知识和不协调的双手还是让我意识到了理想和现实之间的巨大差距，直到后来自己在QQ空间看到别人分享的一个视频之后（因为油管视频不翻墙无法显示，所以就暂时引用B站上其他UP主搬运的），才让我对学习乐器的想法发生了质的转变。</p><span id="more"></span><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=3425211&bvid=BV1Bs41197b9&cid=5431884&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><p>当时看完这个视频之后，我内心的真实想法是：<strong>原来这个世界上还真的存在知音啊！</strong>两位小哥互不相识，但却能在钢琴上联手完成如此震撼人心的即兴弹奏，从头到尾他们弹奏的每一个音符都配合得几乎天衣无缝，而且最关键的是他们很享受指尖在琴键上不断跳跃的这个过程，这让我对音乐演奏有了与之前不同的理解：<strong>享受音乐本身才是学习乐器演奏的灵魂所在</strong>。也就是从那个时候开始，我喜欢上了街头钢琴这种独特的艺术表现方式，同时也下定决心希望能用自己的双手，弹奏出令人感动的音乐！（下图是自己从油管上下载的一些街头钢琴视频）</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/life_essays/1_eop_keyboard_piano/street_piano.png" alt="street_piano"></p><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><h3 id="初识EOP"><a href="#初识EOP" class="headerlink" title="初识EOP"></a>初识EOP</h3><p>既然自己前面已经下定决心要学习钢琴弹奏，那就必须尽全力将其付诸实现，而实现这个目标的第一步就是要有一个钢琴。虽然我对钢琴有什么品牌并不是特别了解，但是直觉告诉我像钢琴这种机械结构比较复杂的乐器，价格肯定不会太便宜，果不其然上网一查发现，最普通的国产立式钢琴要好几千，而最便宜的MIDI键盘也要接近一千五左右才能拿下来，这对于当时还处于大学阶段的我来说的确是一笔不小的开销。就在自己进退两难之时，我回忆起了小时候在网上玩的一款打字小游戏，那个游戏的内容是通过输入正确的英文单词来控制人物的移动，打得越快，人物移动得也越快，同时得分也越高，于是当时我就在想：<strong>有没有类似的可以通过键盘来弹奏歌曲的软件呢？</strong>抱着试一试的想法，我在百度上一搜，<a href="http://www.everyonepiano.cn/home.html">Everyone Piano</a>这个词开始映入我的眼帘。</p><p>作为一个患有选择强迫症的人来说（有些言重），在选择使用某个软件时，我通常会搜索出几个功能相类似的软件，然后逐一详细地比较它们功能之间的差异，并最终根据“性价比”选择最适合我的那一款，而这一次我却丝毫没有犹豫，直接选择EOP作为我学习键盘钢琴的软件，原因其实很简单，因为下图中的那些弹奏视频又一次震撼了我的内心：<strong>原来电脑键盘真的可以弹奏歌曲，而且还可以弹得这么厉害！</strong>特别是那个排名第一的克罗地亚狂想曲，手速简直逆天，不论和弦有多复杂，这个北理工大神都能跟得上，而最牛的是他用的还是最普通的双飞燕键盘，其实力可见一斑。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/life_essays/1_eop_keyboard_piano/eop_videos.png" alt="eop_videos"></p><p>除了各路大神的弹奏视频之外，还有一个让我选择EOP的原因是：<strong>这款软件本身做得非常出色</strong>。作为计科专业的准毕业生，我曾用Qt和WinForm框架编写过图形界面程序，但是总感觉缺少一些产品的元素在里面，而EOP软件则让我眼前一亮，不仅本身界面设计得很精致，软件自带的功能也很强大（如随意设置键盘的音高、八度、分组等），特别是<strong>简谱跟我弹</strong>这个插件，在手动加载EOPN格式的曲谱文件并点击开始按钮后，屏幕上会出现一个红色的光标跟随曲谱同步进行移动，我觉得如果让我实现这个功能的话，我肯定写不出来。总之不管怎样，在Windows 7虚拟机里安装好最新版本的软件后，自己也算正式踏入到了EOP的世界里，希望接下来自己能够像网站上的大神们一样，完美地弹奏自己喜欢的音乐。</p><h3 id="自学EOP"><a href="#自学EOP" class="headerlink" title="自学EOP"></a>自学EOP</h3><ul><li><h4 id="盲学阶段"><a href="#盲学阶段" class="headerlink" title="盲学阶段"></a>盲学阶段</h4><p>我学的第一首歌是<strong>简谱跟我弹</strong>中默认带的那首《卡农》，相信很多人对它都不会陌生，因为这首歌在官网被弹奏的次数已经上双了，可以说是入门必弹的经典曲目，但是个人感觉这首曲子对于刚开始接触EOP的初学者来说还是比较难学的，难点我认为主要有两个：一是刚开始不太容易掌握曲子的节奏，二是大部分初学者的双手协调性都比较差，很难跟随歌曲做到左右手的相互配合。</p><p>我记得自己当初学的时候，方法非常简单粗暴，就是使用EOP软件打开<strong>简谱跟我弹</strong>插件后开始硬练，一开始先是花了几周的时间学习右手部分，紧接着又花了几周的时间掌握了左手部分，但是当我开始左右手一起弹的时候，感觉自己就跟没学过一样，不是右手弹错了，就是左手没跟上，两只手配合得非常僵硬，不过好在自己没有放弃而是选择继续坚持下去，慢慢地我发现双手不适的感觉消失了，这就好比投篮练多了，肌肉自然会产生记忆一样，就这样伴随着不断积累的成就感，我大概花了三个月左右的时间，终于将《卡农》这首歌学会并能够完整地弹奏下来！虽然过程很曲折，但是结果还是很好的。</p><p>后来我又自学了《你的心河》、《天空之城》等经典曲目，但因为前期没有看过任何官网提供的教学视频（现在有些后悔），不懂指法、和弦、音源这些东西，所以导致学得很慢，再加上本科毕业之后就开始参加工作，业余时间变得越来越少，虽然每周末我都会坚持弹一段时间的EOP，但可能是因为工作和生活压力的缘故，往往会有一种力不从心的感觉，就这样一晃接近两年的时光过去了。</p></li><li><h4 id="摸索阶段"><a href="#摸索阶段" class="headerlink" title="摸索阶段"></a>摸索阶段</h4><p>人们常说：<strong>时间是检验一个人是否能够取得成功的试金石</strong>，尽管这两年里自己还是经常会上EOP官网去看别人弹奏的视频，但是当初那种想要追赶EOP前辈的激情却随着时间的流逝而逐渐被消磨殆尽，原本我以为自己也会被现实打败，但幸运的是我这回遇上了<strong>“名侦探柯南”</strong>。</p><p>今年四月份的一个周末，身为动漫迷的我在家又重温了一遍《名侦探柯南：唐红的恋歌》这部剧场版，本想着是当做加班之后放松心情看的，而令人没想到的是，自己却被结尾处仓木麻衣献唱的那首《渡月橋 ～君 想ふ～》所深深吸引。歌曲采用京都传统的和乐器进行演奏，无论是编曲还是歌词都近乎完美地呈现了日式和风应有的优美意境，当时让我越听越入迷，同时也开始喜欢上了仓木麻衣这位女歌手（感觉有点跑题了）。反正经过这次事情之后，我又重新找到了学习EOP的动力，大目标是<strong>至少要学会麻衣献唱的十首柯南主题曲</strong>，而当前的小目标则是完美录制《渡月橋 ～君 想ふ～》这首歌曲的弹奏视频，以向自己的偶像致敬，当然最后能不能实现还要看自己接下来的执行力了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/life_essays/1_eop_keyboard_piano/movie_clip.png" alt="movie_clip"></p><p>因为有过之前学习《卡农》成功但又兼具痛苦的经历，于是这次我吸取了教训，改变了原先直接正面硬刚的方法，而是采取了先将基本知识夯实再有针对性地进行练习的迂回战术。在这个过程中，我做的第一件事就是把EOP官网上所有免费的教学视频都至少看了一遍，通过这些视频我明白了简谱中那些不知名符号所代表的含义（果然之前是盲学的）、节拍的概念以及如何计算、如何安装Truepianos音源来让音效变得更具感染力等内容；此外为了能够掌握标准的钢琴指法，我又将官网上最新发布的十几个弹奏视频看了好几遍，并通过总结找到了和弦弹奏的规律；最后我将<strong>纤纤玉爪</strong>和<strong>二月的小孩</strong>已发布在官网上的《渡月橋 ～君 想ふ～》视频看了至少不下十遍，并就一些问题进行了询问（如下图所示），只可惜没有得到作者们的回复。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/life_essays/1_eop_keyboard_piano/eop_comments.png" alt="eop_comments"></p><p>在使用新方法的基础上，经过三周左右的练习之后，我已经能够很熟练地弹奏《渡月橋 ～君 想ふ～》这首歌曲了，当时自己信心满满，还特意从某宝上购买了高清摄像头和新的键盘，打算趁着状态好，一鼓作气将这首歌拿下，可是实际情况却远没有我想象中的那么简单，为什么这么说呢？因为自己临场的心里素质不够硬，平常练习的时候一点错都不会出现，可是一到开始录制视频了，心里就开始莫名其妙地紧张起来，而且越往后弹越紧张，很明显这会影响弹奏时气息的稳定性以及手指的灵活度，从而导致各种翻车情况的发生。</p><p>我记得自己当时录了两个晚上也没录出一个能听的，估计重录的次数都得有上百次了，心里的挫败感非常强，不过好在经过几天的努力，自己最终还是录出来了一个没有错误的弹奏视频，当时录完之后我的心情可以毫不夸张地讲，那就跟我大二时独自一人完成LFS编译并可以正常启动系统时一样激动万分！当然在高兴之余，我也更加坚信下面这句话：<strong>只要决心足够坚定，无论采取何种方法，都必定会取得成功！</strong></p><p>最后这部分是关于视频剪辑的，当初我在官网上观看其他网友弹奏的视频时就注意到很多视频都是经过后期处理的，当时自己以为这些都是每个网友自己做的，但是后来经过深入了解之后才知道，原来只要你将录好的视频发给EOP官方，那边的小编就会帮你完成视频剪辑的工作。虽然这样省时省力，但是却导致官网上的视频看起来都比较类似，没有什么新意可言，我相信这肯定不是我想要的，可是话又说回来：<strong>我又该如何去做才能让自己的视频变得与众不同呢？</strong>就在自己一筹莫展之时，<strong>腾飞kelly</strong>大神的《secret base -君がくれたもの》视频（如下所示）让我如梦方醒，没错，这就是我想要的：<strong>一种包含剧情、弹奏和字幕等多种元素的剪辑风格</strong>，当时看完之后后内心非常受触动，看来好的后期确实能够让人产生更多心灵上的共鸣。</p><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=53434335&bvid=BV1v4411L7YP&cid=93485045&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><p>就这样，为了实现自己想要的视频剪辑效果，我在很短的时间内自学了Pr和字幕插件的使用方法，并参照网上的教程开始努力尝试地去剪辑自己的第一个视频，因为自己做事总是追求完美，所以剪辑过程中的每一步我都要求自己做到精益求精，比如歌词翻译这部分，我会事先在网上找到几个比较流行的翻译版本，然后再综合每个版本翻译中的优点以及自己对于歌词意境的理解而得到最终的译文，虽然这样需要耗费大量的时间，但是我可以很自豪地说我的歌词翻译版本是全网唯一的，而且质量也是比较高的。</p><p>再比如视频剪辑这块，我首先会现根据歌词的内容对视频素材进行合理地划分，然后依据素材的剧情线和时间线，将之前粗划分的内容再进一步分割成更短的视频，并对其边界处进行微调，最后只要将剪辑后的视频按照顺序进行排列并加上相应的转场特效，就能使剧情、弹奏和歌词三者在剧情与时间线上保持完美的同步，从而得到最终的剪辑作品。虽然这个过程不是很复杂，但是实际操作起来却并不轻松，有的时候剪一个片段可能就要花费一个小时左右的时间，所以剪辑不仅考验的是你对素材与视频之间关系的把握，更是对你耐力的一个巨大挑战。总之，通过剪辑第一个视频，我积累了很多宝贵的经验并形成了自己的一套剪辑标准，这为接下来的后期工作铺平了道路。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/life_essays/1_eop_keyboard_piano/eop_clip.png" alt="eop_clip"></p><p>以下就是我的第一个EOP弹奏视频《渡月橋 ～君 想ふ～》，欢迎三连！！！</p><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=56925900&bvid=BV1cx411d7P3&cid=99421400&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p></li><li><h4 id="入门阶段"><a href="#入门阶段" class="headerlink" title="入门阶段"></a>入门阶段</h4><p>因为有了之前打下的基础，所以我决定开始学习《Time after time ～花舞う街で～》这首新歌，很多柯南迷都知道，TAT出自《名侦探柯南：迷宫的十字路口》这部经典的剧场版，歌词中描绘了京都落樱纷飞的美丽场景，与《渡月橋 ～君 想ふ～》中的古都秋色遥相呼应，是目前麻衣的23首柯南主题曲中我认为最好听的一首，但由于曲子本身节奏较快，再加上左手和弦部分存在很多十六分音符，这对于刚入门的我来说，掌握起来难度非常大，还好凭借劳动人民艰苦奋斗的精神，我最终花了两个多月的时间并经过上百次的尝试把这首歌给攻克下来了，虽然弹奏中的某些小节依然存在节奏偏快的情况，但是自己确实是用心弹的，而且通过这首歌，我也掌握了如何弹奏十六分音符以及设置EOP键盘分组等新知识，总的来说收获还是非常大的。下面是经过剪辑后的弹奏视频，欢迎观看！</p><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>PS：《渡月橋》和《花舞街》这两首歌是我当时有意要赶在麻衣出道20周年北京演唱会开始前学会的，目的主要是想向自己的偶像致敬，而麻衣现场也非常给力，演唱会上这两首歌被演绎得近乎完美，非常好听！总之，希望她能在歌姬的道路上继续走下去，为大家演唱更多好听的歌曲，Let’s GOAL！～薔薇色の人生～！</p></div><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=59608264&bvid=BV1Xt411g73k&cid=103838635&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><p>有了之前两首歌曲的弹奏经验，第三首歌曲的弹奏自然水到渠成，这次我选的是《きみと恋のままで終われない いつも夢のままじゃいられない》这首歌，它作为《名侦探柯南：红色的修学旅行》的ED，曲子节奏感很强，歌词也编写得非常好（这里不得不佩服麻衣的作词能力），不过相比于歌曲本身，广大的柯南粉丝特别是新兰党应该对这个特别篇的剧情更感兴趣，毕竟新兰横跨二十多年的表白时刻终于到来了！为了能最大程度地还原歌曲本身所表达出的情感，这次我在原有弹奏与剪辑的基础上，首次引入了歌手原唱和专业音源，从后期实际的剪辑效果来看，视听体验应该比之前两首歌的要更好一些。下面是弹奏视频，希望大家喜欢！</p><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=74282426&bvid=BV1hE411t7zR&cid=127209489&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><p>在完成了上面这首《恋人以上》之后，柯南x麻衣京都三部曲我就全部凑齐了，现在回过头来看自己的这段经历，我依然会感到非常自豪，因为我完全是靠自学的方式学会了EOP键盘弹奏，并打造出了只属于我自己的视频风格，不过美中不足的是自己的指法用起来还不够熟练，不能随心所欲地驾驭每一个音符，为此我决定从EOP官网上买套《黄金版教程》打算系统地学习一下，我觉得学完之后，自己的弹奏能力应该还能更上一层楼。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果我不写这篇随笔，估计很难有人会相信一个连基本乐理知识都不懂的工程师，在经过一段时间的学习之后，竟然可以通过电脑键盘弹奏出动人心弦的音乐，其实要获得这个成就并不是很难，因为我从始至终都坚信一点：<strong>只要功夫深，铁杵磨成针</strong>，只要你的决心足够坚定，任何困难都无法阻碍你前进的脚步，虽然现阶段的我还无法像很多EOP上面的大神一样能够熟练地运用指法进行弹奏，但是至少我有了一个比较不错的开始，而且也得到了EOP老师和其他很多学员的认可和鼓励，希望接下来自己可以按照之前设定的长期目标，继续在EOP弹奏的道路上不断向前！</p><p>最后我想说的是，我是那种性格上比较偏佛系的人，不会为了追求录制视频的数量而降低弹奏的质量或者转而选择那些难度较低的歌曲，因为在我看来，<strong>只有弹奏自己喜欢的歌曲，才能最大程度地还原歌曲本身的情感，从而才能弹奏出更加打动人心的音乐</strong>，试想如果每个弹奏视频都只是按键单纯触发的产物，而缺少了最该蕴藏于其中的情感，那再多的数量又有什么意义呢？</p><p>最后的最后，我还是要特别感谢EOP团队，让我能够在编写代码之余享受键盘弹奏带来的轻松与快乐，当然他们也让我明白这个世界上总有一些人会为了自己的梦想而选择坚持，希望未来EOP能够发展得越来越好，可以让更多的音乐爱好者从中获益！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> 钢琴 </tag>
            
            <tag> EOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x07）：2018 世界机器人大会</title>
      <link href="/zh-cn/2018/08/18/tech_note_7_2018_world_robot_conf/"/>
      <url>/zh-cn/2018/08/18/tech_note_7_2018_world_robot_conf/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着暑期的来临，我一直翘首以盼的世界机器人大会也将如期举行，因为有了去年的惨痛教训，所以这次我提前好几个月就在官网上预约好了博览会门票，就当我在为自己的英明决策而感到心满意足之时，一个天大的好消息竟然幸运地砸向了我——<strong>可以通过工作单位免费申请论坛票！</strong>，要知道一个单日论坛票就要2000元钱，如果要参加两天或三天的话，票价就更贵了，这对于刚参加工作的我来说是不可奢望的，而且我觉得主办方应该也不会这么做，毕竟像我们这样小单位都能申请的话，那主办方不得亏死？不过最后我还是抱着试一试的态度在网上申请了论坛票，当时我心里想的是如果能申请下来就赚了，不行的话也没什么损失。</p><p>也许是上天比较眷顾我这个喜欢机器人的小伙子吧，在世界机器人大会举行的前一周，我收到了主办方发来的一条短信，告知我已经成功申请到论坛票并可通过短信中的二维码链接到现场取VIP证，看来<strong>无心插柳柳成荫</strong>这句话终于在我身上应验了，咱啥话也不说了，就等着接下来的梦幻之旅吧！</p><span id="more"></span><h2 id="大会"><a href="#大会" class="headerlink" title="大会"></a>大会</h2><h3 id="外景"><a href="#外景" class="headerlink" title="外景"></a>外景</h3><p>今年世界机器人大会的举办地依然是在北京的亦创国际会展中心，鉴于去年庞大的观众数量，这次我很早就赶到了会场附近去兑换证件，说心里话在兑换之前，我内心还是有些紧张的，毕竟关于自己之前在网上申请论坛票并且收到主办方确认短信这件事，我依然持有半信半疑的态度，可是当志愿者在扫完二维码之后真的将论坛VIP证和相关材料交到我手中的时候，原先的一切顾虑都烟消云散，总之非常期待接下来各种学界大佬的学术演讲。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exterior/exterior_1.jpg" alt="exterior_1"></p><p>如下图所示，主办方今年专门在会场D展区旁边开辟了一个很大的户外空间用于展示大型地面无人系统，我简单看了一下外边滚动播放的显示屏，里面介绍了像救援机器人、多轮无人车、多足机器人等那些平常只会出现在高校实验室或研究所里的机器人，整体技术水平都非常高，看来这次主办方在吸引更多的专业观众前来观看以及向国内外媒体展示中国最新自主研制的高级机器人方面上可没少下功夫。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exterior/exterior_2.jpg" alt="exterior_2"></p><h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><ul><li><h4 id="演讲1"><a href="#演讲1" class="headerlink" title="演讲1"></a>演讲1</h4><p>第一位演讲者是来自意大利比萨圣安娜高等学校生物机器人研究所的Paolo Dario教授，他本次演讲的内容主要关于机器人为什么能够成为继当前互联网之后引领下一次科技革命的主力军，以及它将如何改变我们的未来生活等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_a/speech_a_1.jpg" alt="speech_a_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_a/speech_a_2.jpg" alt="speech_a_2"></p></li><li><h4 id="演讲2"><a href="#演讲2" class="headerlink" title="演讲2"></a>演讲2</h4><p>第二位演讲者是来自天津大学的王树新教授，他的研究方向是医疗手术机器人这块儿，通过现场的演讲可以得知王教授的科研团队已经攻克了一系列涉及医疗机器人末端力度控制、操作精确性以及移动平滑性等技术难点，感觉在国内圈子里应该属于顶尖水平。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_b/speech_b_1.jpg" alt="speech_b_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_b/speech_b_2.jpg" alt="speech_b_2"></p></li><li><h4 id="演讲3"><a href="#演讲3" class="headerlink" title="演讲3"></a>演讲3</h4><p>第三位演讲者是来自哈尔滨工业大学的赵杰教授，他本次演讲的内容并不涉及学术研究方面，而是比较有针对性地对国内机器人在科研、生产与应用方面所遇到的一些问题进行了深刻的剖析，比如核心零部件的突破将推动机器人成本的降低、技工贸和贸工技对机器人产业的影响、价格战对机器人产业发展的消极影响等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_c/speech_c_1.jpg" alt="speech_c_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_c/speech_c_2.jpg" alt="speech_c_2"></p></li><li><h4 id="演讲4"><a href="#演讲4" class="headerlink" title="演讲4"></a>演讲4</h4><p>接下来的这位演讲者是我之前在申请论坛票的时候就非常关注的（因为著名的DJI公司就来源于该学者所在的实验室），没错他就是大名鼎鼎的香港科技大学机器人研究院院长王煜，这次他演讲的话题为时下最流行的软体机器人，其中主要涉及有生物启发与使用技术、弹性骨骼系统、连续介质力学的超弹性理论等非常高深的内容。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_d/speech_d_1.jpg" alt="speech_d_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_d/speech_d_2.jpg" alt="speech_d_2"></p></li><li><h4 id="演讲5"><a href="#演讲5" class="headerlink" title="演讲5"></a>演讲5</h4><p>最后，美国麻省理工学院机械工程系副教授Alberto Rodriguez作了题为《我们离自动灵巧机器人还有多远》的主题演讲，其中涉及的主要内容为：机械臂Manipulation的定义与技术发展、物体的抓取和处理等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_e/speech_e_1.jpg" alt="speech_e_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/forum/speech_e/speech_e_2.jpg" alt="speech_e_2"></p></li></ul><h3 id="展览"><a href="#展览" class="headerlink" title="展览"></a>展览</h3><ul><li><h4 id="展示机器人"><a href="#展示机器人" class="headerlink" title="展示机器人"></a>展示机器人</h4><p><strong>DeepRobotics</strong><br>下图中的机器人是本次世界机器人大会我最期待的机器人之一，没错它就是云深处科技公司开发的四足仿生机器人——绝影，随着近几年波士顿动力持续在足式机器人领域发力，国内很多高校和科研院所也开始自主研发四足机器人，其中作为新生代力量的两大代表之一（另一个为下面要介绍的宇树科技Unitree），来源于浙大的云深处科技在经过前期实验室的技术积累后，成功地研制并生产出了具备出色运动能力的绝影机器人，从现场演示来看，绝影拥有精确的地形感知和优异的踩空后平衡快速恢复能力，这使得它在走过工作人员放置在地上的塑料垫时依然可以保持自身平衡，稳定性和灵活性之强令人咋舌。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/show_robot/deeprobotics/deeprobotics.jpg" alt="deeprobotics"></p><p><strong>Unitree</strong><br>云深处科技对面便是宇树科技的开放式展区，虽然面积远没有内场那些机器人公司大，但是其在国内机器人圈子里的知名度却是非常高的，这主要得益于其创始人王兴兴同学曾经在硕士期间独自完成了XDog四足机器人的设计和开发工作。我记得当时知乎上发布的有关XDog的测试视频所带给我的震惊程度丝毫不亚于波士顿动力的那些逆天宣传片，因为对于我来说一位中国研究生能够在中国这样的高等教育体制下独自做出如此高级复杂的机器人，而且性能在某些方面还不输给国外那些顶尖机器人实验室所做的，毫不夸张地说，这绝对算得上是国内机器人科研界的奇迹了！</p><p>好了言归正传，据我现场所了解的情况来看，宇树科技最新推出的莱卡狗（如下图所示）配备有全新研发的高扭矩电机系统、电机驱动模块以及主控制单元模块，这使得机器人的动力性能在大幅度提升的同时，其运动稳定性依然可以保持在非常高的水平，可以实现诸如拉动重物、被踹不倒、攀爬斜坡、乱石行走等案例，目测在国内外同等条件下均属一流水平。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/show_robot/unitree/unitree.jpg" alt="unitree"></p></li><li><h4 id="工业机器人"><a href="#工业机器人" class="headerlink" title="工业机器人"></a>工业机器人</h4><p><strong>FRANKA</strong><br>Franka Emika公司来自于工业自动化强国之一的德国，是最近几年国际上最具发展潜力的协作机器人公司之一，他们推出的七自由度机械臂（如下图所示）在兼具高精度、高灵活性的同时，亦提供有非常友好的人机交互操作体验，使得企业用户或研究人员无需专业知识即可快速地掌握其使用方法并轻松完成各种自动化任务的部署。当然除了以上两点之外，Franka机械臂还有一个最大的优势就是它集成有ROS接口，可以很方便地使用ROS MoveIt!框架进行二次开发，这对其软件生态环境的发展无疑有相当大的好处（我之前在重新学习MoveIt!时就曾研究过Franka机械臂，相关代码可以在<a href="https://github.com/myyerrol/learning_moveit">这里</a>找到）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/franka/franka.jpg" alt="franka"></p><p><strong>SMC</strong><br>SMC公司我原先一直以为是中国人创办的，因为他们的办公地点就在北京经济技术开发区，离世界机器人大会会场非常近，可是后来经朋友的介绍才得知这是一家总部位于日本东京都，拥有气动元件世界领先制造技术的跨国公司，其产品以品种齐全、可靠性高、经济耐用、能满足众多领域不同用户的需求而闻名于世。好了言归正传，在本次大会上，SMC公司主要展示了几套集成有压缩空气净化、气动辅助、方向控制和执行器等元件的工业自动化解决方案（如下图所示），虽然我不是很看得懂，但是感觉其技术水平应该是非常高的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/smc/smc_1.jpg" alt="smc_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/smc/smc_2.jpg" alt="smc_2"></p><p><strong>SIASUN</strong><br>在本次大会上，新松展示了炫舞机器人、协作机器人、蛇形臂机器人和服务机器人等创新产品，其中最受观众们喜爱的就是下图中的这款曾艳亮相于平昌冬奥会“北京八分钟”演出的炫舞机器人，根据官方的介绍，炫舞机器人在户外复杂环境下的精确导航、人机协同运动、核心系统及零部件国产化等技术层面上均实现了巨大的突破，这无疑表明新松在中高端机器人自主研发方面的综合实力已经达到国际一流水平。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/siasun/siasun_1.jpg" alt="siasun_1"></p><p>除了上面的炫舞机器人之外，新松还带来了最新的基于SCR5协作机器人+AR技术所演绎的人机协作生产新模式——PCB板搬运。据官方的介绍，SCR5协作机器人整合了视觉相机、激光传感器和气动抓取系统，可以通过传感器来识别托盘的高度，并将其数据转化为连续的运动轨迹，从而引导机器人完成PCB板的自主抓取和放置等操作任务。此外，新松SCR5协作机器人还搭载有AR技术，能够实时显示机器人及生产状态信息，在大大提高了其人机交互性、协作性的同时，也极大地促进了工作效率的提升。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/siasun/siasun_2.jpg" alt="siasun_2"></p><p><strong>Other</strong><br>其他工业机器人公司展示的产品都比较类似，基本上都是各种类型的机械臂，没有什么太多的新意，这里就不再详细进行介绍了，下面放几张图以供大家参考。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/other/hans.jpg" alt="hans"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/other/hs.jpg" alt="hs"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/other/hy_1.jpg" alt="hy_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/industrial_robot/other/hy_2.jpg" alt="hy_2"></p></li><li><h4 id="服务机器人"><a href="#服务机器人" class="headerlink" title="服务机器人"></a>服务机器人</h4><p><strong>UBTECH</strong><br>作为国内数一数二的服务机器人领导厂商，优必选今年不仅展示了其最新研制的Alpha系列仿人机器人悟空，还将自己的业务范围扩展到了AI教育与安防巡检等新兴领域，代表产品分别为下图中的Jimu（请忽视两个靠在包装盒上的Alpha机器人）和ATRIS机器人，其中Jimu机器人是最受现场家长和孩子们喜爱的，因为无论是机器人本身的工业设计，还是通俗易懂的可视化编程界面，优必选都做得非常出色，而且再加上机器人本身又包含有格斗、足球、篮球、变形和工程等多种元素，所以其受到青少年朋友们的追捧也就不足为奇了。</p><p>而ATRIS智能巡检机器人则可以说是刷新了我对优必选公司的认识，毕竟优必选最早是靠小型仿人双足机器人起家的，所以头一次看到履带车这种大块头还真让人有些不适应。根据官方的介绍，ATRIS拥有U-SLAM自主导航、主动人脸识别、可见光+热成像监控等先进技术，可以多场景全方位地守护和保障公共安全，市场应用潜力非常大。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/ubtech/ubtech_1.jpg" alt="ubtech_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/ubtech/ubtech_2.jpg" alt="ubtech_2"></p><p><strong>PADBOT</strong><br>派宝机器人在本次世界机器人大会上展示了其自主研发的多款智能服务机器人，其中比较典型的是下图中的PadBot X2商用服务机器人，它具有两个高清分辨率的电子显示屏，可以针对不同的垂直行业客户显示不同的内容，此外其还集成有目前应用最为广泛的室内自主导航、人体感应唤醒、主动人脸和语音识别等相关技术，综合水平在国内服务机器人圈子里应该算是比较强的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/padbot/padbot.jpg" alt="padbot"></p><p><strong>ZRFN</strong><br>在本次世界机器人大会上，中瑞福宁作为近几年国内服务机器人领域里异军突起的一股新兴力量，展出了旗下的很多明星产品，其中最令我感到震惊的是下图中的P-Care高级服务机器人，根据官方的介绍，P-Care是中瑞福宁结合欧洲最先进的机器人研发技术与中国优良的生产能力、全力投入自主研发的一款综合服务型机器人，通过综合运用人工智能技术（包括SLAM、图像处理、深度学习、人脸识别、物体识别、环境感知、语义识别、心智学习、语音识别等），可在非接触状态下定时采集传感器信息，诊断人体状况，并可以与人进行语义上的智能交互。</p><p>我相信随着中国人口老龄化程度的不断加深，很多家庭必然需要花费更多的时间来照顾老年人的生活，而P-Care机器人的问世则可以大大减轻子女和护工在老年人生活料理和情绪安抚方面的工作压力，同时也能够在某种程度上提升老年人的生活质量，让他们生活得更加幸福和快乐。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/zrfn/zrfn.jpg" alt="zrfn"></p><p><strong>Other</strong><br>服务机器人展区其实还有很多其他的机器人公司参展，但是由于篇幅以及时间的缘故，这里就不展开讲解了，下面放一些图片供大家伙欣赏，感兴趣的同学可以自行上公司官网进行了解。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/other/aiwa.jpg" alt="aiwa"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/other/gaussian.jpg" alt="gaussian"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/other/iben.jpg" alt="iben"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/other/lingyi.jpg" alt="lingyi"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/service_robot/other/sibot.jpg" alt="sibot"></p></li><li><h4 id="科研机器人"><a href="#科研机器人" class="headerlink" title="科研机器人"></a>科研机器人</h4><p><strong>BIT</strong><br>参加世界机器人大会的国内高校其实并不是很多，而其中最具代表性便是北理工了，他们这次带来的展品依次为下图中的汇童6P机器人、电动并联式轮足机器人哪吒和快速感知处理仿生眼系统，其中最新研制的汇童6P机器人作为国内高级仿人机器人之一，除了可以实现“摔滚走爬”（即摔倒后爬起、翻滚、行走、爬行）等多种仿人模态的运动之外，其自身对复杂环境的适应能力也非常强，我觉得如果以后汇童机器人的水平能够得到更大幅度提升的话，参加DARPA技术挑战赛也许并不是梦想。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/research_robot/bit/bit_1.jpg" alt="bit_1"></p><p>北理哪吒（BIT-NAZA）由北理工自动化学院运动驱动与控制研究团队开发，其创造性地采用了六自由度并联式一体化电动缸技术，使其可以实现轮式、足式和轮足复合式运动，在保证机器人移动速度和灵活性的同时，也大大提高了系统对复杂地形的适应能力，未来在军事装备运载和民用抢险救灾等领域均有非常广阔的应用前景。最后，有关哪吒机器人的其他内容可查看<a href="http://www.bit.edu.cn/xww/lgxb21/149122.htm">这篇文章</a>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/research_robot/bit/bit_2.jpg" alt="bit_2"></p><p>据官方介绍，快速感知处理仿生眼系统（为什么名称都这么高大上）突破了仿生球形眼球机构与协调运动控制、免摄像机标定仿生凝视立体定位、模拟前庭反射仿生电子稳像、基于旋转运动补偿及纹理映射的三维建模重构、多目标快速并行识别处理等关键技术，有效提升了机器人的三维环境感知、目标识别与定位能力，为促进仿生机器人的智能化发展奠定了坚实的基础。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/research_robot/bit/bit_3.jpg" alt="bit_3"></p></li><li><h4 id="特种机器人"><a href="#特种机器人" class="headerlink" title="特种机器人"></a>特种机器人</h4><p><strong>CITIC</strong><br>特种机器人国内做得比较好的当属中信重工，说实话我原来以为中信集团只做银行、证券等金融方面的业务，可是没想到他们下属的<a href="http://www.citichmc.com/">中信重工</a>子公司却从事机器人和智能装备等实体制造业领域的技术研发和产品落地工作，而且做得相当不错，根据官网的介绍，重工旗下目前推出五大系列共三十余款特种机器人产品，广泛应用于消防、市政、电力、矿山及石化等多种环境，下面两个图即分别为消防灭火和水下搜救特种机器人。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/citic/citic_1.jpg" alt="citic_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/citic/citic_2.jpg" alt="citic_2"></p><p><strong>RoboSea</strong><br>在面积不算大的特种机器人展区里，最吸引我的就是下图中的这个仿生鲨鱼机器人，不仅外形做得非常逼真，而且性能也很出色，据现场的工作人员介绍可知这款机器人名叫ROBO-SHARK，定位为高航速、低噪音的远洋仿生水下机器人平台，它使用三关节仿生尾鳍取代螺旋桨推进器，航行速度最高可达10节，且相较传统螺旋桨驱动方式能更加有效地降低产品的运行噪声，节省水下航行时所消耗的能量。此外，该产品外壳均由吸音材料制成，隐蔽性强，不会对原有海洋生物造成影响。总之通过交流，我发现这家初创公司除了上面的仿生鲨鱼，还研制了很多其他类型的机器人，而且涵盖消费级、企业级和教育科研等各个领域（比如下面第2个图的Robo-ROV、RoboRun和Robo-Fish），有兴趣的朋友可以去他们官网看看。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/robosea/robosea_1.jpg" alt="robosea_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/robosea/robosea_2.jpg" alt="robosea_2"></p><p><strong>Other</strong><br>如下图所示，除了上面两家特种机器人公司之外，还有一些不是很有名的公司也参加了特种机器人的展会，这里由于篇幅缘故就不再展开讲解了，感兴趣的可以自行上网查看。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/other/other_1.jpg" alt="other_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/3_wrc_2018/exhibition/special_robot/other/other_2.jpg" alt="other_2"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次世界机器人大会我觉得自己最大的收获就是能够参加大会论坛，并近距离聆听了国内外顶尖机器人研究学者所作的演讲报告，虽然时间只有半天（因为下午要去看博览会，所以就没再参加了），但是却让我亲身体会到了科研工作者们为探索机器人前沿技术所做出的不懈努力，机器人产业的整体进步离不开很多具有前沿性质的理论研究的支撑，我相信如果有更多的国内高校或科研院所能够真正踏下心来去做研究，并将其成果转化成可以落地的产品的话，那么中国的<strong>机器人强国梦</strong>就不再是一种奢望了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> WRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x06）：2017 世界机器人大会</title>
      <link href="/zh-cn/2018/08/06/tech_note_6_2017_world_robot_conf/"/>
      <url>/zh-cn/2018/08/06/tech_note_6_2017_world_robot_conf/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我第一次听说<strong>世界机器人大会</strong>还是在2015年10月，那会儿基地学长跟我们讲在当年11月底召开的世界机器人大会（后来才知道是第一届举办）上会有RoboCup国际赛冠军队伍的展示，当时我听完之后十分惊讶，因为我们舞蹈机器人基地曾经在7月份暑假期间受邀参加了在合肥举办的RoboCup国际赛，算是亲眼见证了那些国内外机器人强校之间的激烈对抗，所以我对那些获得RoboCup（世界最高级别机器人比赛）国际赛桂冠的队伍是相当崇拜的，没想到这次大会组办方能够把那么厉害的队伍邀请过来参加表演赛，就是从那一刻起，我意识到这个世界机器人大会可能并没有我们想象中的那样只会卖名字的噱头，看来它还真是有点货真价实的东西的。</p><p>因为在西安上大学的缘故，我错过了前两届世界机器人大会，2017年6月底我本科毕业回京参加工作，于是自己终于迎来了在家门口观看世界机器人大会的机会，从小到大算下来，这还是我头一次能够去现场参加如此规模的博览会，兴奋之情溢于言表，总之非常期待到时候能够看到各种各样有意思的机器人！</p><span id="more"></span><h2 id="大会"><a href="#大会" class="headerlink" title="大会"></a>大会</h2><h3 id="外景"><a href="#外景" class="headerlink" title="外景"></a>外景</h3><p>世界机器人大会的举办地在北京亦创国际会展中心，正好离我爸的工作单位不远（其实就只隔离了一条街区），所以那天一早我爸就开车把我送到了会场附近，到了之后我才发现机器人大会的受欢迎程度已经远远超出了我的想像，场馆周围早已被人流围得水泄不通，其中大部分是家长陪着孩子一起来的。不幸的是因为我之前没有在官网上预定好门票，而且估计主办方也没想到会来这么多观众（如下图所示），所以上午的票很早就派完了，不过好在下午自己通过排队换到票了，不然还真不好说没有下面博客中的内容了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exterior/exterior_1.jpg" alt="exterior_1"></p><p>历经千辛万苦，我总算是随着人群通过安检进入到了场馆外围的广场，还好场馆门口附近没有太多的人，自己赶紧掏出手机抓拍了一张留做纪念。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exterior/exterior_2.jpg" alt="exterior_2"></p><h3 id="展览"><a href="#展览" class="headerlink" title="展览"></a>展览</h3><ul><li><h4 id="展示机器人"><a href="#展示机器人" class="headerlink" title="展示机器人"></a>展示机器人</h4><p><strong>Pianobot</strong><br>如下图所示，一个身着燕尾服的机器人正坐在钢琴前准备弹奏音乐，没错，它就是在本次世界机器人大会上出尽风头的机器人钢琴家——Teo Tronico（特奥特劳尼克）。根据官方的介绍，这位机器人钢琴家总共拥有53根手指，由于每根手指都包含有相当多的关节（即机械自由度）且关节的动态控制做得非常出色，因此特奥特劳尼克能够极为准确、灵活地在钢琴上进行弹奏，速度之快，即使是世界上最顶尖的音乐大师，恐怕也很难与之相匹敌。</p><p>此外，特奥特劳尼克还拥有令人叹为观止的“记忆力”，它能够准确地“记住”超过1000首含有复杂旋律的钢琴曲，并进行极其精准地演奏。人类无法记住的大量音符，一经录制，特奥特劳尼克就能够分毫无差地为你演绎。不过非常可惜的是，我来到展位的时候表演已经结束了，只能再等下一次了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/show_robot/pianobot.jpg" alt="pianobot"></p><p><strong>ARTRobot</strong><br>北京钢铁侠科技作为国内第一家专门从事高级双足机器人研发的科技公司，在本次世界机器人大会上首次携ART双足机器人家族的三代产品集体亮相。从下图中可以非常清楚地看到，ART双足机器人初代机仅有腰部以下的机械结构，但是到了最新的第三代，机器人已经拥有了十指灵巧手，可以说在功能上相比前两代已经有了质的飞跃。不过虽说该款机器人的性能非常出色，但是其高昂的价格确实也不是闹着玩的，看来也许只有不差钱的高校实验室和企业才能用得起了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/show_robot/artrobot.jpg" alt="artrobot"></p></li><li><h4 id="工业机器人"><a href="#工业机器人" class="headerlink" title="工业机器人"></a>工业机器人</h4><p><strong>FANUC</strong><br>FAUNC（发那科）属于工业机器人四大家族之一，总部位于日本富士山脚下，得益于其在工业自动化领域的巨大成就，因此被世人称为“富士山下的黄色巨人”，同时发那科也是最早为人所熟知真正使用机器人制造机器人的企业。不过了解发那科的人都知道，发那科真正厉害的地方不在于工业机器人本身而是其背后所使用到的<strong>高精度数控系统技术</strong>，不过很可惜的是，在本次世界机器人大会上发那科仅展示了LR Mate 200iC小型五轴机械臂，而其技术最先进的数控系统却没有面向大众开放，而且发那科的展位确实也不大，感觉与其地位不太相符（不过也可以理解，毕竟大会是在中国举办的嘛）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/fanuc/fanuc.jpg" alt="fanuc"></p><p><strong>YAKSAWA</strong><br>YASKAWA（安川电机）也属于工业机器人四大家族之一，创立于1915年，总部位于日本福冈县的北九州岛市，相较于其他四大家族的机器人产品，安川电机的核心技术在于其<strong>相当高的稳定性</strong>，毕竟安川电机在创始初期就是从伺服电机系统做起的，所以它可以把电机的惯量做到最大化，从而使其设计的机器人拥有负载大、稳定性高等特点，即使在满负载、满速度运行的过程中机器人也不会报警，甚至能够过载运行。但由于发那科在数控系统领域的强势崛起，安川电机的机器人在精度上没有前者高，不过其价格优势明显，再加上安川电机与首钢成立合资公司，积极打入中国市场，国内的市场占有率应该不会少。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/yaskawa/yaskawa.jpg" alt="yaskawa"></p><p><strong>ABB</strong><br>ABB同属于工业机器人四大家族之一，来自于瑞士苏黎世，是由两个百年历史的国际性企业——瑞典的ASEA和瑞士的BBC Brown Boveri在1988年合并而成的。ABB的核心技术是<strong>强大的运动控制系统</strong>，对于机器人自身来说，最大的难点在于如何将机器人的运动控制做到又快又稳，而ABB的核心优势就是运动控制，可以说ABB的机器人运动控制算法在四大家族里是最好的，不仅仅有全面的运动控制解决方案，产品的使用和技术文档也编写得非常详细。</p><p>在本次世界机器人大会，ABB带来了如下图所示的双臂协作机器人YuMi，YuMi机器人每个手臂拥有七个自由度，并同时配备了创新的力传感技术，这使得机械臂具有很高的灵敏度和灵活度，适用于各种精度要求非常高的工作，比如3C部件以及其他小型零部件的包装和测试等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/abb/abb.jpg" alt="abb"></p><p><strong>KUKA</strong><br>KUKA（库卡）是工业机器人四大家族里创立时间最早的，库卡于1898年在德国的奥格斯堡成立，目前的主要客户来自汽车制造领域，同时也专注于向工业生产过程中提供先进的自动化解决方案。库卡的机器人产品统一涂装为代表活泼的橙黄色，而且外形设计也非常新颖、精致，被公认是四大家族里机器人“颜值”最高的，当然不要以为库卡只是靠脸吃饭的，能长期入围四大家族，必然是有几把刷子的。库卡的核心技术在于<strong>软件的易用性</strong>，它的二次开发做得很好，就算完全没有技术基础的初学者，在短时间内也可以轻松上手操作，而在人机交互界面上，为迎合中国人的使用习惯（你懂的），库卡将界面做得很简单，让用户像玩游戏一样就可以操作专业的机械臂。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/kuka/kuka.jpg" alt="kuka"></p><p><strong>FESTO</strong><br>FESTO（费斯托）成立于1925年，总部位于德国的埃斯林根，是全球气动和电驱动自动化技术领域的领导厂商。除了在传统的工业与流程自动化领域提供软硬件的全套解决方案之外，费斯托还在前沿技术创新领域里投入了大量的研发精力，其中最为惊艳的黑科技产品就是其采用自家的<strong>仿生学习网络</strong>技术所创造出的一系列整体外观和运动性能都极为逼真的仿生机器人，而在本次世界机器人大会上，费斯托不负众望带来了仿生蜻蜓<a href="https://www.festo.com.cn/group/zh/cms/10224.htm">BionicOpter</a>和飞行水母<a href="https://www.festo.com.cn/group/zh/cms/10244.htm">AirJelly</a>两大展品，说心里话如果不是自己亲眼看到仿生蜻蜓机器人，真的很难想象FESTO能将如此高度复杂的飞行特性付诸实现，不得不说德国的工业设计水平简直是逆天般的存在。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/festo/festo_1.jpg" alt="festo_1"></p><p>下图展示的是费斯托最新研制的气动轻型协作机械臂<a href="https://www.festo.com.cn/group/zh/cms/12746.htm">BionicCobot</a>，根据官方的介绍，BionicCobot机械臂采用了人类运动学原理（肌肉之间的相互作用）进行设计，并且得益于其独特且先进的驱动概念，机械臂移动的速度和力度能够得到精确的控制，而最重要的是，在发生碰撞的情况下，该款协作机械臂的气动装置能够自动缩回，不会对操作者构成任何威胁。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/festo/festo_2.jpg" alt="festo_2"></p><p>由于参观时间有限，我没能看到费斯托公司下午的仿生蜻蜓和飞行水母的动态演示，不过通过下面这张图片，我想大家就可以很清楚地看到费斯托展台的人气有多么火爆，我敢肯定它的仿生机器人绝对是本届世界机器人里最受欢迎的明星！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/festo/festo_3.jpg" alt="festo_3"></p><p><strong>Rethink Robotics</strong><br>Rethink机器人公司由Rodney Brooks于2008年所创立，与UR公司同为智能人机协作机器人发展的先驱。在本次世界机器人大会上，Rethink带来了旗下唯一的两款协作机器人Baxter和Sawyer，其中的Baxter我之前参加RoboCup合肥国际赛的时候就曾经见过，主要得益于其特有的串联弹性驱动器，使得用户能够更为精准地控制Baxter的机械臂的执行和反馈力，从而避免安全事故的发生。</p><p>Sawyer是Rethink公司最新推出的一款具有革命性的智能协作机器人，据官方介绍其包含有7个自由度，伸展范围可达1260mm，同时有效工作载荷达到4公斤，自重只有19公斤，这意味着Sawyer机器人可以被安装在狭窄的空间中，代替人类进行高质量的工作。此外，其还拥有有先进的嵌入式视觉系统和独特的柔顺控制技术，使其能够和Baxter一样与人类并肩进行安全、高效的工作。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/rethink/rethink_1.jpg" alt="rethink_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/rethink/rethink_2.jpg" alt="rethink_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/rethink/rethink_3.jpg" alt="rethink_3"></p><p><strong>Unviersal Robot</strong><br>UR机器人公司来自丹麦，是人机协作机器人的全球领导企业，在本次世界机器人大会上UR公司带来了其标志性的UR3和UR5机器臂，并现场为观众演示机械臂倒茶和抓取甜点等绝活，虽然自己之前在学习ROS MoveIt!的时候就曾接触过UR机械臂并跑过简单的仿真程序，但是亲眼看到UR机械臂以如此平滑且精确的移动完成物品的抓取和放置，我还是不禁感叹道：如果我们的服务机器人晓萌也能做到这点的话，也许参加RoboCup机器人世界杯对于我们来说就不再是奢望了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/ur/ur_1.jpg" alt="ur_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/ur/ur_2.jpg" alt="ur_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/ur/ur_3.jpg" alt="ur_3"></p><p><strong>Intuitive Surgical</strong><br>Intuitive Surgical（中文名为<strong>直觉外科</strong>）公司联合IBM、麻省理工和Heartport公司共同研发了下图中的具有划时代意义的达芬奇外科手术系统，其设计理念是通过使用微创的方法，实施复杂的外科手术。简单来说，达芬奇机器人就是一种高级的腹腔镜系统，外科医生需坐在控制台前通过操纵特殊的控制器来远程控制床旁机械臂系统末端执行器在患者体内的运动并对病灶进行精确处理，从而代替传统人手完成整套外科手术。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/surgical/surgical_1.jpg" alt="surgical_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/surgical/surgical_2.jpg" alt="surgical_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/surgical/surgical_3.jpg" alt="surgical_3"></p><p><strong>DLR</strong><br>说心里话在来之前，我还真没想到大名鼎鼎的DLR也会参加世界机器人大会，因为据我所知DLR开发的都是非常高级的机器人，应该很少会在公众面前进行展示，所以当我看到DLR的展位时，内心其实是非常惊讶的。当然这里有必要向读者介绍一下DLR是什么，DLR（即Deutsches Zentrum für Luft- und Raumfahrt）中文名为德国宇航中心，总部位于科隆，主要负责与航空航天有关的大型研究项目，其下属的机器人和机电一体化中心是欧洲最优秀的机器人实验室之一，下图中工作人员正在使用体感手套演示的机械臂以及照片中的Rollin’s Justin机器人都是该中心最具代表性的研究成果。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/dlr/dlr_1.jpg" alt="dlr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/dlr/dlr_2.jpg" alt="dlr_2"></p><p><strong>TerBee</strong><br>在欣赏完DLR机械臂的精彩演示之后，我决定去别的展台看看，刚出DLR展位不远就在拐角处遇到了一个名叫TerBee的参展商，原本我以为它就是卖超声波传感器的，可是当我下意识地瞥了一眼他们的电脑显示屏后才发现这些传感器模组并不简单，因为根据演示视频，TerBee团队已经可以将传感器采集到的数据与ROS中的SLAM算法进行深度融合，从而实现小型移动机器人或四轴飞行器的实时定位与导航。总体感觉非常屌，不过看了一下官网其售价确实也不便宜，要是国内也有类似性能的产品就好了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/terabee/terabee_1.jpg" alt="terabee_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/terabee/terabee_2.jpg" alt="terabee_2"></p><p><strong>HRG</strong><br>HRG(HIT Robot Group)中文名为哈工大机器人集团，顾名思义它是一个从哈工大走出来的机器人公司，不得不承认，哈工大在国内无论是在机器人科研领域还是在机器人产业落地方面均处于领先地位。本次世界机器人大会，HRG主要展示了自主研发的特种机器人（比如有特种救援机器人、管道检测机器人）、全自主水下航行器、固定翼以及多旋翼无人机和应用于工业领域的大型或轻型机械臂，其产品涉及的领域比较广，技术水平一流，希望在不久的将来HRG能够逐步替代四大家族，让更多中国公司用上国产的工业机器人等高端设备。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_1.jpg" alt="hrg_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_2.jpg" alt="hrg_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_3.jpg" alt="hrg_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_4.jpg" alt="hrg_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_5.jpg" alt="hrg_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/hrg/hrg_6.jpg" alt="hrg_6"></p><p><strong>SIASUN</strong><br>新松是国内除了HRG之外的另一个工业机器人巨头，隶属于中科院，拥有非常强大的技术研发能力，工业机器人产品也远销海内外，口碑相当不错。在本次世界机器人大会上，新松除了展示了几种常规型号的机械臂之外，给我留下印象比较深的是新松最近才推出的双臂协作机器人，从下面的巨型横幅海报就能看出，这款协作机器人外观非常漂亮，全身上下都透露着工业设计的美感，而且在机器人演示画沙画的过程中，左右两个机械臂配合得非常好，无论是精度还是速度都不亚于人类画师，看来如果人类再不努力的话，未来很有可能要面临失业的风险。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/siasun/siasun_1.jpg" alt="siasun_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/siasun/siasun_2.jpg" alt="siasun_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/siasun/siasun_3.jpg" alt="siasun_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/siasun/siasun_4.jpg" alt="siasun_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/siasun/siasun_5.jpg" alt="siasun_5"></p><p><strong>CALT</strong><br>CALT对于很多军工科研院所的员工或者打算未来投身国防建设的学生们来说，这都是一个如雷贯耳的名字，没错它就是著名的中国运载火箭技术研究院，简称航天科技一院，主要承担与运载火箭相关的研究，基本上到目前为止中国所有已经发射过或在研的火箭型号均由该院设计，整体科研水平非常强。可是令人惊讶的是，一个研究导弹和火箭的科研院所，竟然会参加世界机器人大会，这对于同样在航天系统工作的我来说是不可想象的。</p><p>这次一院参展的产品主要有常规工业机械臂、双臂智能协作机器人以及主打智能制造的机器人分拣系统，感觉技术水平在国内应该算前列，而且听说部分零件采用的是航天级别的材料和加工工艺，所以产品质量肯定也没话说。总之，一院在军民融合这块还是下了很大功夫的，希望之后可以加大投入力度，让更多的航天技术应用到我们的实际生活中来。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/calt/calt_1.jpg" alt="calt_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/calt/calt_2.jpg" alt="calt_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/calt/calt_3.jpg" alt="calt_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/calt/calt_4.jpg" alt="calt_4"></p><p><strong>Other</strong><br>除了以上介绍的几个大型展台之外，工业机器人展厅里面还有很多中小型的机器人企业，它们也带来自己最新研制的机器人，比如下图中爱啃萝卜（AICRobo）的仓储物流机器人，艾利特的高精度机械臂，镭神公司的激光雷达系列以及香河产业基地所孵化的各种自主机器人，虽然技术上可能无法与国内外大公司相比，但是在某些细分领域内这些机器人公司还是很有竞争力的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/other/aicrobo.jpg" alt="aicrobo"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/other/elibot.jpg" alt="elibot"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/other/leishen.jpg" alt="leishen"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/other/xrip_1.jpg" alt="xrip_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/industrial_robot/other/xrip_2.jpg" alt="xrip_2"></p></li><li><h4 id="服务机器人"><a href="#服务机器人" class="headerlink" title="服务机器人"></a>服务机器人</h4><p><strong>SoftBank Robotics</strong><br>在本次世界机器人大会上，软银机器人公司带来了其最新研制的Pepper服务机器人，其实早在2015年RoboCup机器人世界杯那会儿，我就曾近距离接触过该公司（那会儿叫Aldebaran Robotics，后来被收购后才改名为软银机器人）旗下的另一款机器人Nao，它简约的外观、灵活的动作以及强大的AI都给我留下了非常深刻的印象。</p><p>在亲眼目睹Pepper机器人之后，我相信很多人都会跟我有相同的感受：<strong>这个机器人的颜值也太高了吧！</strong>无论是机器人躯体的哪个部位，工业设计都堪称完美，简直难以用语言来形容。此外，Pepper机器人还能够与人类进行语言上的交流，并通过判断人类的面部表情来理解人类的情感，因此其也被称作“情感机器人”，这使得其在客户导流、精准营销、互动娱乐等领域有着非常大的应用价值。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/softbank/softbank_1.jpg" alt="softbank_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/softbank/softbank_2.jpg" alt="softbank_2"></p><p><strong>PowerVision</strong><br>如下图所示，这家来自中国的机器人公司所展示的无人机外观设计非常独特，它的机体没有采用传统四轴飞行器十字形的机架，而是直接将飞行器的外壳做成蛋形，这使得其在收纳时无需拆卸桨叶和脚架，大大增加了其便携性。非常幸运的是，我来到展台的时候刚好赶上工作人员在防护笼里进行飞行演示，无人机移动起来比现象中的要灵活，而且悬停也很稳定，总之很赞！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/powervision/powervision.jpg" alt="powervision"></p><p><strong>UBTECH</strong><br>作为国内两大服务机器人巨头之一，优必选（UBTECH）也参展了本次世界机器人大会，除了之前一直人气较高的阿尔法机器人之外，本次我比较关注的是优必选最新推出的克鲁泽商用服务机器人，它使用了高精度的U-SLAM立体导航避障系统，通过实时定位与地图构建技术，使得机器人能够在移动过程中实现自主定位和避障。此外，克鲁泽能够以多模态即通过文字、语音、视觉、动作、环境等多种感官进行人机交互，应用场景非常丰富。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/ubtech/ubtech.jpg" alt="ubtech"></p><p><strong>CANBOT</strong><br>康利优蓝是国内另外一家服务机器人巨头，其最新研发的优友U05机器人大家肯定不会陌生，因为自2015年问世以来，优友U05不但在政务、司法、银行、展馆、医院、交通、电力、地产等上百种商业场景中得到应用，而且更是频繁出席各类重大活动和各大综艺节目，成为了明星机器人。除了名气大之外，它本身最大的技术特点在于其强大的智能交互特性，优友U05不仅可以实现基础的语音识别，还能听明白语音语调，并从人的语气上推测出你的心情，这使得机器人理解人类的感受成为可能。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/canbot/canbot.jpg" alt="canbot"></p><p><strong>Sanbot</strong><br>三宝机器人也是国内一家专注于服务机器人研发的公司，在本次世界机器人大会上主要展示了旗下主打的小精灵系列（下图2）和最新研发的金刚系列商用服务机器人（下图1），其中小精灵系列机器人跟国内很多同类型产品一样也配备了智能的语音和人脸识别模块，而且应用场景也是类似的，主要集中在高端家庭、海关、医疗、银行、农业、政府、教育、商业中心、零售、展览馆等领域，看来国内这块竞争还是比较激烈的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/sanbot/sanbot_1.jpg" alt="sanbot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/sanbot/sanbot_2.jpg" alt="sanbot_2"></p><p><strong>KEENON</strong><br>擎朗智能机器人公司也是做商用服务机器人这块的，但是跟国内很多公司不同的是，擎朗主要专注于室内无人配送领域服务机器人的自主研发和生产，主要应用于餐厅配送、酒店服务、医疗配送、快递/外卖配送等场景，这次参展产品主要有引领机器人、运输机器人和酒店机器人，它们均配备了独立的传感器和计算模块，可以实现全自主的移动和感知，从现场实际的体验来看，这些机器人的综合性能还是很不错的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/keenon/keenon_1.jpg" alt="keenon_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/keenon/keenon_2.jpg" alt="keenon_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/keenon/keenon_3.jpg" alt="keenon_3"></p><p><strong>Roobo</strong><br>儒博机器人公司主打智能教育机器人市场，在本次世界机器人大会上他们带来了DOMGY智能宠物机器人（下图1），它不仅能识别文字信息，还能掌握语言的节奏和情绪，判断人物的性格特征并进行深度学习。据官方的介绍，通过对计算机视觉的运用，DOMGY能识别家庭中的成员和宠物，完成家庭空间的3D识别，还能按照主人设定的路径进行安全巡逻，捕捉异常画面并及时拍照上传APP提醒主人，它俨然已经成为了一只陪伴家庭的智能宠物。</p><p>此外，令我比较感兴趣的是儒博还展示了凡尼（FARNESE）大型服务机器人（下图2），尽管它所具有的功能和特点与上面介绍过的几家公司的产品相类似，但是其外观设计还是非常简洁、漂亮的，有点Pepper的影子。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/roobo/roobo_1.jpg" alt="roobo_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/roobo/roobo_2.jpg" alt="roobo_2"></p><p><strong>HFAI</strong><br>荷福机器人集团虽然名字我觉得起的不是很好听，但是他们展示的机器人，技术水平还是非常高的，其中最有名的当属以姚明身体1:1的比例所打造的高仿真投篮机器人，它堪称本届大会最具人气机器人，无论什么时候其周围都会围着一群观众，不过很可惜的是我没等到姚明机器人的现场投篮表演。 此外，荷福还展示了最新的炬石双足直立行走机器人，从外观上看与日本本田的ASIMO机器人有几分神似，不知道其性能究竟如何。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/hfai/hfai_1.jpg" alt="hfai_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/hfai/hfai_2.jpg" alt="hfai_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/hfai/hfai_3.jpg" alt="hfai_3"></p><p><strong>ECOVACS</strong><br>科沃斯这个公司我相信很多人都对其并不陌生，因为他们主打的扫地机器人和擦窗机器人国内市场的占有率非常高，据统计在家庭清洁机器人领域，每销售3台清洁机器人中就有2台来自科沃斯，从中可见科沃斯技术水平之高。而相比于其王牌的地宝和窗宝机器人，科沃斯推出的旺宝（下图2）则主要应用于B2B商用领域（银行大厅、政务办公大厅、电信营业厅、电力行业、大型超市、金融证券、教育教学等），为商户提供系统服务，可以有效降低终端门店人员成本，提高管理效率。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/ecovacs/ecovacs_1.jpg" alt="ecovacs_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/ecovacs/ecovacs_2.jpg" alt="ecovacs_2"></p><p><strong>EAI</strong><br>EAI公司主要专注于机器人移动解决方案，目前已有产品为各种型号的高精度激光雷达和智能自主移动平台，技术水平我觉得还是非常厉害的，因为毕竟我曾在大学的舞蹈机器人基地待过，我知道使用ROS和激光传感器来跑一个稳定的SLAM还是很不简单的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/eai/eai_1.jpg" alt="eai_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/eai/eai_2.jpg" alt="eai_2"></p><p><strong>DOBOT</strong><br>越疆科技的DOBOT魔术师机械臂我早在上大二那会儿就已经知道了，因为开源硬件Arduino正好在那个时候开始火遍全中国，而DOBOT应该是当时全球第一款基于Arduino的桌面级高精度机械臂，在创客领域里非常有名。时过境迁，现在回过头来再看DOBOT机械臂，自己心中的热情还是不减当年，我想等以后自己有钱了，一定要买一台回家好好玩玩，弥补一下当初的遗憾。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/dobot/dobot_1.jpg" alt="dobot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/dobot/dobot_2.jpg" alt="dobot_2"></p><p><strong>Other</strong><br>服务机器人展厅内的公司实在是太多了，我在这里就不再一一展开介绍了，除了上述介绍的几家具有代表性的服务机器人公司之外，还有比如大名鼎鼎的科大讯飞、思岚科技和京东神秘的X事业部等企业，我相信随着国家开始加大对服务机器人产业的投入，未来中国的服务机器人不仅能够真正地帮助到人们，还能走出国门，造福全世界！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/other/iflytek.jpg" alt="iflytek"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/other/slamtec.jpg" alt="slamtec"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exhibition/service_robot/other/jd.jpg" alt="jd"></p></li></ul><h3 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h3><ul><li><h4 id="RoboCom"><a href="#RoboCom" class="headerlink" title="RoboCom"></a>RoboCom</h4><p>根据官网的介绍，RoboCom国际公开比赛主要面向青少年，通过对抗类、任务类和创意类3种不同的赛事形式，将团队协作、问题解决、科学发现等内容与比赛相结合，用于锻炼青少年对机器人技术的理解和掌握程度，并最大程度地激发青少年对机器人技术的兴趣。虽然我没太看懂RoboCom的比赛规则，但可以确定的是，它在国内的影响力还是相当可以的，我在比赛场地周围转了一圈，发现连很多外省市的小学都派队参加该项赛事，而且赛事组织方还邀请了一些国外队伍参加比赛（“国际赛”的头衔也算勉强够得上吧）。总之抛开技术水平不谈，能吸引如此之多的青少年投入到机器人的学习和制作当中去，RoboCom比赛还是很有积极意义的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/robocom/robocom_1.jpg" alt="robocom_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/robocom/robocom_2.jpg" alt="robocom_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/robocom/robocom_3.jpg" alt="robocom_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/robocom/robocom_4.jpg" alt="robocom_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/robocom/robocom_5.jpg" alt="robocom_5"></p></li><li><h4 id="Quadcopter"><a href="#Quadcopter" class="headerlink" title="Quadcopter"></a>Quadcopter</h4><p>无人机公开赛的比赛场地位于世界机器人大会的D馆。如下图所示，一走进D馆你立刻就能看到一个由防护网所围成的开阔区域，里面设置了很多带有LED灯带的标志杆和障碍物，选手需要以第一人称视角（FPV）远程操控竞速无人机绕比赛场地快速飞行，并穿越各种障碍，非常惊险刺激。我去的时候刚好就有一架四轴穿越机正在比赛，可惜还没飞完半圈就因碰到障碍物摔倒了地上。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/quadcopter/quadcopter_1.jpg" alt="quadcopter_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/competition/quadcopter/quadcopter_2.jpg" alt="quadcopter_2"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过一整天马不停蹄的参观，终于到了要跟2017世界机器人大会说再见的时候了，说心里话这是我人生第一次参加如此正式的机器人博览会，全程内心都是处于非常激动和兴奋的状态，看到了很多国内外技术领先的机器人，也深刻体会到了中国与发达国家在工业自动化、高精度组件制造等方面之间所存在的巨大差距，我希望中国未来可以在工业基础领域投入更多的精力、物力与财力，让我们的智能机器人也能用上高精度的零件，从而实现更加智能化、复杂化的应用。</p><p>最后，放上一张世界机器人大会主广场的照片作为纪念，明年咱们不见不散！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/2_wrc_2017/exterior/exterior_3.jpg" alt="exterior_3"></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> WRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x05）：2017 北京Maker Faire大会</title>
      <link href="/zh-cn/2018/07/28/tech_note_5_2017_beijing_makerfaire/"/>
      <url>/zh-cn/2018/07/28/tech_note_5_2017_beijing_makerfaire/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得高考完的那个暑假自己有一次去书店买书，在选书的过程中偶然在旁边的架子上发现好了几本名字叫做《爱上制作》的杂志，我当时出于好奇就翻看了其中的一本，里面介绍了很多国外大神制作的各种充满想象力和创造力的项目，内容不仅描述得非常详细而且还具有很强的可操作性，真的是让人越看越入迷，后来我还买了好几本回家看。就是从那时起我开始逐渐接触国外的创客项目，并喜欢上了这些项目背后所蕴含的那种创客文化。</p><p>而作为美国乃至全世界创客文化的先驱，我相信很多人我一样，把<a href="https://makezine.com/">Make公司</a>当作自己的偶像。我认为Make公司除了发行《爱上制作》等杂志或书籍之外，最大的贡献就是创建了<strong>Maker Faire</strong>大会，它为各国的创客以及DIY爱好者们提供了一个绝佳的交流平台，有效促进了创客理念在全球的传播。北京从2015年开始连续举办了两届Mini Maker Faire大会，经过两年的努力，2017年的北京Maker Faire大会终于由Mini级升级为城市级，虽然大会的规模还比不上纽约和湾区，但是能够在家门口参加一次城市极的Maker Faire大会，怎么说呢，也算是圆了自己的一个心愿吧。</p><span id="more"></span><h2 id="大会"><a href="#大会" class="headerlink" title="大会"></a>大会</h2><h3 id="外景"><a href="#外景" class="headerlink" title="外景"></a>外景</h3><p>今年北京Maker Faire大会的举办地是在中华世纪坛。说起中华世纪坛，很多人都不会陌生，因为它是当年中国为了迎接21世纪新千年的到来而专门修建的，现在主要作为艺术馆而使用。也许是第一次参加Maker Faire大会，我很早就赶到了会场附近，令人意想不到的是，会场周边道路两旁的灯柱上都挂着与大会有关的宣传海报，而且设计的相当精美，真恨不得拿一幅回家当作纪念。经过几分钟的路程，我终于走到了会场的门口（如下图所示），尽管当时场馆还未开放，但是回忆起自己之前在杂志中所看到的各种有关Maker Faire大会的精彩内容，内心还是显得很激动。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exterior/exterior_1.jpg" alt="exterior_1"></p><p>上午9点左右，Maker Faire大会正式开始，我也随着人流通过安检通道顺利进入到会场园区里，而在会场入口的不远处，一个由各种不同形状的零件所组装成的恐龙模型就伫立在旁边，好像在用它张开的大嘴欢迎所有热爱创客运动的爱好者的到来！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exterior/exterior_2.jpg" alt="exterior_1"></p><h3 id="展览"><a href="#展览" class="headerlink" title="展览"></a>展览</h3><ul><li><h4 id="玩偶模型"><a href="#玩偶模型" class="headerlink" title="玩偶模型"></a>玩偶模型</h4><p>今年大会的组织方别出心裁地将Make官方的机器人模型分发给很多艺术家或设计师，让他们为其上色，并将最终完成好的机器人模型分散放置在展览会场的各个角落，以作为“集戳换礼”活动点的标志。相比于活动本身，我更喜欢这些机器人模型，它们不仅颜色各不相同，上色的方式也各有特色，有的是用喷漆喷上去的，有的是用油笔画上去的，还有的是用彩色3D打印直接替换已有的零件。总之，我在会场里转了好几圈，应该是把所有隐藏在角落里的机器人模型都用手机给拍了一遍，看来自己收集数据的习惯是改不了了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_1.jpg" alt="doll_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_2.jpg" alt="doll_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_3.jpg" alt="doll_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_4.jpg" alt="doll_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_5.jpg" alt="doll_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_6.jpg" alt="doll_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_7.jpg" alt="doll_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_8.jpg" alt="doll_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/dolls/doll_9.jpg" alt="doll_9"></p></li><li><h4 id="参展柜台"><a href="#参展柜台" class="headerlink" title="参展柜台"></a>参展柜台</h4><p><strong>Banana Pi</strong><br><a href="https://www.banana-pi.org.cn/">Banana Pi（香蕉派）</a>是由广东比派科技有限公司主导的一个开源硬件项目，专注在ARM，MCU系列开源硬件开发板，提供全开放的软件与硬件平台,打造基础技术开发平台。全系列开源硬件产品，完整整合了语音，数据，视频系统平台。开发者可以灵活的在开源硬件基础平台上搭建各种应用平台。可以应用在物联网，AI人工智能 ，工业互联网控制，STEAM教育等各方面。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/banana_pi/banana_pi_1.jpg" alt="banana_pi_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/banana_pi/banana_pi_2.jpg" alt="banana_pi_2"></p><p><strong>Brick ‘R’ knowledge</strong><br><a href="https://www.brickrknowledge.de/zh-hans/">Brick ‘R’ knowledge</a>是一种创新性的接插系统，它以独特的设计将电子电路化繁为简，使高深的电子技术变得直观而简单。Brick ‘R’ knowledge模块使用起来非常方便，系统连接可靠，还允许用户加入多种模块组件，甚至与Bricks系统外的传感器和电子元件相连接，以此开发出更为复杂的电路系统。而在软件上，Bricks的编程套装，不仅可以用C语言完成编程，还可以用Scratch完成部分编程设计，这大大简化入门级用户学习编程的难度，使得学习电子知识变得快乐和有趣。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/brick_r/brick_r_1.jpg" alt="brick_r_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/brick_r/brick_r_2.jpg" alt="brick_r_2"></p><p><strong>Robot Band</strong><br>Robot Band是一个来自日本的机器人乐队，他们曾多次参加在美国湾区举办的Maker Faire大会，是个不折不扣的明星团队。Robot Band机器人乐队主体由几个人型机器人组成，其中有敲鼓的，有敲风琴的，还有表演唱歌的，它们彼此之间配合十分默契，演奏出的音乐有一种机器人独有的机械感，非常动听！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/robot_band/robot_band_1.jpg" alt="robot_band_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/robot_band/robot_band_2.jpg" alt="robot_band_2"></p><p><strong>Innobot</strong><br><a href="http://www.uptech-robot.com/product/nobot/676.html">Innobot</a>是<a href="http://www.uptech-robot.com/">博创尚和</a>公司推出的模块化机器人，其种类丰富的ABS塑料结构件搭配高强度的镁铝合金结构件可搭建各种灵活而坚固的结构形态，并以电机为动力单元，以各类传感器为感知单元，连接到机器人的核心控制器上（基于Arduino开源硬件），通过界面简单、直观的图形化编程软件（基于Scratch开源软件）或IDE编程软件对机器人编程控制程序，完成设计的功能或任务。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/innobot/innobot_1.jpg" alt="innobot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/innobot/innobot_2.jpg" alt="innobot_2"></p><p><strong>IronBot</strong><br>IronBot是<a href="http://www.robospace.cc/">匠客信息科技</a>公司推出的智能编程机器人套件，它具有进阶组装、图形编程、智能交互和个性定制等四大核心功能，旨在培养青少年的动手能力与想象力，使孩子们能够在实践中锻炼自己的逻辑思维，并学习到相关的机器人知识。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/ironbot/ironbot_1.jpg" alt="ironbot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/ironbot/ironbot_2.jpg" alt="ironbot_2"></p><p><strong>KittenBot</strong><br><a href="http://www.kittenbot.cn/#/home">KittenBot</a>是小喵科技公司所打造的智能教育机器人品牌，本次Maker Faire大会KittenBot带来了旗下的两款热门产品，分别为MiniLFR迷你巡线小车和KittenBot基础小车套件（如下图所示）。硬件上它们的主控板均与Arduino UNO兼容，具有很好的扩展性，软件则基于目前流行的Scratch图形化编程工具进行了二次开发，非常方便初学者学习和使用。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/kittenbot/kittenbot_1.jpg" alt="kittenbot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/kittenbot/kittenbot_2.jpg" alt="kittenbot_2"></p><p><strong>Makeblock</strong><br><a href="https://www.makeblock.com/cn/">Makeblock（童心制物）</a>成立于2013年，是一家全球领先的STEAM教育解决方案提供商，其产品曾多次荣获德国红点、德国iF和美国IDEA等设计大奖，是目前国际STEAM教育领域里的“准独角兽”公司。在我的印象里，Makeblock早在成立之初那几年就已经在创客领域拥有非常高的人气了，那会儿《无线电》杂志和创客论坛经常会介绍如何用Makeblock的金属积木来搭建各种模块化的机器人，而本次大会Makeblock依旧没有让广大的机器人爱好者失望，他们带来的有旗下的<a href="https://www.makeblock.com/cn/steam-kits/mbot">mBot</a>、<a href="https://www.makeblock.com/cn/steam-kits/mbot-ranger">mBot Ranger</a>和<a href="https://www.makeblock.com/cn/steam-kits/airblock">Airblock</a>等明星产品，无论是在机械设计的严谨性上，还是软件编程的易用性上，Makeblock的机器人均表现得非常出色，希望未来Makeblock能够继续帮助更多人享受创造的乐趣！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/makeblock/makeblock_1.jpg" alt="makeblock_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/makeblock/makeblock_2.jpg" alt="makeblock_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/makeblock/makeblock_3.jpg" alt="makeblock_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/makeblock/makeblock_4.jpg" alt="makeblock_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/makeblock/makeblock_5.jpg" alt="makeblock_5"></p><p><strong>Quadcopters</strong><br>四轴无人机是向来都是近几年Maker Faire大会的常客，今年参展的有<a href="https://www.zerotech.com">零度智控</a>公司推出的<a href="https://www.zerotech.com/#/dobby">DOBBY</a>自拍无人机和零零无限科技公司自主设计的<a href="https://gethover.com/?d=pc&amp;c=cn">Hover Canmera</a>跟拍无人机，其中零度智控的工作人员在大会现场临时搭建了一个正方形的防护笼，场地内布满了二维码，应该是要演示多无人机的自主协同飞行，可惜由于自己时间有限，没能看到无人机的精彩演出。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/quadcopters/quadcopter_1.jpg" alt="quadcopter_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/quadcopters/quadcopter_2.jpg" alt="quadcopter_2"></p><p>在场馆的航模展示柜台附近闲逛的时候，自己偶遇了一台小型的四轴飞行器，它配备有完整的电子控制模块，而且令人感到意外的是，飞行器上面还搭载了一个小型的图传，可以实现远距离的图像实时传输，真是”麻雀虽小五脏俱全”。尽管功能上不及之前介绍的两种自拍无人机，但是乍一看它还是很可爱的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/quadcopters/quadcopter_3.jpg" alt="quadcopter_3"></p><p><strong>Others</strong><br>以下图片集中展示了一些公司和个人创客们所做的作品，其中有可变形的多足机器人，有能够书写毛笔字的装置，还有各种基于开源模块搭建的机器人，种类非常多，真是让人大饱眼福。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_1.jpg" alt="other_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_2.jpg" alt="other_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_3.jpg" alt="other_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_4.jpg" alt="other_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_5.jpg" alt="other_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_6.jpg" alt="other_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_7.jpg" alt="other_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_8.jpg" alt="other_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_9.jpg" alt="other_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/exhibition/booths/others/other_10.jpg" alt="other_10"></p></li></ul><h3 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h3><p>比赛向来都是Maker Faire大会的传统节目，今年也不例外。与往届相类似，今年比赛的主体依旧面向广大的青少年，比赛的种类有很多，有工程机器人搬用比赛（主要比机器人搬运零件的准确度和速度），还有轮式机器人足球比赛以及MakeX（由Makeblock创立）赞助的机器人对垒赛（我不太懂这个比赛规则，但是感觉应该是两方机器人通过发射炮弹来攻击对方的保龄球，在规定时间内，谁击倒保龄球的数量多谁便获胜），这些比赛的难度基本都在当前年龄阶段青少年的理解范围之内，对于提高青少年的动手能力是很有帮助的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/competition/competition_1.jpg" alt="competition_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/competition/competition_2.jpg" alt="competition_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/competition/competition_3.jpg" alt="competition_3"></p><h3 id="纪念"><a href="#纪念" class="headerlink" title="纪念"></a>纪念</h3><p>Maker Faire大会除了各路创客大神富有想象力的作品之外，官方提供的纪念品也非常精美。在参观结束后，我一口气在特许商店里购买了徽章、贴纸和衣服等具有Maker Faire元素的纪念品，每个都做工精良，非常有纪念意义。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/join_activities/1_mf_beijing_2017/souvenir/souvenir.jpg" alt="souvenir"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我的第一次Maker Faire之旅即将结束，经过半天的参观浏览，我发现这里的大部分创客都非常热情，他们不仅将自己的作品展示给大家，还愿意分享自己的制作经验，使得更多的人能够理解创客文化的本质，这一点是值得肯定的。但是从另一方面上讲，中国的Maker Faire大会和美国相比依旧存在着比较大的差距，以下内容部分引用自雷锋网作者<strong>硅谷风向标</strong>之前所写的<a href="https://www.leiphone.com/news/201505/xHFOdS3CyAuuHYSV.html">《再一次被玩坏的创客：从Maker Faire看中美创客运动差别》</a>文章：</p><blockquote><p>在Maker Faire Bay Area上，我们看到的是真正意义上的全民参与：不仅在各个展位上我们能看到各种有趣好玩的项目，广场上的各种巨型机器装甲在喷着火，各种各样改装的电动小车到处乱跑，带着孩子的家长和带着学生的老师，穿着华丽衣服表演意大利歌剧的演员，手工制作工艺品的匠人，教你做各种有趣尝试的Workshop，即便Intel、Google这样的巨头，也不是一味宣传而是以有趣的活动进行互动，以及现场许许多多美食的摊位……可以说在你亲临现场之前，你真不知道Maker Faire能玩出那么多花样。</p></blockquote><p>就像上文中所讲的那样，老外他们参加Maker Faire大会并展示自己所做的东西并不是因为追逐所谓的“创客”潮流，<strong>而是他们真正喜欢他们自己所做的事</strong>，通过在Maker Faire上与其他创客之间的思想交流，他们可以进一步完善自己的项目，而反观国内，创客已经基本与创业划上了等号，创客不再纯粹和自由，它变成了一种商业模式，越来越多的青年人开始响应政府的号召投入到新一轮的创业热潮当中，殊不知丧失了对造物的敬畏和热情，做出的产品也就永远无法逾越创新的天花板，这也就是为什么国内的Maker Faire大会上充斥着大量功能类似，毫无创新可言的展品的真正原因了。</p><p>最后什么都不说了，希望自己未来有机会能够参加在美国湾区举办的Maker Faire大会，看看最原味的Maker Faire是什么样子。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制机器人系列（0x03）：两轮自平衡机器人</title>
      <link href="/zh-cn/2018/06/13/diy_robot_3_2wd_balancing_robot/"/>
      <url>/zh-cn/2018/06/13/diy_robot_3_2wd_balancing_robot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年春节左右我拿到了<a href="https://github.com/maksyuki">maksyuki</a>所设计的Breezeduino板子，Breezeduino是一个基于ATmega328P-AU芯片（32引脚QTFP封装）的AVR单片机最小系统板，由于现在Arduino非常流行，所以我们也顺理成章地给Breezeduino刷入了最新的Arduino Nano固件，使其可以通过Arduino所提供的软件封装来编写嵌入式程序。在能够正常烧写Blink程序后，我在想如何能把这个板子用起来，首先进入我脑海里的是做一个游戏机，因为游戏机的硬件原理不难而且还可以自己DIY写一些小游戏去玩，比较有意思，目前国外类似的开源项目有<a href="https://www.makerbuino.com/">MAKERbuino</a>和<a href="https://gamebuino.com/">Gamebuino</a>，做得已经相当不错了。不过在经过一番深思熟虑后，我还是决定回归我最喜欢的老本行——机器人，因为对于我来说做一个可以与物理世界进行交互的机器人要比其只能在游戏机的OLED 12864屏幕里能跑能跳要有意思的多。</p><span id="more"></span><p>既然项目已经定下来要做机器人，那这回我要做什么类型的机器人呢？鉴于之前我已做过四轮和六足机器人，那这次我就不能做得重样，就在我考虑如何使用家里现有的元器件和模块搭建机器人的时候，我看到大神<a href="http://www.pengzhihui.xyz/about/">彭稚晖</a>的一篇非常棒的博文《<a href="http://www.pengzhihui.xyz/2015/12/09/nano/">Nano - 全球最迷你的自平衡机器人</a>》（其他博文的质量也非常高），它深深震撼了我，虽然TB上有很多商家在卖自平衡小车的学习套件，但能把一个自平衡机器人做得如此小型化、拟人化而且功能又足够丰富的确实很少见！于是，本着喜欢做小型机器人的爱好以及学习基本倒立摆模型的目的，我也踏上了制作两轮自平衡机器人的旅程。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>顾名思义，两轮自平衡机器人是一个只依靠自身的前后运动实来现动态平衡的两轮机器人，其中涉及到的原理简单来说与高中物理中所学的磁场负反馈类似（具体内容请看下面软件部分的介绍）。该机器人的硬件核心使用的是队友制作的Arduino Nano最小系统版，它负责实时接收和处理姿态传感器的数据，并将处理后的数据发送给电机驱动模块来精确控制电机的转向和转速，从而实现机器人的自平衡效果。在软件层面上，该机器人采用的是自平衡车领域里最常见的PID算法，简单且易于理解，在保证机械结构没有问题（下面会有讲解）的情况下，只需调整相关的PID参数便可使机器人保持动态平衡。当然遵循惯例，该机器人项目的软件依旧开源，具体代码可以从我的GitHub<a href="https://github.com/myyerrol/2wd-balancing-robot">仓库</a>上获得。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li><h4 id="电机执行层"><a href="#电机执行层" class="headerlink" title="电机执行层"></a>电机执行层</h4><p>顾名思义，电机执行层部分包含的就是整个自平衡机器人最重要的执行器——电机。关于电机的选择，大神彭稚晖（以下简称<strong>彭神</strong>）在其博文中已经介绍过了：</p><blockquote><p>减速电机 | 尺寸自定，但最终输出转速为300rpm左右会比较合适，值得注意的是电机必须带编码器或者码盘来测速，单相或者两相的都可以。</p></blockquote><p>我买的是带有AB双向增量式磁性霍尔编码器的N20减速电机，减速比为1：30，额定转速正好在300rpm左右。在买的时候一定要注意<strong>电机的使用电压，因为同样的减速比，不同电压型号的N20减速电机其额定转速是不一样的！</strong>至于TB链接就不发了，直接在首页中搜索“N20减速电机 码盘”就能找到。如下图所示，两个N20减速电机被紧紧地固定在机器人底座上：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_motor_1.jpg" alt="2wd_balancing_robot_motor_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_motor_2.jpg" alt="2wd_balancing_robot_motor_2"></p></li><li><h4 id="电机驱动层"><a href="#电机驱动层" class="headerlink" title="电机驱动层"></a>电机驱动层</h4><p>电机驱动层负责驱动两个N20减速电机的转速和转向。同样，彭神在硬件需求中对电机驱动模块的选择进行了简要的介绍：</p><blockquote><p>电机驱动 | 普通尺寸的电机推荐TB6612驱动芯片，比L298的效率高不易发热（平均电流1.2A左右，功率更大请选L298或其他驱动）；迷你电机用L9110s模块即可，便宜也很小巧。</p></blockquote><p>目前据我了解到的情况，国内外做的自平衡小车其电机驱动用的基本上全是TB6612芯片，本来我也想用该芯片的，不过不知道自己从元器件收纳箱的哪个角落找到了一个之前买的但一直没用的L298N模块，而且加上彭神在<a href="https://www.arduino.cn/">Arduino中文社区</a>发表的第一代<a href="https://www.arduino.cn/thread-6246-1-1.html">自平衡机器人-【蛋黄物语】</a>中用的电机驱动也是L298N，所以本着不浪费的原则，我就索性用L298N作为本平衡机器人的电机驱动。不过由于L298N模块比TB6612模块高很多，所以最后制作完成的机器人也要比传统的自平衡机器人高很多。以下是电机驱动层的高清图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_driver_1.jpg" alt="2wd_balancing_robot_driver_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_driver_2.jpg" alt="2wd_balancing_robot_driver_2"></p></li><li><h4 id="电源管理层"><a href="#电源管理层" class="headerlink" title="电源管理层"></a>电源管理层</h4><p>电源管理层主要负责对锂电池电源的升降压和充放电进行管理，从而保证自平衡机器人各电路模块的电源供应。</p><p>其中电源我用的是电压为3.7V的锂电池，具体参数为20C 1S 1200mah，电量应该足够该自平衡机器人使用，不过由于L298N和Breezeduino的供电为7V左右，所以我从TB上买了一个DC-DC升压可调稳压电源模块用于将锂电池的输入电压升到电路所需的电压，防止因供电不足导致驱动电路和Breezeduino主控不能工作在正常模式下。</p><p>除此之外，为了能用普通的手机充电线给锂电池电源进行充电，我又花了几块钱买了一个带有保护电路的充电模块，只要简单地将锂电池的两根导线焊在模块上并把OUT端连接到前面介绍的升压模块的正负端便可以使用USB口（要保证输出电压为5V，且电流达到1A或以上的）给电池充电了，非常方便。不过要注意的一点是：<strong>在给锂电池进行充电时需要断开模块OUT端上连接的负载！</strong></p><p>最后如图所示，我在升压模块的左侧焊了两个接线端子分别用于将升压后的电源通过导线输送给L298N和Breezeduino，而在右下角我添加了一个单刀双掷拨动开关用于控制锂电池电源的输入，而绿色LED和电阻构成的电路则方便判断当前电源通断的状态，即LED亮表示锂电池已经接入电路， 电源管理层可以正常工作；而LED灭则表示锂电池没有接入电路中，此时可以使用带有Micro USB接头的手机线给锂电池进行充电。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_power_1.jpg" alt="2wd_balancing_robot_power_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_power_2.jpg" alt="2wd_balancing_robot_power_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_power_3.jpg" alt="2wd_balancing_robot_power_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_power_4.jpg" alt="2wd_balancing_robot_power_4"></p></li><li><h4 id="主控处理层"><a href="#主控处理层" class="headerlink" title="主控处理层"></a>主控处理层</h4><p>主控处理层是整个自平衡机器人的控制核心，它包含有Breezeduino微控制器和相关供电电路，主要用于接收传感器和电机编码器的数据并根据PID算法进行数学计算，最后通过控制电机的转向和转速来实现机器人自平衡的最终效果。</p><p>首先详细介绍一下Breezeduino微控制器。如下图所示，Breezeduino板子是使用EAGLE软件进行设计的，EAGLE在国内的知名度并不是很高，用的人估计也不是很多，不过作为一款优秀的跨平台（Windows、GNU\Linux、Mac）PCB设计软件，它在国外开源硬件界还是非常流行的，比如大名鼎鼎的Arduino以及SparkFun公司大部分的硬件都是用EAGLE进行设计的，它简单易学而又足够强大，在画简单的PCB时其性能足以媲美Altium、Cadance SPB以及PADS等传统大型PCB设计软件。好了言归正传，Breezeduino的硬件原理其实很简单，就是实现了一个单片机的最小系统电路并将芯片的其他引脚通过排针的方式引出，便于功能扩展。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_1.png" alt="2wd_balancing_robot_mcu_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_2.png" alt="2wd_balancing_robot_mcu_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_3.jpg" alt="2wd_balancing_robot_mcu_3"></p><p>如下图所示，除了Breezeduino微控制器之外，在本层洞洞板上我还焊了两个接线端子用于为电机编码器提供标准的5V电源（来源于L298N模块的5V输出端口），而板子左上角和右上角分别焊有排母和排针，分别用于连接OLED 12864显示屏的IIC接口和L298N的6个电机控制接口（4个用于控制左右两个电机的转向，2个用于PWM调速）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_4.jpg" alt="2wd_balancing_robot_mcu_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_5.jpg" alt="2wd_balancing_robot_mcu_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_6.jpg" alt="2wd_balancing_robot_mcu_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_mcu_7.jpg" alt="2wd_balancing_robot_mcu_7"></p></li><li><h4 id="外设模块层"><a href="#外设模块层" class="headerlink" title="外设模块层"></a>外设模块层</h4><p>外设模块层主要负责与物理环境进行交互，让机器人可以感知到外面的世界。如下图所示，该层主要包含有IMU传感器、超声波传感器、主从一体蓝牙模块、无源蜂鸣器和LED。</p><p>我用的IMU传感器型号为MPU6500，它是6轴姿态传感器模块（3轴加速度+3轴角速度并带有IIC和SPI接口），可以测量机器人在三个坐标轴上的角速度和加速度分量。对于自平衡机器人来说，系统始终是处于一个不稳定状态的，为了能够使机器人保持动态平衡，就需要IMU传感器不断地读取机器人当前的姿态数据，然后通过主控的实时计算来控制电机，从而保持机器人整个躯体的直立平衡，有关具体的IMU姿态解算和PID控制算法我会在下面的软件部分进行详细的介绍。</p><p>超声波模块用的是目前最流行的SR-04，它集发送和接收功能于一体，可以非常方便地通过编写代码获取外部障碍物距离该模块的距离（在极限测量距离范围之内），主要应用于自平衡机器人的避障以及跟随等功能的实现。</p><p>蓝牙模块采用SPP（Serial Port Profile）协议将蓝牙传输转变为传统的串口通信方式，主要用于该自平衡机器人的无线串口调试以及Android手机遥控。</p><p>蜂鸣器和LED则主要用于表现机器人的某些情感状态，毕竟让机器人发个声、亮个灯要比什么都没有更能体现机器人中“人”的本意，不是吗？</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_peripheral_1.jpg" alt="2wd_balancing_robot_peripheral_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_peripheral_2.jpg" alt="2wd_balancing_robot_peripheral_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/3_2wd_balancing_robot/2wd_balancing_robot_peripheral_3.jpg" alt="2wd_balancing_robot_peripheral_3"></p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>未完待续。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>未完待续。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>未完待续。</p>]]></content>
      
      
      <categories>
          
          <category> 自制机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制机器人系列（0x02）：六足仿生机器人</title>
      <link href="/zh-cn/2018/05/21/diy_robot_2_hexapod_bionic_robot/"/>
      <url>/zh-cn/2018/05/21/diy_robot_2_hexapod_bionic_robot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个六足机器人是我在大四做的，是我大学本科生涯的最后一个个人项目。至于为什么我要做六足机器人，还要从高考完之后说起：当时刚考完的我一直想做一些有意思的事情，直到有一天我发现了一个叫<a href="http://www.diy-bot.net/?project=pvcbot">PVCBOT</a>的网站，里面记录了很多如何使用PVC材料来制作简单机器人的教程，其中有一款叫做<strong>PVC六足机器昆虫（见下图）</strong>的机器人彻底震撼了我，当时看完教程之后我就下定决心也要做一个类似的六足机器人，于是我便从<a href="http://hellorobot.blog.163.com/">懒猫侠</a>前辈那里购买了六足机器人套件（目前应该已经绝版了），并打算按照提供的教程完成自己的六足机器人，但无奈当时的我所掌握的知识太少，什么单片机、串口通信、舵机PWM、电源管理、传感器、舵机控制板等都不懂，特别是机械结构方面我更是一窍不通，所以大一那会儿我还闹出了笑话：用硬纸板做六足机器人的肢体，在安装好舵机并通电测试后，眼睁睁地看着自己的“纸板六足”在舵机的震动下不断地解体……</p><span id="more"></span><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/pvcbot_hexapod.jpg" alt="pvcbot_hexapod"></p><p>经过大一那次失败之后，我决定暂时停止该项目的开发，转而先去学习那些有关嵌入式开发的基础知识，等以后有能力的时候再去独立完成这个六足机器人。很幸运的是在我大学本科即将结束的时候，我已掌握了足够的知识来完成那个曾经困扰我已久的机器人项目，于是我花了几周的时间完成了这个六足机器人，算是了却了自己的一个心愿吧。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>六足仿生机器人是一个拥有十八个关节自由度的迷你多足机器人，它可以实现红外遥控、超声波避障等基本功能。机器人的硬件核心为Arduino Nano，并采用串口通信的方式与24路舵机控制板进行数据交互，从而间接完成对所有舵机旋转角度的精确控制，最终使机器人能够以各种不同的步态进行移动。当然，这个机器人项目的软件依旧开源，具体代码可以从我的GitHub<a href="https://github.com/myyerrol/hexapod-bionic-robot">仓库</a>上获得。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_1.jpg" alt="hexapod_bionic_robot_1"></p><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><p>六足机器人的整个制作过程主要分为机械和电子两部分，其中机械部分我是根据懒猫侠在其博客上发布的<a href="http://hellorobot.blog.163.com/blog/static/185444129201373023256527/">第五版六足肢体装配</a>教程来完成所有拼装的，由于教程中每一步的图片都非常清楚，所以机械这部分没花费我太多的时间和精力。而电子部分则全部是我自己设计的，虽然原理难度不大，但是要根据机器人的机械结构来选择洞洞板的摆放位置并且要完成其上电子元件的布局和焊接工作确实也比较费功夫，而且有的时候如果处理的不好还要返工，不过所幸自己在焊电路前就已经规划好了，所以电路部分的制作也还算顺利。</p><p>在接下来的篇幅中，我会尽可能详细地讲解机器人制作过程中的一些具体步骤和细节，如果你对机器人的原理和最后的效果更感兴趣的话，可以跳过本小节直接阅读<strong>原理</strong>和<strong>效果</strong>章节。</p><h3 id="机械"><a href="#机械" class="headerlink" title="机械"></a>机械</h3><ul><li><h4 id="六足小腿"><a href="#六足小腿" class="headerlink" title="六足小腿"></a>六足小腿</h4><p>如下图所示，六足的小腿部分主要由两片PVC材质的肢体通过叠加而成，而关节部分则使用的是9G金属齿舵机，只要两个自攻螺丝便可将PVC肢体牢牢固定在舵机上，从而保证六足小腿在与地面接触时可以有足够的力量来支撑整个躯体。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_1.jpg" alt="hexapod_bionic_robot_mechanics_1"></p><p>因为是六足机器人，所以同样结构的小腿要再做五个出来。<strong>注意：机器人的躯体每边有三个小腿，左右两两对称，所以在组装的时候肢体和舵机安装的位置是有讲究的，要保证结构对称且不能装反</strong>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_2.jpg" alt="hexapod_bionic_robot_mechanics_2"></p></li><li><h4 id="六足大腿"><a href="#六足大腿" class="headerlink" title="六足大腿"></a>六足大腿</h4><p><strong>关节</strong><br>六足大腿的关节结构比之前介绍过的小腿关节要略微复杂一些，因为大腿的关节包含了机器人足体上下和前后两个维度的运动，所以需要两个舵机来实现。如下图所示，首先我们使用螺丝将一个舵机固定在方形的关节肢体里。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_3.jpg" alt="hexapod_bionic_robot_mechanics_3"></p><p>接着我们要重复以上的安装步骤再制作出六个类似的肢体结构。不过在制作的过程中也要注意机器人左右两侧各三个肢体结构要保持对称。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_4.jpg" alt="hexapod_bionic_robot_mechanics_4"></p><p>然后我们需要将六个舵机分别插入到之前预留好的肢体空槽里，并保证每组的两个舵机在位置上是互相垂直的，即下图中舵机圆形旋转轴的朝向要一前一上。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_5.jpg" alt="hexapod_bionic_robot_mechanics_5"></p><p>接下来安装六足大腿关节的固定片，即将固定片卡到下图中正面那个舵机的圆形旋转轴上。固定片，顾名思义是用来固定的，用在这里主要是防止关节处的两个舵机因足体的震动而彼此之间出现位置上的偏移。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_6.jpg" alt="hexapod_bionic_robot_mechanics_6"></p><p>最后分别使用两条塑料扎带对每组关节进行进一步的加固，其中一条从固定片上方穿过，起到束紧固定片的作用，而另一条则穿过关节侧面的小孔对结构进行固定。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_7.jpg" alt="hexapod_bionic_robot_mechanics_7"></p><p><strong>大腿</strong><br>六足的大腿是由两个PVC材质的长方形连杆组成，从下图中可以很清楚地看到每个连杆的左右两侧均安装有配套的舵盘，它们的作用主要是用于连接六足的小腿关节和大腿关节。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_8.jpg" alt="hexapod_bionic_robot_mechanics_8"></p></li><li><h4 id="六足足体"><a href="#六足足体" class="headerlink" title="六足足体"></a>六足足体</h4><p>如下图所示，使用螺丝将之前已经制作好的六对小腿和大腿肢体对应连接在一起。虽然拧螺丝本身没什么难度，但是在哪个位置用螺丝来固定舵机还是有规定的：<strong>即舵机在被肢体连接固定之前要让其旋转轴回归到原始的中点位置上（旋转范围为0~180°的舵机，其中点位置为90°）</strong>，这样做的目的是让所有的舵机都能够拥有最合适的运动范围，从而防止机器人在移动时出现足体运动不对称的情况。至于如何让舵机回归中点，一种办法是使用现成的舵机调试板，只要移动旋钮便可调节舵机的位置；另一种是编写Arduino程序，让舵机在上电后自动归中。我用的是第二种方法，感觉效果还不错。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_9.jpg" alt="hexapod_bionic_robot_mechanics_9"></p><p>接下来，我们要把六足的足体全部安装到其顶部躯体上。同理，在安装前要确保需要连接固定的舵机已经回归到中点位置，除此之外还要提前规定好躯体的哪一侧是机器人的头部，哪一端是机器人的尾部，不要在安装的时候把足体装反了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_10.jpg" alt="hexapod_bionic_robot_mechanics_10"></p><p>如图所示，我们首先可以找一个稍微有点高度的物品将机器人顶部垫高，然后使用扎带依次将每个足体的三条舵机线捆绑起来，这样不仅看上去更加美观，便于之后的整理和连线，而且也<strong>可以有效阻止舵机线与运动中的足体发生缠绕甚至被扯断等情况的出现</strong>，毕竟自己大学在机器人基地的时候就曾亲身经历过电机线在机械臂移动的过程中被狠狠地扯断的悲剧……</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_mechanics_11.jpg" alt="hexapod_bionic_robot_mechanics_11"></p><p>最后，我们只需要把锂电池用扎带固定在底部躯体的尾部，然后将供电线和充电线分别引出，再把所有已经扎好的舵机线按照顺序塞到躯体当中，并用螺丝将顶部和底部两个躯体拧紧合二为一便大功告成了（由于这部分没有拍照，所以就用文字叙述了orz）。</p></li></ul><h3 id="电子"><a href="#电子" class="headerlink" title="电子"></a>电子</h3><ul><li><h4 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h4><p>下图是机器人的电源管理模块。电源管理模块主要包含电源、降压电路和控制电路等，具体的原理部分请看下面<strong>原理</strong>中的<strong>电源管理</strong>章节。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_1.jpg" alt="hexapod_bionic_robot_electronics_1"></p><p>下图是电源管理模块的背面。为了让焊接后的电路保持整齐、美观，我尽可能采用锡接走线的方式来完成各元件的电气连接，而没办法走线的地方才使用传统的飞线进行连接。尽管锡接走线的优点很明显，但是它的缺点也比较突出：一个是浪费焊锡，另一个就是容易短路，其中短路问题对机器人的影响还是挺严重的，我记得自己之前就有一次不小心把已经上电的电源管理模块随意放在六足机器人的顶部躯体上，令我没想到的是固定躯体的螺丝的头部正好卡在电路背面电源正负极锡接走线的中间，结果可想而知……</p><p>所以，在上电测试之前，大家要先用万能表对焊接过的电路进行短路测试，一定要确保没有多余的焊锡渣残留在电路板上，而且对于使用锡接走线方式焊接的电路板，一定不要让其背面直接与潜在具有导电功能的介质进行接触，可以适当地使用铜柱将板子架高或者用热熔胶把板子背面全都覆盖住，以防止短路问题的发生。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_2.jpg" alt="hexapod_bionic_robot_electronics_2"></p><p>在确保电路不存在任何可能潜在的短路问题后，可像下图所示的那样，对电路模块进行上电测试。测试主要检测电源降压是否达到预期设定的数值，开关的通断逻辑是否正确等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_3.jpg" alt="hexapod_bionic_robot_electronics_3"></p></li><li><h4 id="控制单元"><a href="#控制单元" class="headerlink" title="控制单元"></a>控制单元</h4><p>下图是机器人的控制单元模块。该控制单元模块主要由Arduino Nano控制板、HMC58883L电子罗盘传感器、MPU6050惯性测量传感器（图中的底座上未插入）、HC-SR04超声波传感器和红外接收管等组成，为了方便在模块出现问题时能够对其进行更换，我在洞洞板上焊接了一些棑母底座，这样模块就可以直接插在棑母底座上，拆卸很方便。此外，有关电路原理部分的详细介绍可以阅读下面的<strong>原理</strong>章节。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_4.jpg" alt="hexapod_bionic_robot_electronics_4"></p><p>下图是控制单元模块的背面。跟上面已经介绍过的电源管理模块一样，我使用的依然是锡接走线+飞线的方式对元件进行焊接，由于电气连接比较多，所以焊完之后要对电路进行更加全面和仔细的检查。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_5.jpg" alt="hexapod_bionic_robot_electronics_5"></p><p>如下图所示，由于我的Arduino Nano控制板的USB转串口在之前的寻光小车实验中因短路问题被烧坏了，所以我用的是专门为Arduino最小系统板烧写Bootloader的USBtinyISP编程器来下载程序。经测试，所有模块均能正常工作，那么接下来的工作就只剩下将机器人全部组装好，然后编写和调试代码了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_electronics_6.jpg" alt="hexapod_bionic_robot_electronics_6"></p></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>以下是该仿生六足机器人的硬件系统连接图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_fritzing.png" alt="hexapod_bionic_robot_fritzing"></p><p>由上图可知，六足机器人的硬件系统主要由舵机控制、电源管理、核心主控、数据感知和数据通信共五部分组成，接下来进行详细的介绍：</p><ul><li><h4 id="舵机控制"><a href="#舵机控制" class="headerlink" title="舵机控制"></a>舵机控制</h4><p><strong>金属齿舵机</strong><br>本项目六足机器人所配备的舵机具体型号为YZW Y09G，由于该舵机内部电机减速齿轮组使用金属材质打造，所以其价格上要比常见的辉盛SG90塑料齿舵机贵一些，但是性能却相当出色。该舵机标准输入电压范围为4.8v～6.0v（电压稍大于6v也没问题），扭矩范围在1.3kg/cm～1.6kg/cm之间，经测试，十八个舵机共同作用的扭矩可以基本满足支撑机器人躯体以及锂电池等相关负载的需求。当然，由于定位精度有限，所以舵机会存在控制上的死区问题，我的解决办法主要是通过软件补差的方式来消除这个机械结构上的误差，使机器人能够尽可能准确地到达预定的目标位置。</p><p><strong>舵机控制板</strong><br>舵机控制板顾名思义就是能够用于控制多个舵机的电路板，由于传统通过编写程序让单片机输出多路PWM控制信号对于大部分的机器人爱好者来说比较复杂，所以就有高手们将MCU和相关外围电路封装在一起开发了便于使用的舵机控制板。此外，舵机控制板一般都会带有一个PC端的调试软件，只要在建立串口通信的前提下拖动软件界面上的滑块，便能精确且实时地操控舵机的旋转角度，而且还能将调试好的动作组合在一起形成动作组并下载到舵机控制板的芯片中进行保存，为之后核心主控通过串口对其进行调用奠定基础。本项目六足机器人使用的是懒猫侠早期开发的一款24路舵机控制板，具体使用方法见<a href="http://hellorobot.blog.163.com/blog/static/1854441292013475415881/">24路舵机控制板板使用说明</a>。</p></li><li><h4 id="电源管理-1"><a href="#电源管理-1" class="headerlink" title="电源管理"></a>电源管理</h4><p>电源管理应该算是机器人硬件控制系统里除了核心主控之外最重要的模块了，毕竟传感器坏了机器人还能够四处移动，但是电源部分坏了的话机器人可就只是一个静止的模型了。由于本项目六足机器人采用十八个舵机作为关节执行器，所以尽管9G舵机的耗电量相对标准舵机要小很多，但是十八个舵机加起来所需要的电流大小还是相当惊人的，因此经过一段时间的考量，我最终选择了一款参数为7.4v 850mAh的锂电池组作为机器人的电源，其电能满足六足机器人的动力需求。</p><p>除了锂电池电源之外，从上面的硬件系统连接图中还可以看到有两个降压电路，其中一个降压电路使用L2596 DC-DC模块将一路电源的电压降到标准的5V，用于给Arduino Nano主控制板供电，而另一路使用的是D25XB80大功率整流桥，它拥有标称800V的最大逆向电压和25A的额定前向电流，在锂电池组充满电的情况下（标称7.4v的锂电池组充满电的电压大概在8.4v左右），连接一片D25XB80可以使电压整体降到大概6.9v，经测试给24路舵机控制板和18个舵机供电是没有问题的。</p><p>最后为了方便控制锂电池电源的输入和降压后电源的输出，我并联连接了三个开关，并在并联支路中分别加入了三个LED灯用作电源闭合或断开的显示。关于电源管理的其他内容，大家可以参考一下懒猫侠写的<a href="http://hellorobot.blog.163.com/blog/static/18544412920116255419787/">六足机器人动力的分析  </a>这篇博文。</p></li><li><h4 id="核心主控"><a href="#核心主控" class="headerlink" title="核心主控"></a>核心主控</h4><p>核心主控主要负责分析传感器反馈回来的数据，然后给舵机控制板发出动作指令，间接驱动舵机运行到指定角度。在本项目中我使用的核心主控为Arduino Nano，它体型较小，且拥有非常丰富的开发教程和器件驱动库，很容易上手。</p></li><li><h4 id="数据感知"><a href="#数据感知" class="headerlink" title="数据感知"></a>数据感知</h4><p>数据感知模块主要包括HC-04超声波测距传感器、HMC5883L电子罗盘传感器、MPU6050惯性测量传感器和红外接收管，其中超声波测距传感器用来帮助六足机器人避开其正前方的障碍物，而红外接收管则和常见的迷你红外遥控器一同构成了整个六足机器人的遥控系统，红外接收管能够接收经过38kHz载频二次调制生成的红外信号，并将解码后的数据发送给Arduino Nano主控进行相关处理。HMC58883L和MPU6050这两个传感器主要用于六足机器人的运动感知，通过采集它们的数据并进行简单的融合处理便能得到机器人在空间中的位置关系，从而为之后修正机器人在移动过程中的路径偏差提供数据上的保障。不过由于当时开发时间有限，所以这一部分暂未涉及。</p></li><li><h4 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h4><p>数据通信包括红外通信、串口通信和蓝牙通信三部分。其中，红外通信在上面的<strong>数据感知</strong>部分已经进行过简要的介绍了，即采用NEC的编码格式将数据进行相应的编码或解码，并通过红外线的方式完成遥控指令数据的传输；串口通信则主要用在核心主控和舵机控制板之间，根据舵机控制板所规定的数据格式，主控能够发送指令来控制一个舵机或多个舵机旋转到指定的位置；最后的蓝牙通信可以使PC端上的软件与舵机控制板之间建立起无线连接，方便六足机器人动作的调试。</p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><h4 id="核心类库"><a href="#核心类库" class="headerlink" title="核心类库"></a>核心类库</h4><blockquote><p>hexapod_bionic_robot.h</p></blockquote><p>该头文件定义了<code>HexapodBionicRobot</code>类，里面声明了机器人避障、处理红外编码信息、处理超声波距离、获取红外编码信息、获取超声波距离和移动机器人躯体等核心函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEXAPOD_BIONIC_ROBOT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEXAPOD_BIONIC_ROBOT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;IRremote.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_IR      2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_TX      3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_RX      4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_TRIG    5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_ECHO    6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED     13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_INIT    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_STOP    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_FRONT   2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_BACK    3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_LEFT    4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_RIGHT   5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODE_REMOTE 25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODE_AUTO   26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIX       10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RUNTIME     2400</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIMEOUT     30000</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HexapodBionicRobot</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HexapodBionicRobot</span>(IRrecv *ir_receiver, decode_results *ir_results);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">avoidFrontObstacle</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleInfraredInformation</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleUltrasonicDistance</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveRobotBody</span><span class="params">(<span class="keyword">uint8_t</span> direction, <span class="keyword">uint8_t</span> times)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">getInfraredInformation</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getUltrasonicDistance</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>             mode_flag_;</span><br><span class="line">    <span class="keyword">float</span>           duration_;</span><br><span class="line">    <span class="keyword">float</span>           distance_;</span><br><span class="line">    IRrecv         *ir_receiver_;</span><br><span class="line">    decode_results *ir_results_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HEXAPOD_BIONIC_ROBOT_H</span></span></span><br></pre></td></tr></table></figure><blockquote><p>hexapod_bionic_robot.cpp</p></blockquote><p>该源文件实现了<code>HexapodBionicRobot</code>类里面所有已经声明的函数，其中<code>getInfraredInformation()</code>函数调用了官方的<code>IRremote</code>库，可以实时获取红外遥控器所发送的红外编码，而<code>handleInfraredInformation()</code>函数则会将获取到的红外编码与已经定义好的进行比对，若符合则跳转入相应的代码块进行处理（机器人前后左右的移动，以及遥控模式或自动模式切换等），当然程序也会通过调用<code>avoidFrontObstacle()</code>函数来判断是否在遥控六足机器人移动的过程中，机器人前方的障碍物距离躯体较近，若距离小于事先设定的阈值，机器人便会自动后退或停止以进行避让。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hexapod_bionic_robot.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG 1</span></span><br><span class="line"></span><br><span class="line">HexapodBionicRobot::<span class="built_in">HexapodBionicRobot</span>(IRrecv *ir_recviver,</span><br><span class="line">                                       decode_results *ir_results)</span><br><span class="line">    : <span class="built_in">ir_receiver_</span>(ir_recviver),</span><br><span class="line">      <span class="built_in">ir_results_</span>(ir_results)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(PIN_LED, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(PIN_TRIG, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(PIN_ECHO, INPUT);</span><br><span class="line"></span><br><span class="line">    mode_flag_ = MODE_REMOTE;</span><br><span class="line"></span><br><span class="line">    duration_ = <span class="number">0.0</span>;</span><br><span class="line">    distance_ = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HexapodBionicRobot::avoidFrontObstacle</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> distance = <span class="built_in">getUltrasonicDistance</span>();</span><br><span class="line">    Serial.<span class="built_in">println</span>(distance);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (distance == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">2.5</span>) &#123;</span><br><span class="line">        <span class="built_in">moveRobotBody</span>(DIR_STOP, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">5.0</span>) &#123;</span><br><span class="line">        <span class="built_in">moveRobotBody</span>(DIR_BACK, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HexapodBionicRobot::handleUltrasonicDistance</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> distance = <span class="built_in">getUltrasonicDistance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (distance == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">5.0</span>) &#123;</span><br><span class="line">        <span class="built_in">digitalWrite</span>(PIN_LED, HIGH);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;Warning! Distance is too close!!!&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">digitalWrite</span>(PIN_LED, LOW);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Distance: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(distance);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;cm&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HexapodBionicRobot::handleInfraredInformation</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> distance = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> ir_results = <span class="built_in">getInfraredInformation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ir_results == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;Infrared code: &quot;</span>);</span><br><span class="line">        Serial.<span class="built_in">println</span>(ir_results, HEX);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span> (ir_results == <span class="number">0XFF629D</span>) &#123;</span><br><span class="line">            mode_flag_ = MODE_REMOTE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ir_results == <span class="number">0XFFE21D</span>) &#123;</span><br><span class="line">            mode_flag_ = MODE_AUTO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mode_flag_ == MODE_REMOTE) &#123;</span><br><span class="line">            <span class="built_in">digitalWrite</span>(PIN_LED, LOW);</span><br><span class="line">            <span class="keyword">if</span> (ir_results == <span class="number">0xFF02FD</span>) &#123;</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_FRONT, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ir_results == <span class="number">0xFF9867</span>) &#123;</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_BACK, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ir_results == <span class="number">0xFFE01F</span>) &#123;</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_LEFT, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ir_results == <span class="number">0xFF906f</span>) &#123;</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_RIGHT, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ir_results == <span class="number">0xFFA857</span>) &#123;</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_STOP, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">avoidFrontObstacle</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode_flag_ == MODE_AUTO) &#123;</span><br><span class="line">            <span class="built_in">digitalWrite</span>(PIN_LED, HIGH);</span><br><span class="line">            <span class="keyword">while</span> (ir_results != <span class="number">0XFF629D</span>) &#123;</span><br><span class="line">                ir_results = <span class="built_in">getInfraredInformation</span>();</span><br><span class="line">                <span class="built_in">moveRobotBody</span>(DIR_FRONT, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">delay</span>(RUNTIME);</span><br><span class="line">                <span class="built_in">avoidFrontObstacle</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            mode_flag_ = MODE_REMOTE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HexapodBionicRobot::moveRobotBody</span><span class="params">(<span class="keyword">uint8_t</span> direction, <span class="keyword">uint8_t</span> times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> string_direction[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> string_times[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">itoa</span>(direction, string_direction, RADIX);</span><br><span class="line">    <span class="built_in">itoa</span>(times, string_times, RADIX);</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(string_direction);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(string_times);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">HexapodBionicRobot::getInfraredInformation</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ir_receiver_-&gt;<span class="built_in">decode</span>(ir_results_)) &#123;</span><br><span class="line">        ir_receiver_-&gt;<span class="built_in">resume</span>();</span><br><span class="line">        <span class="keyword">return</span> ir_results_-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">HexapodBionicRobot::getUltrasonicDistance</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    duration_ = <span class="number">0.0</span>;</span><br><span class="line">    distance_ = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">digitalWrite</span>(PIN_TRIG, LOW);</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(PIN_TRIG, HIGH);</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(PIN_TRIG, LOW);</span><br><span class="line"></span><br><span class="line">    duration_ = <span class="built_in">pulseIn</span>(PIN_ECHO, HIGH, TIMEOUT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (duration_ == <span class="number">0.0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        distance_ = duration_ * <span class="number">0.017</span>;</span><br><span class="line">        <span class="keyword">return</span> distance_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><blockquote><p>hexapod_bionic_robot_test.ino</p></blockquote><p>该测试代码的原理非常简单，首先<code>setup()</code>函数会以115200的波特率初始化并打开串口，然后Arduino Nano会向串口发送<code>#1G2C</code>（1号动作组循环运行2次）让六足机器人站立起来，紧接着程序会使能红外接收管，让其可以接收遥控器发送的红外编码。等初始化结束后，主程序会跳转到<code>loop()</code>函数执行<code>HexapodBionicRobot</code>类对象的<code>handleInfraredInformation（）</code>函数完成红外遥控以及超声波避障等功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;IRremote.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hexapod_bionic_robot.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">IRrecv         <span class="title">g_ir_receiver</span><span class="params">(PIN_IR)</span></span>;</span><br><span class="line">decode_results g_ir_results;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;#1G2C&quot;</span>);</span><br><span class="line">    g_ir_receiver.<span class="built_in">enableIRIn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">HexapodBionicRobot <span class="title">hexapod_bionic_robot</span><span class="params">(&amp;g_ir_receiver, &amp;g_ir_results)</span></span>;</span><br><span class="line">    hexapod_bionic_robot.<span class="built_in">handleInfraredInformation</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>以下是制作完成后的成果图和测试视频：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_2.jpg" alt="hexapod_bionic_robot_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_3.jpg" alt="hexapod_bionic_robot_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_4.jpg" alt="hexapod_bionic_robot_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_5.jpg" alt="hexapod_bionic_robot_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/2_hexapod_bionic_robot/hexapod_bionic_robot_6.jpg" alt="hexapod_bionic_robot_6"></p><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=77588129&bvid=BV1oJ411Q7Us&cid=167187624&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回想起当初，自己就是看了<a href="https://www.guokr.com/article/5075/">六足机器昆虫-你的下一个足式移动机器人</a>这篇教程才开始迷上六足机器人的，没想到大四快毕业的时候自己能有机会完成这个属于自己的六足仿生机器人，说实话当看到六足机器人第一次从团身状态下依靠自己的力量站立起来时，我的内心是无比激动的，尽管由于舵机的力矩偏小导致机器人的足体在支撑地面时会有轻微吱吱的抖动，但是得益于十八个关节自由度，六足机器人可以做出很多机器人都无法做出的复杂动作，我想这也许就是多足机器人的魅力所在吧！</p><p>不过话说回来，对于机器人初学者来说，制作一个六足机器人的难度相较于轮式机器人还是非常大的，而且投入的时间和资金成本也比较多。如果你的动手能力和技术水平足够强，且跟我一样认为六足机器人非常酷的话，你也可以尝试去做一台属于自己的六足机器人并为它扩展更多有意思的功能（比如我加入了MPU6050和HMC5883L模块来做机器人运动感知与矫正，可惜因时间有限没能实现）。最后我总结一下能成功自制六足机器人所需要的三个关键因素：<strong>1、从始至终发自内心的热爱</strong>；2、拥有机械、电子和软件方面的专业知识；3、为实现最终目标而坚持不懈的努力！</p>]]></content>
      
      
      <categories>
          
          <category> 自制机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制机器人系列（0x01）：简单轮式机器人</title>
      <link href="/zh-cn/2018/05/15/diy_robot_1_simple_wheeled_robot/"/>
      <url>/zh-cn/2018/05/15/diy_robot_1_simple_wheeled_robot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>制作这个项目的起因是大一下学期那会儿我通过学校图书馆里的《无线电》杂志开始接触Raspberry Pi卡片式计算机和Arduino微控制器，其中Raspberry Pi给当初什么都不懂的我留下了非常深刻的印象：<strong>一个信用卡大小的板子竟然可以跑带有图形界面的GNU/Linux操作系统</strong>。在强烈探索欲的驱使下，我从网上购买了两块Element14的Raspberry Pi一代Model B（现在早已经绝版了）板子以及其他相关配件，开始在Raspbian系统上自学Python和各种传感器的使用方法，后来为了检验一下自己的学习成果，于是我便花费几周的时间做了这个简单的轮式机器人。虽然它涉及的原理并不复杂，但是对于那会儿刚开始接触嵌入式的我来说，能成功搭建一个完整的机器人系统还是挺有挑战性的。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>简单轮式机器人其实是一个比较传统的入门级智能小车，它拥有蓝牙远程遥控、超声波避障、红外边缘检测和红外巡线（未完成）等功能，可以完成一些有趣的小实验。此外，简单轮式机器人的软件是开源的，具体代码可以从我的GitHub<a href="https://github.com/myyerrol/simple-wheeled-robot">仓库</a>上获得。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_1.jpg" alt="simple_wheeled_robot_1"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>以下是该简单轮式机器人的硬件系统连接图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_fritzing.png" alt="simple_wheeled_robot_fritzing"></p><ul><li><h4 id="核心主控"><a href="#核心主控" class="headerlink" title="核心主控"></a>核心主控</h4><p>系统的硬件核心主控分别为Arduino和Raspberry Pi。其中Arduino主要负责接收红外光电测距模块的数据，并控制装有超声波模块的单轴舵机云台的旋转；而Raspberry Pi则可通过电机驱动模块来完成对四个直流减速电机转向和转速的控制，此外它还能接收超声波模块和从Arduino串口发送上来的红外光电测距模块的数据来判断当前机器人的前方和两侧是否遇到障碍物，若机器人与障碍物之间的距离小于一个特定的阈值，则Arduino和Raspberry Pi会分别改变LED的颜色并启动蜂鸣器来发出警报。</p><p>当然，肯定会有人问：<strong>为什么我不能仅用Raspberry Pi来作为机器人的核心主控，非要再用一个Arduino呢？</strong>其实根据本项目的实际需求，确实只用一个Raspberry Pi就够了，不过对于我来说使用Arduino主要出于以下三个原因的考虑：</p><ul><li><p>Raspberry Pi一代Model B板子的GPIO引脚数量只有26个，就算复用一些带有特殊功能的引脚，引脚资源依旧比较紧张。</p></li><li><p>Raspberry Pi官方提供的GPIO库虽然含有PWM函数，但是实际在控制舵机的时候可能是由于软件模拟的PWM方波还不够稳定，导致舵机抖动得比较厉害。</p></li><li><p>可以学习Python的串口编程。</p></li></ul><p>因此，综合以上三个方面我选择了Arduino和Raspberry Pi双核心主控的系统架构。</p></li><li><h4 id="外部电源"><a href="#外部电源" class="headerlink" title="外部电源"></a>外部电源</h4><p>因为时间比较紧张（那会儿快临近期末考试了），所以我没有在电源管理上花费太多的功夫。对于Arduino，我使用的是能装下6个1.5V干电池的的电池盒给其供电，而对于Raspberry Pi耗电量较大的需求，我是从大学舍友那借了一个充电宝来解决问题的，不过虽然供电可以了，但是由于充电宝的重量比较大，导致四个轮子受压偏大，使得遥控的精准度受到了一定的影响。</p></li><li><h4 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h4><p>机器人的电机驱动部分采用传统的L293D芯片，它是一款单片集成的高电压、高电流、四通道电机驱动芯片，其内部包含有两个双极型H桥电路，可通过设置IN1和IN2输入引脚的逻辑电平来控制电机的旋转方向，而EN使能引脚可连接到一路PWM上，通过调整PWM方波的占空比便可调整电机的转速。</p></li><li><h4 id="数据感知"><a href="#数据感知" class="headerlink" title="数据感知"></a>数据感知</h4><p>为了能实现最基本的避障功能，我们需要为机器人配备有一些传感器。这里我使用的传感器为HC-SR04超声波测距模块和红外光电避障模块，其中红外光电避障模块具有一对红外线发射与接收管，运行时发射管会发射出一定频率的红外线，当检测方向遇到障碍物后，红外线会反射回来被接收管接收，经过比较电路处理之后，信号输出接口会输出一个低电平信号，这样只要在程序中对该接口的电平进行判断便能得知机器人是否距离障碍物比较近。</p><p>与红外光电避障模块的工作原理类似，超声波模块能够向空中发射超声波信号，当其检测到反射回来的信号后，只需将超声波从发射到接收所用的时间乘上声速再除以二便能得到机器人和障碍物之间的距离，从而为之后的机器人避障做好准备。</p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><h4 id="Raspberry-Pi库代码"><a href="#Raspberry-Pi库代码" class="headerlink" title="Raspberry Pi库代码"></a>Raspberry Pi库代码</h4><blockquote><p>simple_wheeled_robot_lib.py</p></blockquote><p>该库代码实现了GPIO引脚初始化函数、LED灯设置函数、蜂鸣器设置函数、电机控制函数、超声波测距函数和LCD1602显示函数，其中LCD1602显示函数调用了Python的SMBUS库来完成IIC数据通信，从而能将字符串显示在屏幕上（注意：SMBUS和IIC协议之间是存在区别的，但在Raspberry Pi上两者概念基本等同）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> smbus</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> gpio</span><br><span class="line"></span><br><span class="line">motor_run_left        = <span class="number">17</span></span><br><span class="line">motor_run_right       = <span class="number">10</span></span><br><span class="line">motor_direction_left  = <span class="number">4</span></span><br><span class="line">motor_direction_right = <span class="number">25</span></span><br><span class="line">led_left              = <span class="number">7</span></span><br><span class="line">led_right             = <span class="number">8</span></span><br><span class="line">ultrasonic_trig       = <span class="number">23</span></span><br><span class="line">ultrasonic_echo       = <span class="number">24</span></span><br><span class="line">servo                 = <span class="number">11</span></span><br><span class="line">buzzer                = <span class="number">18</span></span><br><span class="line">lcd_address           = <span class="number">0x27</span></span><br><span class="line">data_bus = smbus.SMBus(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWheeledRobot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        gpio.setmode(gpio.BCM)</span><br><span class="line">        gpio.setup(motor_run_left, gpio.OUT)</span><br><span class="line">        gpio.setup(motor_run_right, gpio.OUT)</span><br><span class="line">        gpio.setup(motor_direction_left, gpio.OUT)</span><br><span class="line">        gpio.setup(motor_direction_right, gpio.OUT)</span><br><span class="line">        gpio.setup(led_left, gpio.OUT)</span><br><span class="line">        gpio.setup(led_right, gpio.OUT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_motors</span>(<span class="params">self, run_left, direction_left, run_right, direction_right</span>):</span></span><br><span class="line">        gpio.output(motor_run_left, run_left)</span><br><span class="line">        gpio.output(motor_run_right, run_right)</span><br><span class="line">        gpio.output(motor_direction_left, direction_left)</span><br><span class="line">        gpio.output(motor_direction_right, direction_right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_led_left</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        gpio.output(led_left, state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_led_right</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        gpio.output(led_right, state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_forward</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            self.set_led_left(<span class="number">1</span>)</span><br><span class="line">            self.set_led_right(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_reverse</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">            self.set_led_left(<span class="number">0</span>)</span><br><span class="line">            self.set_led_right(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_left</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            self.set_led_left(<span class="number">1</span>)</span><br><span class="line">            self.set_led_right(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_right</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            self.set_led_left(<span class="number">0</span>)</span><br><span class="line">            self.set_led_right(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_pivot_left</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            self.set_led_left(<span class="number">1</span>)</span><br><span class="line">            self.set_led_right(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_pivot_right</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        <span class="keyword">if</span> seconds == <span class="number">0</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">            self.set_led_left(<span class="number">0</span>)</span><br><span class="line">            self.set_led_right(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.set_motors(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">            time.sleep(seconds)</span><br><span class="line">            gpio.cleanup()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.set_motors(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.set_led_left(<span class="number">0</span>)</span><br><span class="line">        self.set_led_right(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buzzing</span>(<span class="params">self</span>):</span></span><br><span class="line">        gpio.setup(buzzer, gpio.OUT)</span><br><span class="line">        gpio.output(buzzer, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            gpio.output(buzzer, <span class="literal">False</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            gpio.output(buzzer, <span class="literal">True</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_distance</span>(<span class="params">self</span>):</span></span><br><span class="line">        gpio.setmode(gpio.BCM)</span><br><span class="line">        gpio.setup(ultrasonic_trig, gpio.OUT)</span><br><span class="line">        gpio.setup(ultrasonic_echo, gpio.IN)</span><br><span class="line">        gpio.output(ultrasonic_trig, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">while</span> gpio.<span class="built_in">input</span>(ultrasonic_echo) == <span class="number">0</span>:</span><br><span class="line">            start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> gpio.<span class="built_in">input</span>(ultrasonic_echo) == <span class="number">1</span>:</span><br><span class="line">            stop_time = time.time()</span><br><span class="line">        duration = stop_time - start_time</span><br><span class="line">        distance = (duration * <span class="number">34300</span>) / <span class="number">2</span></span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_command</span>(<span class="params">self, command</span>):</span></span><br><span class="line">        buf = command &amp; <span class="number">0xF0</span></span><br><span class="line">        buf |= <span class="number">0x04</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        time.sleep(<span class="number">0.002</span>)</span><br><span class="line">        buf &amp;= <span class="number">0xFB</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        buf = (command &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">        buf |= <span class="number">0x04</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        time.sleep(<span class="number">0.002</span>)</span><br><span class="line">        buf &amp;= <span class="number">0xFB</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        buf = data &amp; <span class="number">0xF0</span></span><br><span class="line">        buf |= <span class="number">0x05</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        time.sleep(<span class="number">0.002</span>)</span><br><span class="line">        buf &amp;= <span class="number">0xFB</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        buf = (data &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">        buf |= <span class="number">0x05</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line">        time.sleep(<span class="number">0.002</span>)</span><br><span class="line">        buf &amp;= <span class="number">0xFB</span></span><br><span class="line">        data_bus.write_byte(lcd_address, buf)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_lcd</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.send_command(<span class="number">0x33</span>)</span><br><span class="line">            time.sleep(<span class="number">0.005</span>)</span><br><span class="line">            self.send_command(<span class="number">0x32</span>)</span><br><span class="line">            time.sleep(<span class="number">0.005</span>)</span><br><span class="line">            self.send_command(<span class="number">0x28</span>)</span><br><span class="line">            time.sleep(<span class="number">0.005</span>)</span><br><span class="line">            self.send_command(<span class="number">0x0C</span>)</span><br><span class="line">            time.sleep(<span class="number">0.005</span>)</span><br><span class="line">            self.send_command(<span class="number">0x01</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_lcd</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_command(<span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_lcd</span>(<span class="params">self, x, y, lcd_string</span>):</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">15</span>:</span><br><span class="line">            x = <span class="number">15</span></span><br><span class="line">        <span class="keyword">if</span> y &lt; <span class="number">0</span>:</span><br><span class="line">            y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">1</span>:</span><br><span class="line">            y = <span class="number">1</span></span><br><span class="line">        address = <span class="number">0x80</span> + <span class="number">0x40</span> * y + x</span><br><span class="line">        self.send_command(address)</span><br><span class="line">        <span class="keyword">for</span> lcd_char <span class="keyword">in</span> lcd_string:</span><br><span class="line">            self.send_data(<span class="built_in">ord</span>(lcd_char))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_servo_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        servo_range = <span class="number">13</span></span><br><span class="line">        gpio.setmode(gpio.BCM)</span><br><span class="line">        gpio.setup(servo, gpio.OUT)</span><br><span class="line">        pwm = gpio.PWM(servo, <span class="number">100</span>)</span><br><span class="line">        pwm.start(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> servo_range &lt;= <span class="number">23</span>:</span><br><span class="line">            pwm.ChangeDutyCycle(servo_range)</span><br><span class="line">            servo_range += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        pwm.stop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_servo_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        servo_range = <span class="number">13</span></span><br><span class="line">        gpio.setmode(gpio.BCM)</span><br><span class="line">        gpio.setup(servo, gpio.OUT)</span><br><span class="line">        pwm = gpio.PWM(servo, <span class="number">100</span>)</span><br><span class="line">        pwm.start(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> servo_range &gt;= <span class="number">0</span>:</span><br><span class="line">            pwm.ChangeDutyCycle(servo_range)</span><br><span class="line">            servo_range -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        pwm.stop()</span><br></pre></td></tr></table></figure></li><li><h4 id="Raspberry-Pi测试代码1"><a href="#Raspberry-Pi测试代码1" class="headerlink" title="Raspberry Pi测试代码1"></a>Raspberry Pi测试代码1</h4><blockquote><p>simple_wheeled_robot_run_1.py</p></blockquote><p>该代码调用了上面自己编写的机器人代码库，主要实现了超声波距离检测函数和键盘遥控函数，其中键盘遥控函数里面又根据所按按键的不同调用并组合上面代码库中的不同函数来完成某些特定的功能（比如机器人遇到障碍物后首先会发出警报，然后再进行相应的规避运动等）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> RPi.gpio <span class="keyword">as</span> gpio</span><br><span class="line"><span class="keyword">from</span> simple_wheeled_robot_lib <span class="keyword">import</span> SimpleWheeledRobot</span><br><span class="line"></span><br><span class="line">simple_wheeled_robot = SimpleWheeledRobot()</span><br><span class="line">simple_wheeled_robot.initialize_lcd()</span><br><span class="line">port = <span class="string">&quot;/dev/ttyUSB0&quot;</span></span><br><span class="line">serial_to_arduino = serial.Serial(port, <span class="number">9600</span>)</span><br><span class="line">serial_from_arduino = serial.Serial(port, <span class="number">9600</span>)</span><br><span class="line">serial_from_arduino.flushInput()</span><br><span class="line">serial_to_arduino.write(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detecte_distance</span>():</span></span><br><span class="line">    distance = simple_wheeled_robot.get_distance()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> distance &gt;= <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># Light up the green led.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> distance &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># Light up the yellow led.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> distance &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># Light up the red led.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_reverse(<span class="number">2</span>)</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_pivot_right(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check the distance between wall and car&#x27;s both sides.</span></span><br><span class="line">    serial_to_arduino.write(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">    data_from_arduino = serial_from_arduino.readline()</span><br><span class="line">    data_from_arduino_int = <span class="built_in">int</span>(data_from_arduino)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Car is too close to the left wall.</span></span><br><span class="line">    <span class="keyword">if</span> data_from_arduino_int == 01:</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_right(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Car is too close to the right wall.</span></span><br><span class="line">    <span class="keyword">elif</span> data_from_arduino_int == <span class="number">10</span>:</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_left(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_key</span>(<span class="params">event</span>):</span></span><br><span class="line">    simple_wheeled_robot.__init__()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Key&#x27;</span>, event.char</span><br><span class="line">    key_press = event.char</span><br><span class="line">    seconds = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_press.lower() == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_forward(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_reverse(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_left(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_right(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_pivot_left(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_pivot_right(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        <span class="comment"># Move the servo in forward directory.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        <span class="comment"># Light up the logo.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        <span class="comment"># Turn off the logo.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;j&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        <span class="comment"># Move the servo in reverse directory.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">        <span class="comment"># Enter the random run mode.</span></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            x = random.randrange(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">                    detecte_distance()</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_forward(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">                    detecte_distance()</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_left(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">                    detecte_distance()</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_right(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">                    detecte_distance()</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_pivot_left(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">                    detecte_distance()</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_pivot_right(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">            data_from_arduino = serial_from_arduino.readline()</span><br><span class="line">            data_from_arduino_int = <span class="built_in">int</span>(data_from_arduino)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> data_from_arduino_int == <span class="number">1111</span>:</span><br><span class="line">                simple_wheeled_robot.__init__()</span><br><span class="line">                simple_wheeled_robot.go_forward(<span class="number">0.05</span>)</span><br><span class="line">                <span class="keyword">if</span> data_from_arduino_int == <span class="number">1111</span>:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.stop()</span><br><span class="line">                <span class="keyword">elif</span> data_from_arduino_int == <span class="number">0000</span>:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_forward(<span class="number">0.05</span>)</span><br><span class="line">                <span class="keyword">elif</span> data_from_arduino_int == 0100:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_left(<span class="number">0.05</span>)</span><br><span class="line">                <span class="keyword">elif</span> data_from_arduino_int == <span class="number">1000</span> <span class="keyword">or</span> \</span><br><span class="line">                     data_from_arduino_int == <span class="number">1100</span>:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_left(<span class="number">0.08</span>)</span><br><span class="line">                <span class="keyword">elif</span> data_from_arduino_int == 0010:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_right(<span class="number">0.05</span>)</span><br><span class="line">                <span class="keyword">elif</span> data_from_arduino_int == 0001 <span class="keyword">or</span> \</span><br><span class="line">                     data_from_arduino_int == 0011:</span><br><span class="line">                    simple_wheeled_robot.__init__()</span><br><span class="line">                    simple_wheeled_robot.go_right(<span class="number">0.08</span>)</span><br><span class="line"></span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        gpio.cleanup()</span><br><span class="line">        simple_wheeled_robot.print_lcd(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;UltrasonicWare&#x27;</span>)</span><br><span class="line">        simple_wheeled_robot.print_lcd(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Distance:%.lf CM&#x27;</span> %</span><br><span class="line">                                              simple_wheeled_robot.get_distance())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    distance = simple_wheeled_robot.get_distance()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> distance &gt;= <span class="number">20</span>:</span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> distance &gt;= <span class="number">10</span>:</span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> distance &lt; <span class="number">10</span>:</span><br><span class="line">        serial_to_arduino.write(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_reverse(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    serial_to_arduino.write(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">    data_from_arduino = serial_from_arduino.readline()</span><br><span class="line">    data_from_arduino_int = <span class="built_in">int</span>(data_from_arduino)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data_from_arduino_int == <span class="number">1</span>:</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_right(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> data_from_arduino_int == <span class="number">10</span>:</span><br><span class="line">        simple_wheeled_robot.buzzing()</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_left(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    command = tk.Tk()</span><br><span class="line">    command.bind(<span class="string">&#x27;&lt;KeyPress&gt;&#x27;</span>, input_key)</span><br><span class="line">    command.mainloop()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    gpio.cleanup()</span><br></pre></td></tr></table></figure></li><li><h4 id="Raspberry-Pi测试代码2"><a href="#Raspberry-Pi测试代码2" class="headerlink" title="Raspberry Pi测试代码2"></a>Raspberry Pi测试代码2</h4><blockquote><p>simple_wheeled_robot_run_2.py</p></blockquote><p>该代码实现的功能比较简单，仅测试了机器人的电机遥控和超声波避障两个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> gpio</span><br><span class="line"><span class="keyword">from</span> simple_wheeled_robot_lib <span class="keyword">import</span> SimpleWheeledRobot</span><br><span class="line"></span><br><span class="line">simple_wheeled_robot = SimpleWheeledRobot()</span><br><span class="line">simple_wheeled_robot.initialize_lcd()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_key</span>(<span class="params">event</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Key&#x27;</span>, event.char</span><br><span class="line">    key_press = event.char</span><br><span class="line">    seconds = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_press.lower() == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_forward(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_reverse(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_left(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_right(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_pivot_left(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.go_pivot_right(seconds)</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.move_servo_left()</span><br><span class="line">    <span class="keyword">elif</span> key_press.lower() == <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">        simple_wheeled_robot.move_servo_right()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    distance = simple_wheeled_robot.get_distance()</span><br><span class="line">    simple_wheeled_robot.print_lcd(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;UltrasonicWare&#x27;</span>)</span><br><span class="line">    simple_wheeled_robot.print_lcd(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Distance:%.lf CM&#x27;</span> % distance)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Distance: %.1f CM&quot;</span> % distance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> distance &lt; <span class="number">10</span>:</span><br><span class="line">        simple_wheeled_robot.__init__()</span><br><span class="line">        simple_wheeled_robot.go_reverse(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    command = tk.Tk()</span><br><span class="line">    command.bind(<span class="string">&#x27;&lt;KeyPress&gt;&#x27;</span>, input_key)</span><br><span class="line">    command.mainloop()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    gpio.cleanup()</span><br></pre></td></tr></table></figure></li><li><h4 id="Raspberry-Pi测试代码3"><a href="#Raspberry-Pi测试代码3" class="headerlink" title="Raspberry Pi测试代码3"></a>Raspberry Pi测试代码3</h4><blockquote><p>simple_wheeled_robot_run_3.py</p></blockquote><p>该代码实现的功能与上面的测试代码2类似，只不过图形界面本代码里使用的是<a href="https://www.pygame.org/">Pygame</a>而不是之前的<a href="https://docs.python.org/2/library/tkinter.html">Tkinter</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> gpio</span><br><span class="line"><span class="keyword">from</span> simple_wheeled_robot_lib <span class="keyword">import</span> SimpleWheeledRobot</span><br><span class="line"></span><br><span class="line">simple_wheeled_robot = SimpleWheeledRobot()</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">800</span>, <span class="number">800</span>))</span><br><span class="line">font = pygame.font.SysFont(<span class="string">&quot;arial&quot;</span>, <span class="number">64</span>)</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;SimpleWheeledRobot&#x27;</span>)</span><br><span class="line">pygame.mouse.set_visible(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    gpio.cleanup()</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            time = <span class="number">0.03</span></span><br><span class="line">        <span class="keyword">if</span> event.key == K_UP <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_forward(time)</span><br><span class="line">        <span class="keyword">elif</span> event.key == K_DOWN <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_reverse(time)</span><br><span class="line">        <span class="keyword">elif</span> event.key == K_LEFT <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_left(time)</span><br><span class="line">        <span class="keyword">elif</span> event.key == K_RIGHT <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;d&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_right(time)</span><br><span class="line">        <span class="keyword">elif</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_pivot_left(time)</span><br><span class="line">        <span class="keyword">elif</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>):</span><br><span class="line">            simple_wheeled_robot.go_pivot_right(time)</span><br></pre></td></tr></table></figure></li><li><h4 id="Arduino测试代码"><a href="#Arduino测试代码" class="headerlink" title="Arduino测试代码"></a>Arduino测试代码</h4><blockquote><p>simple_wheeled_robot.ino</p></blockquote><p>该代码从逻辑上比较好理解，在<code>setup()</code>函数初始化引脚的模式和串口波特率后，主函数<code>loop()</code>会不断地从串口中读取字符数据，并根据字符的不同进行不同的处理工作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>      distance;</span><br><span class="line"><span class="keyword">int</span>      distance_left;</span><br><span class="line"><span class="keyword">int</span>      distance_right;</span><br><span class="line"><span class="keyword">int</span>      motor_value;</span><br><span class="line"><span class="keyword">int</span>      motor_value_a;</span><br><span class="line"><span class="keyword">int</span>      motor_value_b;</span><br><span class="line"><span class="keyword">int</span>      motor_value_c;</span><br><span class="line"><span class="keyword">int</span>      motor_value_d;</span><br><span class="line"><span class="keyword">int</span>      motor_a               = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span>      motor_b               = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span>      motor_c               = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span>      motor_d               = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span>      servo                 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span>      led                   = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>      led_red               = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span>      led_yellow            = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span>      led_green             = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span>      distance_sensor_left  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>      distance_sensor_right = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span>     data;</span><br><span class="line"><span class="keyword">uint16_t</span> angle                 = <span class="number">1500</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Set serial&#x27;s baud rate.</span></span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">    <span class="built_in">pinMode</span>(motor_a, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(motor_b, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(motor_c, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(motor_d, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(servo, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(led , OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(led_red, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(led_yellow, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(led_green, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(distance_sensor_left, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(distance_sensor_right, INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A0, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A1, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A2, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A3, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A4, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(A5, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Serial.<span class="built_in">available</span>()) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(Serial.<span class="built_in">read</span>()) &#123;</span><br><span class="line">            <span class="comment">// Light up the logo.</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: &#123;</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A0, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A1, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A2, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A3, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A4, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A5, HIGH);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Turn off the logo.</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>: &#123;</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A0, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A1, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A2, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A3, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A4, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(A5, LOW);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Move the servo in forward directory.</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span> : &#123;</span><br><span class="line">                angle += <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">if</span> (angle &gt; <span class="number">2500</span>) &#123;</span><br><span class="line">                    angle = <span class="number">2500</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Move the servo in reverse directory.</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span> : &#123;</span><br><span class="line">                angle -= <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">if</span> (angle &lt; <span class="number">500</span>) &#123;</span><br><span class="line">                    angle = <span class="number">500</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: &#123;</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led, HIGH);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>: &#123;</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led, LOW);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// When the distance between objects and car is far enough,</span></span><br><span class="line">                <span class="comment">// light the green led.</span></span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_green, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_yellow, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_red, LOW);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// When the distance between objects and car is near enough,</span></span><br><span class="line">                <span class="comment">// light the yellow led.</span></span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_yellow, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_green, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_red, LOW);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// When the distance between objects and car is very near,</span></span><br><span class="line">                <span class="comment">// light the red led.</span></span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_red, HIGH);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_yellow, LOW);</span><br><span class="line">                <span class="built_in">digitalWrite</span>(led_green, LOW);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// Return distance sensor&#x27;s state between objects and car.</span></span><br><span class="line">                distance_left = <span class="built_in">digitalRead</span>(distance_sensor_left);</span><br><span class="line">                distance_right = <span class="built_in">digitalRead</span>(distance_sensor_right);</span><br><span class="line">                distance = distance_left * <span class="number">10</span> + distance_right ;</span><br><span class="line">                Serial.<span class="built_in">println</span>(distance, DEC);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>: &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// Return motor&#x27;s state to raspberry pi.</span></span><br><span class="line">                    motor_value_a = <span class="built_in">digitalRead</span>(motor_a);</span><br><span class="line">                    motor_value_b = <span class="built_in">digitalRead</span>(motor_b);</span><br><span class="line">                    motor_value_c = <span class="built_in">digitalRead</span>(motor_c);</span><br><span class="line">                    motor_value_d = <span class="built_in">digitalRead</span>(motor_d);</span><br><span class="line">                    motor_value = motor_value_a * <span class="number">1000</span> + motor_value_b * <span class="number">100</span> +</span><br><span class="line">                        motor_value_c * <span class="number">10</span> + motor_value_d;</span><br><span class="line">                    Serial.<span class="built_in">println</span>(motor_value, DEC);</span><br><span class="line">                    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">                    data = Serial.<span class="built_in">read</span>();</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="string">&#x27;l&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Delay enough time for servo to move position.</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(servo, HIGH);</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(angle);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(servo, LOW);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>以下是制作完成后的成果图和测试视频：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_2.jpg" alt="simple_wheeled_robot_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_3.jpg" alt="simple_wheeled_robot_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_4.jpg" alt="simple_wheeled_robot_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/diy_robots/1_simple_wheeled_robot/simple_wheeled_robot_5.jpg" alt="simple_wheeled_robot_5"></p><p style="position:relative; padding-bottom:60%;">  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=77580434&bvid=BV19J411Q79D&cid=167189168&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height:100%; width:100%;">  </iframe></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个简单轮式机器人是大一那会儿我对自己课外所学知识的一个应用。虽然现在回过头再来看自己当初做的项目，感觉技术原理非常简单，远没有我之后研究的<a href="http://www.ros.org/">ROS</a>和<a href="http://moveit.ros.org/">MoveIt!</a>那么复杂，但是通过整个制作过程，我学会了如何根据项目需求去网上购买相关的材料，如何将主控等硬件设备安装在机器人机械结构最合理的位置上，如何使用IDE编写Arduino程序，如何在Raspberry Pi上使用Python语言来读取硬件数据并控制硬件，如何实现简单的串口通信等等。我一直认为兴趣是最好的老师，当你开始接触一个全新的领域时，兴趣可以成为你克服各种困难并鼓舞你前进的强大动力。当然，除了兴趣，更重要的是<strong>亲自动手实践</strong>，书上的东西讲得再好也是别人的，不是你的，就算重复造轮子也有着其无法替代的重要意义，<strong>因为并不是每个人都能造得出轮子</strong>，通过学习并实践前人所学习过的知识，你会收获别人不会有的宝贵经验！</p><p>最后，个人认为智能小车对于广大刚开始接触机器人的初学者来说确实是一个非常好的练手项目，你可以根据自己的喜好和技术水平的高低来定制属于你自己的智能小车，实现你想要的各种功能。总之，对于我来说，通过本次项目我开始真正喜欢上了嵌入式开发并逐渐走上了专业化的道路，每个人都应该有自己的梦想，那这个简单轮式机器人就是我梦想的起点，激励着我不断向前！当然，也希望大家能在制作机器人的道路上玩得开心并有所收获！</p>]]></content>
      
      
      <categories>
          
          <category> 自制机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> Arduino </tag>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制机器人系列（0x00）：总纲</title>
      <link href="/zh-cn/2018/05/13/diy_robot_0_superclass/"/>
      <url>/zh-cn/2018/05/13/diy_robot_0_superclass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我相信很多男生都非常喜欢机器人，其中很大一部分因素是受动漫或影视内容（比如像《铁臂阿童木》、《机器人总动员》和《终结者》等）的影响，而我对机器人的喜爱却来源于第一次进行DIY电子制作时的难忘经历。我记得那时高考已经考完有一段时间了，有一天我在网上闲逛，无意间发现了一个叫<a href="http://www.diy-bot.net/?project=pvcbot">PVCBOT</a>的网站，里面记录了很多有关如何使用PVC材料来制作简单机器人的教程，我越看越入迷于是就买了几个套件回家进行制作，尽管制作的过程因为自己不懂如何焊接（当时的确如此）而走了很多弯路，但是当最后机器人能够移动时，我的内心感受到了前所未有的快乐！也许就是这种对机器人的喜爱让我在之后的大学生活中不断尝试制作更复杂的机器人，甚至有机会加入机器人基地并亲身参与到高级智能机器人的研发工作当中去。</p><span id="more"></span><p>正因为自己对机器人有一种发自内心无法抗拒的喜爱，所以在业余时间我也做过几款机器人，虽然这几款机器人本身的技术难度不大（<strong>毕竟经济基础决定上层建筑！</strong>），但要把将系统搭建起来也需要花费一些功夫。因此在本系列文章中，我会就机器人搭建的过程以及其中涉及的原理进行详细的讲述，如果有写的不对的地方，也欢迎各路大神指正。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时候不知道为什么，一看到国内外大神在网站或期刊上发表的有关自制机器人的文章，我的内心就会下意识变得无法平静，总想自己也能按照教程DIY一个出来。尽管现在我的业余时间非常有限，但是这个爱好我会一直坚持下去，希望将来的某一天我能够造出属于自己的梦想机器人！</p>]]></content>
      
      
      <categories>
          
          <category> 自制机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x07）：微风四轴飞行器-软件开发总结</title>
      <link href="/zh-cn/2018/02/01/team_robot_7_breeze_quadcopter_software_summary/"/>
      <url>/zh-cn/2018/02/01/team_robot_7_breeze_quadcopter_software_summary/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一款出色的四轴飞行器除了要有设计严谨的硬件、稳定可靠的飞控之外，还需要具有图形界面的上位机以及可扩展通信协议才行。毕竟对于那些基于四轴飞行器平台进行深入研究（比如视觉SLAM、视觉避障、室内自主悬停等）的学者来说，带有各种参数仪表盘和数据曲线显示功能的地面控制站可直观地显示出当前四轴飞行器在空中的运动姿态和相关传感器数据等信息，便于算法调试。此外，四轴飞控所集成的通信协议API也能够加快上层应用的开发速度，提高其与其他开源框架（ROS、OpenCV、PCL、TensorFlow等）的集成和交互能力。</p><p>因此，本篇文章会以Breeze微型四轴飞行器为例来简要介绍目前国内外几个比较成熟的四轴飞行器地面控制站（GCS）软件以及通信协议协议，欢迎各位前来阅读。</p><span id="more"></span><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="地面控制站"><a href="#地面控制站" class="headerlink" title="地面控制站"></a>地面控制站</h3><ul><li><h4 id="Breeze远程控制站"><a href="#Breeze远程控制站" class="headerlink" title="Breeze远程控制站"></a>Breeze远程控制站</h4><p>如下图所示，Breeze远程控制站是我在Windows操作系统下使用Qt5进行编写的，代码里面主要调用了Qt官方的串口库和摄像头驱动库。它实现的功能比较简单，主要包含以下两个功能，其中第一个功能是该远程控制站软件可通过我们自定义的串口通信协议实时获取Breeze微型四轴飞行器当前的飞行姿态数据并显示在接收窗口内，另一个功能则是能够根据当前键盘上被按下的按键来发送对应的控制命令给四轴飞行器，从而完成操作者对Breeze微型四轴飞行器的远程控制。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_remote_control_1.png" alt="breeze_remote_control_1"></p><p>以下图片展示了Breeze远程控制站所集成的实时视频流采集功能。摄像头安装在四轴飞行器的顶部，可通过2.4GHz无线图传与PC相连完成实时图像的传输，不过由于时间的缘故，我们目前只实现了图像数据的采集，而图像检测和识别等有关机器视觉方面的高级功能暂时还未完成。最后，Breeze远程控制站的代码可以点击<a href="https://github.com/microdynamics-quadcopter/breeze_remote_control">这里</a>获得。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_remote_control_2.png" alt="breeze_remote_control_2"></p></li><li><h4 id="Breeze飞行控制站"><a href="#Breeze飞行控制站" class="headerlink" title="Breeze飞行控制站"></a>Breeze飞行控制站</h4><p>Breeze飞行控制站是我根据西工大布树辉老师在GitHub上开源的<a href="https://github.com/bushuhui/qFlightInstruments">Qt飞行仪表盘插件</a>和西工大舞蹈机器人基地马文科学长所创立<a href="https://github.com/HANDS-FREE">HandsFree项目</a>中HFLink代码的基础上进行重构开发而来。该软件外部的图形界面使用了目前Ubuntu下最流行和强大的Qt5框架，而内部则采用自定义的CommLink通信协议库实现Breeze和PC之间双向的数据传输。当然，依然受限于时间等客观因素，Breeze飞行控制站和上面介绍过的远程控制站一样目前只是一个Demo，很多功能还未实现，还需未来继续改进。</p><p>如下图所示，Breeze飞行控制站的界面主要分为<strong>飞行指示器</strong>、<strong>飞行状态</strong>和<strong>飞行数据</strong>共三个区域，其中<strong>飞行指示器</strong>区域通过三个仪表盘分别显示Breeze微型四轴飞行器实时的飞行姿态、海拔高度和磁场方向等数据，左下角的<strong>飞行状态</strong>区域用于显示四轴飞行器当前的推力值、四个电机的转速值以及电池电量值等，而右下角的<strong>飞行数据</strong>区域则以浮点数的形式展现<strong>飞行指示器</strong>和<strong>飞行状态</strong>中的数值，使数据大小的显示更为直观。最后，Breeze飞行控制站的代码可以点击<a href="https://github.com/microdynamics-quadcopter/breeze_flight_control_station">这里</a>获得。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_flight_control_station.png" alt="breeze_flight_control_station"></p><p><strong>注意：由于后期自己对Breeze飞行控制站进行了重构，所以请以下方新版软件界面为准！</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_fcs_1_flight_status.png" alt="breeze_fcs_1_flight_status"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_fcs_2_serial_console.png" alt="breeze_fcs_2_serial_console"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_fcs_3_data_plotter.png" alt="breeze_fcs_3_data_plotter"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_fcs_7_program_settings.png" alt="breeze_fcs_7_program_settings"></p></li><li><h4 id="匿名科创地面站"><a href="#匿名科创地面站" class="headerlink" title="匿名科创地面站"></a>匿名科创地面站</h4><p>匿名地面站就是针对飞控学习者、开发者设计开发的一个专用软件，由匿名科创团队（ANO TC）独立编写，软件性能优异，界面友好。通过多年的改进，已经成为调试飞控必不可少的软件之一。软件主要功能有：</p><ul><li><p><strong>用户自定义数据分析功能</strong>：既然是面对开发者设计的上位机，飞控那些固定的数据肯定是不够用的，开发者可能需要观察各种数据的波形，进行分析，匿名地面站可以让用户自定义一帧数据的格式，并对该帧数据进行解析，获得用户设置好的各种数据，并可以分别绘制波形。</p></li><li><p><strong>高速波形绘制功能</strong>：可以将飞控的各种参数，实时发送至上位机（地面站），并且实时绘制多达20个数据的波形，数据更新频率可达1000hz以上，这将大大方便对例如滤波算法的调试，可以实时将传感器原始数据、滤波后数据发送至上位机，绘制各自的波形，进行比较，以便对滤波算法进行调整。</p></li><li><p><strong>飞控状态显示功能</strong>：可以通过3D模型、地平仪、各项参数通道值等方式，实时显示飞控的状态。</p></li><li><p><strong>飞控参数设置功能</strong>：上位机提供多达18组PID数据的读取与写入功能，开发者都可以自由使用，方便进行各项参数的设置、调节，并且通信采用返回验证逻辑，保证飞控接收到的参数是准确的。</p></li><li><p><strong>数据的EXCEL写入功能</strong>：上位机支持将多种数据，实时写入到Excel文件，方便开发者使用Matlab等软件进行数据分析。</p></li></ul><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_1.png" alt="anotc_gcs_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_2.png" alt="anotc_gcs_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_3.png" alt="anotc_gcs_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_4.png" alt="anotc_gcs_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_5.png" alt="anotc_gcs_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_6.png" alt="anotc_gcs_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_7.png" alt="anotc_gcs_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/anotc_gcs_8.png" alt="anotc_gcs_8"></p></li><li><h4 id="Mission-Planner"><a href="#Mission-Planner" class="headerlink" title="Mission Planner"></a>Mission Planner</h4><p>Mission Planner是ArduPilot开源项目的全功能地面站软件，它支持固定翼飞行器、旋翼飞行器和地面车，由于软件基于C#和.Net环境进行开发，所以仅支持Windows操作系统。Mission Planner可以给全自主移动机器提供强大的配置工具和动力学控制能力。</p><p>Mission Planner软件的主要功能有：为控制板提供固件加载；设定、配置及调整机器到最优性能；通过在地图上用鼠标点击相应位置来规划，保存及加载自动任务给控制板；下载及分析由控制板创建的任务记录；与PC飞行模拟器连接，提供完整硬件闭环的UAV模拟器；通过合适的遥控器来监控飞行器状态、记录遥控数据、分析遥控记录以及可在FPV（第一人称视角）模式下控制你的机器。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/mission_planner_1.jpg" alt="mission_planner_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/mission_planner_2.jpg" alt="mission_planner_2"></p></li><li><h4 id="Crazyfile地面站"><a href="#Crazyfile地面站" class="headerlink" title="Crazyfile地面站"></a>Crazyfile地面站</h4><p>Crazyflie地面站是BitCraze团队专门为Crazyflie微型四轴飞行器所打造的桌面PC客户端 ，它支持Windows、GNU/Linux和Mac系统（具体安装方法请点击<a href="https://github.com/bitcraze/crazyflie-clients-python/blob/develop/README.md">这里</a>查看），可实现四轴飞行器的远程控制、烧写固件、设置参数并记录数据等功能。Crazyflie地面站与四轴飞行器之间的数据通信以及用于控制四轴飞行器的CRTP协议的实现均基于<a href="https://github.com/bitcraze/crazyflie-lib-python">Crazyflie Lib Python</a>项目所完成。最后，有关于更多内容请访问Crazyflie地面站的<a href="https://wiki.bitcraze.io/doc:crazyflie:client:pycfclient:index">官方Wiki</a>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/crazyflie_gcs_1.png" alt="crazyflie_gcs_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/crazyflie_gcs_2.png" alt="crazyflie_gcs_2"></p></li></ul><h3 id="通信协议栈"><a href="#通信协议栈" class="headerlink" title="通信协议栈"></a>通信协议栈</h3><p>通信协议是指双方实体完成通信或服务所必须遵循的规则和约定。通过通信信道和设备互连起来的多个不同地理位置的数据通信系统，要使其能协同工作实现信息交换和资源共享，它们之间必须具有共同的语言。交流什么、怎样交流及何时交流，都必须遵循某种互相都能接受的规则。这个规则就是通信协议。</p><p>通信协议本身是不依赖硬件接口本身的，它只是一个串行化和解串行化的规则,即根据某个通信协议可以实现很多不同的通信方式。</p><ul><li><h4 id="CommLink"><a href="#CommLink" class="headerlink" title="CommLink"></a>CommLink</h4><p>CommLink是Breeze微型四轴飞行器所采用的数据通信协议栈，此协议栈内有采用USART（基于 CP2102 转串口芯片）和SPI（基于NRF24L01射频模块）两套接口实现的通信协议。如下图所示，其中USART通信协议主要负责将四轴飞行器自身的实时飞行姿态数据发送给远程PC端的地面站，而SPI通信协议则负责解析远程遥控端发送的控制指令。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/breeze_communication_link.png" alt="breeze_communication_link"></p></li><li><h4 id="MAVLink"><a href="#MAVLink" class="headerlink" title="MAVLink"></a>MAVLink</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/7_breeze_quadcopter_software_summary/mavlink_protocal.png" alt="mavlink_protocal"></p><p>MAVLink协议最早由苏黎世联邦理工学院计算机视觉与几何实验组的Lorenz Meier于2009年创建，并以LGPL开源协议形式进行发布。MAVLink协议是在串口通讯基础上的一种更高层的开源通讯协议，广泛应用于地面站软件与小型无人载具之间的通讯，同时也应用在载具内部子系统的通信中。MAVLink协议是以消息库的形式来定义参数传输的规则，具体协议的内容可点击<a href="http://mavlink.org/messages/common">这里</a>查看。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>本次项目开发从软硬件两方面共同完成了第一代Breeze微型四轴飞行器系统的搭建工作，初步实现了四轴飞行器的简单受控飞行。在整个系统开发的过程中主要完成了Breeze微型四轴飞行器的硬件电路设计、嵌入式程序开发以及上层软件编写和调试等工作内容。</p></li><li><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>由于四轴飞行器所涉及的技术面较广、本人水平有限以及受到研究经费、试验条件等客观因素的影响，本次项目开发对四轴飞行器飞控系统的研究还不够深入，仍存在以下问题，需要在今后的研究中不断学习和优化：</p><ol><li><p>由于时间和经费的原因，目前Breeze微型四轴飞行器的硬件电路设计还不够封装化和模块化，而且一些电路设计得比较复杂，不利于后期的进一步维护和改进。</p></li><li><p>本次项目开发使用C语言来编写嵌入式代码，但由于C语言是面向过程的高级语言，它对源码的封装性远不如基于面向对象思想的C++。此外，目前Breeze微型四轴飞行器的通信协议设计得比较冗余，而且功能也比较有限。</p></li><li><p>本次项目开发对飞控算法的研究并未深入，只是研究了目前比较流行的Mahony互补滤波算法并在Breeze微型四轴飞行器上测试了其效果。</p></li><li><p>本次项目开发未涉及ROS（Robot Operating System，即机器人操作系统）方面的内容。不过由于ROS目前已经成为机器人软件开发的事实标准，将来我们也会尝试基于ROS来搭建整个四轴飞行器的上层软件架构。</p></li></ol></li></ul><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><ul><li><h4 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h4><p>在本次项目开发的过程中，困扰我比较大的就是硬件电路的设计工作。因为我之前没有系统地学习过如何绘制PCB板，所以在开发的前期阶段，我不得不花很多时间来学习如何使用Altium Designer软件，而且由于缺乏硬件设计的相关经验，我的前几次元器件布局很不合理，这直接导致了后来在进行布线的时候，PCB板出现过孔数量的过多和乃至无法布通的情况。后来在经历了痛苦的重新布局、布线并解决了很多违反规则的问题之后，硬件电路终于被我成功地设计了出来，不过最后令人遗憾的是我没能完成对PCB板的焊接。因为本项目的硬件设计中使用了几个QFN封装形式的IC芯片，而IC芯片普遍对焊接时的温度要求比较高，而且最关键的是这些芯片的焊盘全都被放置在了黑色塑料壳体的下面而没有伸出来，这就导致了在焊接IC的过程中很容易发生短焊或虚焊的情况。虽然我尽可能地提高自己的焊接水平，但依然还是有很多块PCB板和价格不菲的IC芯片被我焊坏了，最后迫于开发进度的安排，我只能放弃焊接而使用我之前学习飞控时用到的成品四轴飞行器。尽管本次我没能完成硬件的制作，但我却收获了别人没有的宝贵经验，我相信学习总要有一个交学费的过程，希望这次经历可以让我在未来的开发过程中做得更好。</p><p>总之，经历了本次项目开发，我对四轴飞行器的整体系统构成以及各模块之间的相互关系有了一个更加深刻的理解，同时在开发的过程中，我学到了很多专业领域的知识，也认识到了自身的不足之处。最后，我通过GitHub开源了目前的所有设计成果，希望能让更多的人能有机会亲身参与到四轴飞行器的开发过程中来，并能乐享其中。</p></li><li><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p>感谢与我一同创立了MicroDynamics团队以及Breeze微型四轴飞行器项目的队友maksyuki，这个项目的想法是他最先提出来的。感谢他前期对嵌入式开发以及飞控算法的基础性研究，让我可以有充裕的时间来设计并焊接四轴飞行器的硬件电路部分。</p><p>感谢西北工业大学舞蹈机器人基地为我创造了一个良好的开发环境，让我可以自由地使用元器件和工具来完成四轴飞行器的焊接、安装和调试工作。感谢马文科学长在硬件电路设计和飞控算法上给我提供的帮助，同时也要感谢他所创立的HandsFree开源机器人软硬件项目为本次项目开发提供的技术支持。</p><p>感谢Crazepony和Crazyflie这两个开源四轴飞行器项目，感谢它们无私提供的硬件电路设计和嵌入式代码对本次项目开发的帮助。</p><p>感谢本次项目开发中所使用的一切开源软硬件工具以及它们的创造者，没有这些工具的存在，我的这个项目也就不能实现。</p><p>再次感谢西北工业大学舞蹈机器人基地及其全体成员，感谢他们创造了一个自由且充满激情的世界，让我可以在有限的基地时光中学到很多不同领域的知识，并为我之后的研究学习打下了坚实的基础。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> STM32 </tag>
            
            <tag> GCS </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x06）：微风四轴飞行器-STM32嵌入式开发-飞控算法理论</title>
      <link href="/zh-cn/2018/01/15/team_robot_6_breeze_quadcopter_stm32_flight_control/"/>
      <url>/zh-cn/2018/01/15/team_robot_6_breeze_quadcopter_stm32_flight_control/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我介绍了很多有关微型四轴飞行器嵌入式底层开发的知识，虽然对于很多初学者来说，其中有一些概念比较晦涩难懂，但是它们确实能够让大家对于嵌入式底层开发有更深入的理解与掌握。好了言归正传，在本篇文章中我会向大家介绍有关微型四轴飞行器飞控算法理论方面的相关内容，而至于什么是飞控，我想很多自己买过成品飞控板、组装过航模或四轴飞行器的同学都不会陌生，顾名思义，飞控指的是<strong>飞行控制算法</strong>，即通过获取IMU（惯性传感单元）数据，并采用滤波、PID等算法对飞行器当前的姿态进行实时解算，得到各电机的转速和转向，从而完成对飞行器的控制。由于飞控算法本身涉及到很多自动控制原理和线性代数方面的理论知识，所以推荐大家先把自控和线代好好复习一遍再去研究飞控算法，这样理解起来可能会容易一些。</p><span id="more"></span><h3 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h3><ul><li><h4 id="国内研究现状"><a href="#国内研究现状" class="headerlink" title="国内研究现状"></a>国内研究现状</h4><p><strong>DJI</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_dji.jpg" alt="flight_control_dji"></p><p>目前国内做四轴飞行器的公司有很多，其中做飞控系统最好的当属大疆创新（DJI）。大疆创新（DJI）目前拥有NAZE、WooKong以及A系列的多种商业飞控系统，其中作为NAZA飞控系列的最新一代产品，N3多旋翼飞控系统采用DJI最新的控制导航算法，新增内置的双IMU冗余设计，可实现数据实时互为备份，并结合全新内减震结构设计，赋予了飞行器更高的可靠性，为无人机爱好者及行业应用探索者提供稳定而全面的系统级解决方案。</p><p><strong>Crazepony</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_crazepony.png" alt="flight_control_crazepony"></p><p>Crazepony微型四轴飞行器由深圳创客火（Maker Fire）公司设计、制造并发行，其内置的飞控算法可以实现飞行器的定高悬停、有头（X模式）和无头模式飞行等功能。相比于商业飞控来说，Crazepony的飞控开源（包括源代码、原理图、工作原理、系统框架、设计思路等），且核心算法部分有详细的教程文档，既方便各大高校的学生和爱好者学习相关知识，也利于进行二次开发，以实现自己的创意。</p><p><strong>MiniFly</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_alientek.png" alt="flight_control_alientek"></p><p>MiniFly是广州市星翼电子科技有限公司（ALIENTEK）最新推出的一款开源微型四轴飞行器，它所使用的飞控算法可以支持：定高和手动飞行、4D翻飞、抛飞、有头（X模式）和无头模式飞行、一键起飞和降落等功能。由于MiniFly微型四轴的硬件电路设计主要是基于国外的Crazeflie项目修改而来，所以其硬件性能在国内同等规格的四轴飞行器里绝对算是一流的，当然强大的硬件性能也为MiniFly实现更为复杂的飞控算法提供了一个绝佳的平台。</p></li><li><h4 id="国外研究现状"><a href="#国外研究现状" class="headerlink" title="国外研究现状"></a>国外研究现状</h4><p>国外高校和科研机构对飞行器控制系统的研究已经有很多年了，技术相对来说比较成熟，而且基本都是以开源飞控为主。以下简要介绍几个目前比较流行的开源飞控系统：</p><p><strong>APM</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_apm.png" alt="flight_control_apm"></p><p>APM(ArduPilot Mega)是在2007年由DIY无人机社区（DIY Drones）推出的飞控产品，是当今最为成熟的开源硬件项目。APM基于Arduino开源平台，对多处硬件做出了改进，包括加速度计、陀螺仪和磁力计组合惯性测量单元（IMU）。由于APM良好的可定制性，APM在全球航模爱好者范围内迅速传播开来。通过开源软件Mission Planner，开发者可以对APM进行相应的配置，接受并显示传感器的数据，使用Google Map完成自动驾驶等功能。除此之外，APM连接外置GPS传感器以后能够增强飞行的稳定性，并能够完成自主起降、自主航线飞行、回家、定高、定点等丰富的飞行模式。APM可以使用外置的超声波传感器和光流传感器，在室内实现定高和定点飞行。</p><p><strong>PX4</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_px4.png" alt="flight_control_px4"></p><p>PX4是一个软硬件开源项目（遵守BSD协议），目的在于为学术、爱好和工业团体提供一款低成本、高性能的高端自驾仪。这个项目源于苏黎世联邦理工大学的计算机视觉与几何实验室、自主系统实验室和自动控制实验室的PIXHawk项目。于2004年推出的PIXHawk飞控是PX4飞控的升级版本，它拥有PX4和APM两套固件和相应的地面站软件。该飞控是目前全世界飞控产品中硬件规格最高的产品，也是当前爱好者手中最炙手可热的产品。PIXHawk拥有168MHz的运算频率，并突破性地采用了整合硬件浮点运算核心的Cortex-M4的单片机作为主控芯片，内置两套陀螺和加速度计MEMS传感器，互为补充矫正，内置三轴磁场传感器并可以外接一个三轴磁场传感器，同时可外接一主一备两个GPS传感器，在故障时自动切换。</p><p><strong>CC3D</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_cc3d.png" alt="flight_control_cc3d"></p><p>CC3D是Openpilot旗下最流行的飞控系统，此飞控板只采用一颗72MHz的32位STM32单片机和一颗MPU6000就能够完成四旋翼、固定翼、直升机的姿态控制飞行。与所有开源飞控不同，它不需要GPS融合或者磁场传感器参与修正，就能保持长时间的姿态控制，而且通过设置就可以更改飞机种类、飞行模式、支持云台增稳等功能。此外，CC3D飞控编译完的固件容量只有大约100KB，代码效率令人惊叹，而且其地面站软件集成了完整的电子地图，可以通过电台实时监测飞机状态。</p><p><strong>MWC</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_mwc.jpg" alt="flight_control_mwc"></p><p>MultiWiiCopter(MWC)飞控是一款典型的Arduino衍生产品，是专为多旋翼开发的低成本飞控，它完整地保留了Arduino IDE开发和Arduino设备升级和使用的方法。由于成本低、架构简单、固件比较成熟，因此该飞控在国内外拥有大量爱好者。除了支持常见的四、六、八旋翼以外，该飞控的最大特点是支持很多奇特的飞行器类型，比如三旋翼、Y4型多旋翼（其中两轴为上下对置）等。</p><p><strong>PPZ</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_ppz.jpg" alt="flight_control_ppz"></p><p>Paparazzi(PPZ)是一个软硬件全开源的项目，它始于2003年，开发目标是建立一个配置灵活且性能强大的开源飞控项目。PPZ的一大特点是，该开源飞控方案中除了常见的飞控硬件、飞控软件和地面站软件之外，还包含地面站硬件，包括各种调制解调器、天线等设备。从功能上讲，PPZ已经接近一个小型的无人机系统了。该开源项目的另一个特点是采用Ubuntu操作系统，它将全部地面站软件和开发环境集成于该系统下，官方称之为Live CD。一张CD加飞控硬件就可完成从开发到使用的全部工作。PPZ目前最流行的硬件版本拥有大量的扩展接口，方便开发者进行DIY。</p><p><strong>Crazeflie</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/flight_control_crazeflie.png" alt="flight_control_crazeflie"></p><p>Crazeflie是国外最著名的微型四轴飞行器开源项目，它由三个来自瑞典的嵌入式工程师所创建，目的是使用尽可能少的零件来构造一款可以在室内使用的小型飞行机器人。得益于其出色、严谨的硬件电路设计、稳定且可靠的飞控系统以及模块化的扩展能力，Crazeflie四轴飞行器可以完成很多同类型四轴飞行器无法做到的高难度实验任务。除此之外，Bitcraze团队还为Crazeflie微型四轴飞行器项目编写了大量的使用和发教程，方便全世界的四轴爱好者们进行学习和开发（国内Crazepony和MiniFly两大开源微型四轴项目就在很大程度上参考了Crazeflie中的一些设计理念和内容）。</p></li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><h4 id="电机布局"><a href="#电机布局" class="headerlink" title="电机布局"></a>电机布局</h4><p> 四轴飞行器的四个电机呈十字形排列，驱动四片桨旋转产生向上的推力。由于四个电机的轴距几何中心的距离相等，所以当对角两个轴产生的升力相同时能够保证力矩的平衡，四轴不会向任何一个方向倾转。而当四个电机一对正转一对反转时，可使得绕竖直轴方向旋转的反扭矩平衡，保证了四轴航向的稳定。</p><p>与传统的直升机相比，四轴飞行器有着下列的优势：各个旋翼对机身所施加的反扭矩与旋翼的旋转方向相反，因此当处于同一对角线的两个电机向相同方向旋转时（不同对角线上的电机转向相反），就可以平衡旋翼对机身的反扭矩。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_motor_layout.jpg" alt="breeze_motor_layout"></p><p>如上图所示，根据用户自定义的机头的位置不同，四轴飞行器可以分为×模式和+模式。×模式的机头方向位于两个电机之间，而+模式的机头方向位于某一个电机上。×和+就是表示正对机头方向时飞行器的形状。相对而言，×模式稳定一些，但动作更灵活。但如果要完成翻跟头等特技动作，可能需要用+模式。</p></li><li><h4 id="动力学原理"><a href="#动力学原理" class="headerlink" title="动力学原理"></a>动力学原理</h4><p>四轴飞行器在空间共有6个自由度（分别沿3个坐标轴作平移和旋转动作），这6个自由度的控制都可以通过调节不同电机的转速来实现。基本运动状态分别为：垂直运动、俯仰运动、滚转运动、偏航运动、前后运动和侧向运动。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_motion_a.jpg" alt="breeze_motion_a"></p><p><strong>垂直运动</strong><br>垂直运动相对来说比较容易。在上图(a)中，因有两对电机转向相反，可以平衡其对机身的反扭矩，当同时增加四个电机的输出功率，旋翼转速增加使得总的拉力增大，当总拉力足以克服整机的重量时，四轴飞行器便离地垂直上升。反之，同时减小四个电机的输出功率，四轴飞行器则垂直下降，直至平衡落地，实现了沿Z轴的垂直运动。当外界扰动量为零时，在旋翼产生的升力等于飞行器的自重时，飞行器便保持悬停状态。保证四个旋翼转速同步增加或减小是垂直运动的关键。</p><p><strong>俯仰运动</strong><br>在上图(b)中，电机1的转速上升，电机3的转速下降，电机2、电机4的转速保持不变。为了不因为旋翼转速的改变引起四轴飞行器整体扭矩及总拉力改变，旋翼1与旋翼3转速该变量的大小应相等。由于旋翼1的升力上升，旋翼3的升力下降，产生的不平衡力矩使机身绕Y轴旋转（方向如图所示），同理，当电机1的转速下降，电机3的转速上升，机身便绕y轴向另一个方向旋转，实现飞行器的俯仰运动。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_motion_b.jpg" alt="breeze_motion_b"></p><p><strong>滚转运动</strong><br>与上图(b)原理相同，在图(c)中，改变电机2和电机4的转速，保持电机1和电机3的转速不变，则可使机身绕X轴旋转（正向和反向），实现四轴飞行器的滚转运动。</p><p><strong>偏航运动</strong><br>四轴飞行器偏航运动可以借助旋翼产生的反扭矩来实现。旋翼转动过程中由于空气阻力作用会形成与转动方向相反的反扭矩，为了克服反扭矩影响，可使四个旋翼中的两个正转两个反转，且对角线上的各个旋翼转动方向相同。反扭矩的大小与旋翼转速有关，当四个电机转速相同时，四个旋翼产生的反扭矩相互平衡，四轴飞行器不发生转动；当四个电机转速不完全相同时，不平衡的反扭矩会引起四轴飞行器转动。在图(d)中，当电机1和电机3的转速上升，电机2和电机4的转速下降时，旋翼1和旋翼3对机身的反扭矩大于旋翼2和旋翼4对机身的反扭矩，机身便在富余反扭矩的作用下绕Z轴转动，实现飞行器的偏航运动，转向与电机1、电机3的转向相反。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_motion_c.jpg" alt="breeze_motion_c"></p><p><strong>前后运动</strong><br>要想实现飞行器在水平面内前后、左右的运动，必须在水平面内对飞行器施加一定的力。在图(e)中，增加电机3转速，使拉力增大，相应减小电机1转速，使拉力减小，同时保持其他两个电机转速不变，反扭矩仍然要保持平衡。按图(b)的理论，飞行器首先发生一定程度的倾斜，从而使旋翼拉力产生水平分量，因此可以实现飞行器的前飞运动。向后飞行与向前飞行正好相反。当然在图(b)和图(c)中，飞行器在产生俯仰、翻滚运动的同时也会产生沿X、Y轴的水平运动。</p><p><strong>侧向运动</strong><br>在图(f)中，由于结构对称，所以侧向飞行的工作原理与上面讲到的前后运动完全一样。</p></li><li><h4 id="飞行模式"><a href="#飞行模式" class="headerlink" title="飞行模式"></a>飞行模式</h4><p>飞行模式分为有头模式和无头模式两种。其中飞行器在飞行的过程中，其运动的前后左右以地理坐标系为参考坐标系，则为无头模式飞行；而有头模式则是飞行器运动的前后左右以自身的坐标系为参考坐标系。</p><p>这里对有头和无头模式进行展开讲解。任何飞行器都一定有个自身的坐标系，也就是飞行器的头和尾，这也就是前面说的飞行器的自身坐标系。如果推动遥控器向前运动，飞行器总是向它头的方向飞行，那么这个飞行器就是运行在有头模式。如果推动遥控器的向前飞行，飞行器还是向它起飞时头指示的方向飞行，即使这个时候飞行器在飞行的过程中改变了机头方向（操纵了遥控的航向角），那么这个飞行器依旧运行在无头模式下。</p><p>因为飞行器的无头模式是以地理坐标系为参考，而有头模式则是以飞行器自身的坐标系为参考，所以对于不同的飞行模式，姿态解算算法是不太一样的。对于无头模式，姿态解算部分可以使用磁力计来测量飞行器相对于地球磁场的角度，从而算出机头在磁场中的方向。另外，也可以直接对航向角进行积分，算出飞行器相对于起飞时机头旋转的角度，目前，Breeze微型四轴飞行器使用的就是这种实现方式。</p></li></ul><h3 id="软件框架"><a href="#软件框架" class="headerlink" title="软件框架"></a>软件框架</h3><p>嵌入式系统软件实现部分没有使用实时操作系统（RTOS），而是直接通过编写裸机代码，依靠中断嵌套来完成整体功能的。在代码的初始化阶段，程序对STM32的定时器4进行了初始化，它可以中断<code>while</code>死循环，用于更新远程遥控数据、机身姿态融合、PID控制计算输出和电机PWM输出等操作。</p><p>总之，定时器4中断是核心中断，所有的飞控算法都是在这里实现的，机身的稳定也是依靠这个中断来实现的。接下来，本文章将结合程序执行流程图来详细地讲解定时器4中断内部的组织结构和实现的功能：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_embedded_flowchart.png" alt="breeze_embedded_flowchart"></p><p>如上图所示，程序会在主循环中不断轮询各个定时器的标志位，从而产生三个大小不同的时间段。在这些时间段内，系统便可以完成像接收遥控器指令、更新传感器数据以及更新电机控制等任务。主程序通过划分不同频率的定时器循环，使得所有任务可以分时并发地执行，这有效地降低了函数串行执行时的延时问题，并且提高了主控对资源的利用率。</p><ul><li><h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><p>主函数在开始执行阶段会先调用<code>Hardware_Init()</code>函数进行硬件相关设备和功能的初始化。初始化完成之后程序就会进入主循环<code>while(1)</code>中，主循环也是整个软件功能实现的关键，程序一旦进入便会在里面不断地运行，只有发生中断时程序才会暂时离开主循环，而去执行优先级高的中断服务程序。</p></li><li><h4 id="主循环-100Hz循环"><a href="#主循环-100Hz循环" class="headerlink" title="主循环-100Hz循环"></a>主循环-100Hz循环</h4><p>主循环体内会首先判断<code>timer_loop_flag_100hz</code>的值是否为真，而<code>timer_loop_flag_100hz</code>标志位是在TIM4定时器中断中每10ms置位一次，即该循环会每10ms执行一次其中的工作。</p><p>在这个循环之中，STM32会读取MPU6050和MS5611数据并进行融合。因为本论文采用的是软件解算MPU6050的姿态，所以读取的数据应为陀螺仪和加速度计的AD值，之后再将数据进行标定、滤波、校正后通过四元数融合得到三轴欧拉角，具体如下图所示：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid_loop_single.png" alt="breeze_pid_loop_single"></p><p>加速度传感器采集数据容易失真，造成姿态解算出来的欧拉角错误。只用角度单环的情况下，系统很难稳定运行，因此可以加入角速度作为内环。角速度由陀螺仪采集数据输出，采集值一般不存在受外界影响情况，抗干扰能力强，并且角速度变化灵敏，当受外界干扰时回复迅速增强了系统的鲁棒性。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid_loop_double.png" alt="breeze_pid_loop_double"></p><p>如上图所示，把角度作为外环，角速度作为内环，即通过将角度环的输出值作为角速度环的输入来进行姿态双环PID控制。</p></li><li><h4 id="主循环-50Hz循环"><a href="#主循环-50Hz循环" class="headerlink" title="主循环-50Hz循环"></a>主循环-50Hz循环</h4><p>这个循环每20ms执行一次，其任务主要是解析通过无线通信发送过来的控制指令，并结合当前四轴飞行器的姿态，更新飞控核心程序，使得其可以按照指令进行移动。</p></li><li><h4 id="主循环-10Hz循环"><a href="#主循环-10Hz循环" class="headerlink" title="主循环-10Hz循环"></a>主循环-10Hz循环</h4><p>这个循环会以每100ms的时间间隔执行一次，它的任务主要是当四轴飞行器出现异常情况时，可以控制飞行器平稳地降落。异常情况包括电池电量过低、飞行高度超出范围以及无线通信失败等。</p></li></ul><h3 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h3><ul><li><h4 id="姿态解算简介"><a href="#姿态解算简介" class="headerlink" title="姿态解算简介"></a>姿态解算简介</h4><p>姿态解算也叫做姿态分析，姿态估计或姿态融合，它是指根据采集到的IMU数据（陀螺仪、加速度计、磁力计等）来求解得到四轴飞行器的空中姿态，姿态解算分为<strong>快速解算</strong>和<strong>深度解算</strong>两种。</p><p>如果根据陀螺仪的三轴角速度对时间的积分得到了四轴飞行器的俯仰、翻滚和航向角，这是快速解算。快速解算得到的姿态是存在误差的，而且误差会伴随积分而累加，如果再结合三轴地磁和三轴加速度数据进行漂移补偿和校正，得到准确的姿态，这就是深度解算。不过由于通过快速解算得到的姿态误差往往较大，因此目前姿态解算通常指的就是深度解算。</p></li><li><h4 id="姿态数学表示"><a href="#姿态数学表示" class="headerlink" title="姿态数学表示"></a>姿态数学表示</h4><p><strong>数学模型</strong><br>姿态是用来描述一个刚体的固连坐标系和参考坐标系之间的角位置关系。四轴飞行器使用的参考坐标系是当地水平坐标系，即地理坐标系，而其自身的固连坐标系叫做载体坐标系。地理坐标系有很多种，如下图所示，这里使用的是比较常用的<strong>NED</strong>（即“北东地”）坐标系。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_coordinate_geography.png" alt="breeze_coordinate_geography"></p><p>四轴飞行器在空中飞行时，我们使用下图中的姿态角来描述其在空间里的角度关系。其中姿态角包含有翻滚角<strong>Roll</strong>（记作<script type="math/tex">\phi</script>）、俯仰角<strong>Pitch</strong>（记作<script type="math/tex">\theta</script>）和航向角<strong>Yaw</strong>（记作<script type="math/tex">\psi</script>）。</p><p>通常我们一般选择把<script type="math/tex">X</script>轴作为四轴飞行器的正前方，那么俯仰角<script type="math/tex">\theta</script>则为载体绕<script type="math/tex">Y</script>轴旋转的角度，指向水平面以下为正，指向水平面以上为负，角度范围从−90°至90°；翻滚角<script type="math/tex">\phi</script>为载体绕<script type="math/tex">X</script>轴旋转的角度，坐标<script type="math/tex">Y</script>指向水平面以上为正，指向水平面以下为负，角度范围从−180°至180°；而航向角<script type="math/tex">\psi</script>为机体绕<script type="math/tex">Z</script>轴旋转的角度，俯视图逆时针为正，顺时针为负。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_coordinate_body.jpg" alt="breeze_coordinate_body"></p><p>如地理坐标系图所示，定义导航坐标系为<script type="math/tex">OX_{n}Y_{n}Z_{n}</script>，坐标原点为载体的转动中心，地理坐标系在载体运动时作为基准坐标系，所以求解载体航行姿态时，需要先将载体坐标系内测量到的数据转换到地理坐标系中，再进行姿态解算。</p><p>如机体坐标系图所示，定义载体坐标系为<script type="math/tex">OX_{b}Y_{b}Z_{b}</script>，其坐标系原点<script type="math/tex">O_b</script>在载体的质心或者中心，<script type="math/tex">X_b</script>轴沿载体水平方向向前，<script type="math/tex">Y_b</script>轴指向朝着载体正前方看的左侧方向，<script type="math/tex">Z_b</script>轴则垂直于<script type="math/tex">OX_{b}Y_{b}Z_{b}</script>平面沿载体竖轴向上，且载体坐标系<script type="math/tex">OX_{b}Y_{b}Z_{b}</script>满足右手法则。</p><p><strong>表示方式</strong></p><ul><li><p>欧拉角</p><p>欧拉角由莱昂哈德·欧拉创立，用来描述刚体在三维欧几里得空间的取向。对于在三维空间里的一个参考系，任何坐标系的取向，都可以用三个欧拉角来表现。参考系又称为实验室参考系，是静止不动的，而坐标系则固定于刚体，随着刚体的旋转而旋转。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_euler_angles.png" alt="breeze_euler_angles"></p><p>地理坐标系<script type="math/tex">OX_{n}Y_{n}Z_{n}</script>与载体坐标系<script type="math/tex">OX_{b}Y_{b}Z_{b}</script>之间的坐标变换矩阵即方向余弦矩阵可以通过三次基本旋转得到。对应的旋转变换矩阵为：</p><script type="math/tex; mode=display">\begin{align}C_n^b&=\begin{bmatrix}{\cos{\theta}} & {0} & {-\sin{\theta}} \\{0}            & {1} & {0}             \\{\sin{\theta}} & {0} & {\cos{\theta}}  \\\end{bmatrix}\begin{bmatrix}{1} & {0}           & {0}          \\{0} & {\cos{\phi}}  & {\sin{\phi}} \\{0} & {-\sin{\phi}} & {\cos{\phi}} \\\end{bmatrix}\begin{bmatrix}{\cos{\psi}} & {-\sin{\psi}} & {0} \\{\sin{\psi}} & {\cos{\psi}}  & {0} \\{0}          & {0}           & {1} \\\end{bmatrix}\\&=\begin{bmatrix}{\cos{\theta}\cos{\psi}+\sin{\theta}\sin{\phi}\sin{\psi}}  &{-\cos{\theta}\sin{\psi}+\sin{\theta}\sin{\phi}\cos{\psi}} &{-\sin{\theta}\cos{\phi}} \\{\cos{\phi}\sin{\psi}} &{\cos{\phi}\cos{\psi}} &{\sin{\phi}} \\{\sin{\theta}\cos{\psi}-\cos{\theta}\sin{\phi}\sin{\psi}}  &{-\sin{\theta}\sin{\psi}-\cos{\theta}\sin{\phi}\cos{\psi}} &{\cos{\theta}\cos{\phi}} \\\end{bmatrix}\end{align}</script><p>使用下面的欧拉角微分方程可以方便地对四轴飞行器的姿态进行解算：</p><script type="math/tex; mode=display">\begin{bmatrix}{\dot\theta} \\{\dot\phi}   \\{\dot\psi}   \\\end{bmatrix}=\frac{1}{\cos{\theta}}\begin{bmatrix}{\cos{\phi}} & {\sin{\theta}\sin{\phi}} & {\cos{\theta}\sin{\phi}}  \\{0}          & {\cos{\phi}\cos{\theta}} & {-\sin{\theta}\cos{\phi}} \\{0}          & {\sin{\theta}}           & {\cos{\theta}\cos{\phi}}  \\\end{bmatrix}^{-1}\begin{bmatrix}{\omega_{EbY}^b} \\{\omega_{EbX}^b} \\{\omega_{EbZ}^b} \\\end{bmatrix}</script><p>上面公式中左侧是更新后的欧拉角，右侧是上个周期测算出来的角度，而三个角速度则由安装在四轴飞行器上的三轴陀螺仪测得。因此，求解这个微分方程就能解算出当前的欧拉角。</p><p>不过，由于欧拉微分方程中包含了大量的三角函数运算，这给实时解算带来了一定的难度，而且当俯仰角为正负90°时，方程式会出现神奇的<strong>GimbalLock</strong>（万向锁）问题，因此欧拉角解算只适用于水平姿态变化不大的情况，而不适用于全姿态飞行器的姿态确定。</p></li><li><p>四元数</p><p>四元数是由爱尔兰数学家威廉·卢云·哈密顿在1843年发现的数学概念。明确地讲，四元数是复数的不可交换延伸，如把四元数的集合考虑成多维实数空间的话，四元数就代表着一个四维空间，相对于复数为二维空间。</p><p>四元数是简单的超复数。复数是由实数加上虚数单位i组成，其中<script type="math/tex">i^2=1</script>。相似地，四元数都是由实数加上三个虚数单位<script type="math/tex">i、j、k</script>组成，而且它们有如下的关系: <script type="math/tex">i^2=j^2=k^2=-1</script>和<script type="math/tex">i^0=j^0=k^0=-1</script>。每个四元数都是<script type="math/tex">i 、j、k</script>的线性组合，即四元数可用下面的公式进行表示，其中<script type="math/tex">q_0、q_1、q_2</script>和<script type="math/tex">q_3</script>是实数，<script type="math/tex">\omega</script>是转动的角度，<script type="math/tex">n</script>为旋转轴。</p><script type="math/tex; mode=display">Q=q_0+q_1i+q_2j+q_3k=q_0+n\sin({\frac{\omega}{2})}</script><p>采用四元数表示姿态变换时，由四元数的运算法则，将其中的四元数按照元素展开并按照运算符法则进行计算可以得到四元数表示的方向余弦矩阵：</p><script type="math/tex; mode=display">C_n^b=\begin{bmatrix}{q_1^2+q_0^2-q_3^2-q_2^2} & {2(q_1q_2-q_0q_3)} &{2(q_1q_3+q_0q_2)} \\{2(q_1q_2+q_0q_3)}        & {q_2^2-q_3^2+q_0^2-q_1^2} &{2(q_2q_3-q_0q_1)} \\{2(q_1q_3-q_0q_2)}        & {2(q_2q_3+q_0q_1)} &{q_3^2-q_2^2-q_1^2+q_0^2} \\\end{bmatrix}</script><p>最后综合以上公式可得欧拉角和四元数之间的转换关系：</p><script type="math/tex; mode=display">\begin{align}\theta&=-\sin^{-1}\left[{2(q_1q_2-q_0q_3)}\right]\\\phi&=\tan^{-1}\left[\frac{2(q_1q_3+q_0q_1)}{q_3^2+q_2^2-q_1^2+1_0^2}\right]\\\psi&=\tan^{-1}\left[\frac{2(q_1q_2+q_0q_3)}{q_1^2+q_0^2-q_3^2-q_2^2}\right]\\\end{align}</script><p>相对于另几种旋转表示法（矩阵，欧拉角，轴角），四元数具有某些方面的优势，如速度更快、提供平滑插值、有效避免万向锁问题、存储空间较小等等。</p></li></ul></li><li><h4 id="姿态数据测量"><a href="#姿态数据测量" class="headerlink" title="姿态数据测量"></a>姿态数据测量</h4><p><strong>陀螺仪</strong><br>陀螺仪是测量角速度的传感器，具有高动态特性，它是一个间接测量角度的器件，它测量的是角度的导数，即角速度，要将角速度对时间积分才能得到角度。陀螺仪内部有一个陀螺，它的轴由于陀螺效应始终与初始方向平行，这样就可以通过与初始方向的偏差计算出旋转方向和角度。</p><p>理论上讲只用陀螺仪是可以完成姿态解算任务的，只需要对3个轴的陀螺仪角速度进行积分，得到3个方向上的旋转角度，也就是姿态数据。不过由于误差以及噪声的存在，对陀螺仪的积分并不能够得到完全准确的姿态，尤其是运转一段时间以后，积分误差的累加会让得到的姿态和实际的相差甚远。以下几种原因会导致陀螺仪得到的姿态结果不准确：</p><ul><li><p>零点漂移</p><p>零点漂移指的是陀螺仪在零点处有误差，从而导致随着积分时间的增长，测量值会偏离真实值越来越远。因此，陀螺仪只有在短时间内才有较大的参考价值。</p></li><li><p>白噪声</p><p>电信号的测量中，一定会带有白噪声，陀螺仪数据的测量也不例外。所以获得的陀螺仪数据中也会带有白噪声，而且这种白噪声会随着积分而累加。</p></li><li><p>温度/加速度</p><p>陀螺仪是一个温度和加速度敏感的元器件。例如对于加速度，多轴飞行器中的马达一般会带来较强烈的振动，一旦减震控制不好，就会在飞行过程中产生很大的加速度，必会带来陀螺输出的变化，引入误差。</p></li><li><p>积分误差</p><p>对陀螺仪角速度的积分是离散的，长时间的积分会出现漂移的情况。所以要考虑积分误差的问题。</p></li></ul><p>由于陀螺仪测量姿态存在这么多的误差，所以我们必须要使用其它传感器辅助校正，其中最重要的就是下面要讲的加速度计。</p><p><strong>加速度计</strong><br>加速度计的低频特性好，可以测量低速的静态加速度。对于四轴飞行器来说，3轴加速度计输出重力加速度g（也就是前面说的静态加速度）在加速度计所在机体坐标系3个轴上的分量大小，由于重力加速度的方向和大小是固定的，所以通过这种关系，就可以得到加速度计所在平面与地面的角度关系。当然，加速度计若是绕着重力加速度的轴转动，则测量值不会改变，也就是说加速度计无法感知这种水平旋转。</p><p>通过使用加速度计并结合陀螺仪的数据来做融合，可以矫正姿态的偏差，从而获取系统的最优解。但是由于加速度计无法测量出航向角，所以只用陀螺仪和加速度计的飞行器会存在航向漂移的情况。解决这个问题的方法是再使用一个磁力计传感器来测出当前飞行器的地磁角来修正漂移，不过由于飞行器自身装备有电机等对磁场影响较大的设备，因此由磁力计测出的地磁角往往是不准确的。目前，Breeze微型四轴飞行器未涉及与磁力计相关的内容。</p></li><li><h4 id="姿态解算算法"><a href="#姿态解算算法" class="headerlink" title="姿态解算算法"></a>姿态解算算法</h4><p><strong>解算流程</strong><br>姿态解算的核心在于旋转，旋转共有4种表示方式：矩阵、欧拉角、轴角和四元数。其中矩阵适合变换向量，欧拉角最直观，轴角则适合几何推导，而在组合旋转方面，四元数表示最佳。因为姿态解算需要频繁组合旋转并用旋转变换向量，所以应采用四元数来保存飞行器的姿态（地理坐标系中的俯仰/翻滚/航向角）。下图是姿态解算的整个流程：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_attitude_flowchart.png" alt="breeze_attitude_flowchart"></p><p>如上图所示，STM32会通过IIC总线采集MPU6050中陀螺仪和加速度计的AD值，之后再通过姿态解算算法得到飞行器当前的姿态（姿态使用四元数表示），然后将四元数转化为欧拉角，用于后面的姿态PID控制。</p><p><strong>解算算法</strong><br>姿态解算算法会通过巧妙的方法来使用加速度计数据去修正由陀螺仪数据经过快速解算所产生的姿态误差，并最终得到准确的飞行器姿态。目前常用的软件姿态解算算法为：非线性互补滤波算法、Kalman滤波算法、Mahony互补滤波算法等。下面对其中的Mahony互补滤波算法进行介绍（Breeze微型四轴飞行器使用的就是这种）。</p><p>Mahony互补滤波算法的原理是根据加速度计和磁力计的数据，与转换到载体坐标系的参考重力向量和地磁向量进行求误差，用这个误差来矫正陀螺仪的输出，然后用它来更新四元数，最后再将四元数转换为欧拉角。以下是算法执行的具体步骤：</p><ol><li><p>对加速度数据进行归一化，得到单位加速度。</p></li><li><p>将飞行器上次计算得到的姿态（四元数）换算成方向余弦矩阵中第三列的三个元素。根据余弦矩阵和欧拉角的定义，地理坐标系的重力向量转换到载体坐标系下，正好是方向余弦矩阵第三列的三个元素。</p></li><li><p>计算叉乘误差。在载体坐标系上，加速度计测出来的重力向量和根据上次姿态解算的姿态所推算出的重力向量之间的误差向量，就是上次姿态解算（可以认为是陀螺仪积分）后的姿态和加速度计测出来的姿态之间的误差。向量间的误差，可以用向量积来表示。因为叉积和陀螺仪积分误差都处于载体坐标系下而且成正比，所以可以使用叉积向量来修正陀螺仪积分误差。由于陀螺仪是对载体直接进行积分的，所以对陀螺仪的纠正量会直接体现在对载体坐标系的纠正。</p></li><li><p>对叉乘误差对时间进行积分。</p></li><li><p>使用叉乘误差来做PI修正陀螺仪零点漂移，通过调节参数，可以控制加速度计修正陀螺仪积分姿态的速度。</p></li><li><p>使用四元数微分方程，得到修正后的陀螺仪数据，再对其进行时间积分，得到使用四元数表示的飞行器当前姿态，最后对四元数进行单位化处理就完成整个算法执行流程。</p></li></ol></li><li><h4 id="姿态控制算法"><a href="#姿态控制算法" class="headerlink" title="姿态控制算法"></a>姿态控制算法</h4><p><strong>控制原理</strong><br>四轴飞行器的旋翼与空气发生相对运动，产生了向上的升力，当升力大于四轴的重力时四轴飞行器就可以飞起来了。理想情况下，只要四个电机的转速是完全相同，就可以使四轴飞行器在飞行过程中保持水平，但由于电机和旋翼本身制造上的差异，想要控制四个电机达到相同的转速是不可能的。因此，为了防止四轴飞行器发生侧翻的情况，需要使用PID自动反馈控制系统来完成对四轴飞行器的自稳定。</p><p><strong>PID控制理论</strong><br>PID控制是最常见，应用最为广泛的自动反馈系统。PID控制器由偏差的比例（P: Proportional）、积分（I: Integral）和微分（D: Derivative）来对被控对象进行控制。这里的积分或微分都是偏差对时间的积分或微分。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid.png" alt="breeze_pid"></p><p>对于一个自动反馈控制系统来说，共有以下几个基本指标：</p><p>稳定性（P和I降低系统稳定性，D提高系统稳定性）：在平衡状态下，系统受到某个干扰后，经过一段时间其被控量可以达到某一稳定状态。</p><p>准确性（P和I提高稳态精度，D无作用）：系统处于稳态时，其稳态误差。</p><p>快速性（P和D提高响应速度，I降低响应速度）：系统对动态响应的要求。一般由过渡时间的长短来衡量。</p><ul><li><p>比例控制</p><p>比例控制是一种最简单的控制方式，其控制器的输出与输入误差信号成比例关系。当仅有比例控制时系统输出存在稳态误差。比例项输出：</p><script type="math/tex; mode=display">P_{out}=K_pe(t)</script></li><li><p>积分控制</p><p>在积分控制中，控制器的输出与输入误差信号的积分成正比关系。对于只有比例控制的系统存在稳态误差，为了消除稳态误差，在控制器中必须引入积分项。积分项是误差对时间的积分，随着时间的增加，积分项会增大，这样，即便误差很小，积分项也会随着时间的增加而加大，它推动控制器的输出增大使稳态误差进一步减小，直到等于零。因此，比例积分（PI）控制器可以使系统在进入稳态后无稳态误差。积分项输出：</p><script type="math/tex; mode=display">I_{out}=K_i\int_0^te(\tau)d\tau</script></li><li><p>微分控制</p><p>在微分控制中，控制器的输出与输入误差信号的微分成正比关系。微分调节的是偏差值的变化率，使用其能够实现系统的超前控制。如果输入偏差值线性变化，则需要在调节器输出侧叠加一个恒定的调节量。大部分控制系统不需要调节微分时间，因为只有时间滞后的系统才需要附加这个参数。微分项输出：</p><script type="math/tex; mode=display">D_{out}=K_d\frac{de(t)}{dt}</script></li></ul><p>综上所述，PID控制的数学公式为：</p><script type="math/tex; mode=display">\mu(t)=K_pe(t)+K_i\int_0^te(\tau)d\tau+K_d\frac{de(t)}{dt}</script><p><strong>单环PID控制</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid_loop_angle.png" alt="breeze_pid_loop_angle"></p><p>如上图所示，输入的期望角度就是远程遥控端控制飞行器的角度值，反馈当前角度就是由传感器测得的飞行器角度，这里的角度值分别指的是翻滚角、俯仰角和航向角，在做PID控制计算的时候，它们是相互独立的。这里以翻滚角为例，介绍一下PID计算的全过程：</p><ol><li><p>计算角度误差</p><p>角度误差=期望角度-当前角度</p></li><li><p>计算比例项</p><p>比例项=比例系数角×度误差</p></li><li><p>计算积分项</p><p>微分项=微分项系数×角度误差积分</p></li><li><p>计算微分项</p><p>微分项=微分系数×角速度的微分</p></li><li><p>整合结果输出</p><p>结果输出=比例项+积分项+微分项</p></li></ol><p>以上步骤适用于翻滚角和俯仰角的PID计算，但航向角比较特殊，因为航向角法线方向刚好和地球重力平行，因此这个方向的角度无法由加速度计直接测得。由于Breeze微型四轴飞行器并没有使用磁力计，所以使用PID计算航向角时候，就不存在比例项，只能使用微分项来调节。</p><p><strong>串级PID控制</strong><br>角度单环PID控制算法仅仅考虑了四轴飞行器的角度信息，如果要增加四轴飞行器的稳定性并提高控制质量，可以使用下面的角度/角速度串级PID控制算法：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid_loop_cascade.png" alt="breeze_pid_loop_cascade"></p><p>如上图所示，串级PID控制算法其实就是将角度环PID和角速度环PID控制算法串联了起来，因为两个控制器比单个能控制更多的变量，因此它增强了系统的抗干扰性，使得四轴飞行器的适应能力更强。它的计算过程如下：</p><ol><li><p>计算角度误差</p><p>角度误差=期望角度-当前角度</p></li><li><p>计算外环比例项</p><p>外环比例项=外环比例系数×角度误差</p></li><li><p>计算外环积分项</p><p>外环积分项=外环积分系数×角度误差积分</p></li><li><p>整合外环输出</p><p>外环结果输出=外环比例项+外环积分项</p></li><li><p>计算角速度误差</p><p>角速度误差=外环结果输出-当前角速度</p></li><li><p>计算内环比例项</p><p>内环比例项=内环比例系数×角速度误差</p></li><li><p>计算内环积分项</p><p>内环积分项=内环积分系数×角速度误差积分</p></li><li><p>计算内环微分项</p><p>内环微分项=内环微分系数×当前角速度微分</p></li><li><p>整合内环结果输出</p><p>内环结果输出=内环比例项+内环积分项+内环微分项</p></li></ol><p><strong>电机输出</strong><br>电机输出是姿态控制算法的最后一步，它在油门基准值的基础之上整合上面通过PID控制算法得到的翻滚角、俯仰角和航向角进行电机控制。</p></li><li><h4 id="自主悬停"><a href="#自主悬停" class="headerlink" title="自主悬停"></a>自主悬停</h4><p>自主悬停指的是四轴飞行器能够悬停在某个位置上，在发生了偏移之后依然能够自动校正并回到原来悬停的位置。由于四轴飞行器在空中的位置是用一个三维坐标来表示的，对于自主悬停，其中涉及了两个维度。第一是水平面上的自主悬停，飞行器不能够发生左右或前后的位置漂移。第二个是在垂直方向上，飞行器不能够发生太大的高度变化。针对这两个不同的维度，有不同的解决办法。在水平面上，为了确定飞行器的位置，可以使用GPS或光流传感器进行定位。而在垂直方向上，一般使用气压计或超声波模块进行定高。</p><p>目前，Breeze微型四轴飞行器拥有一个板载的高精度气压计MS5611，所以可以实现高度的自主悬停。在水平面上，虽然该飞行器还装备有一个小型的摄像头图传模块，但由于视觉算法部分还存在着一些问题，所以目前仅靠3轴加速度计和3轴陀螺仪数据来做的双环PID控制是无法使其在水平面上做到真正意义上的自主悬停的。以下简单地讲解一下目前Breeze微型四轴飞行器所使用的高度双环PID控制算法：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/6_breeze_quadcopter_stm32_flight_control/breeze_pid_loop_height.png" alt="breeze_pid_loop_height"></p><p>如上图所示，由于MS5611气压计的精度为10cm，所以需要融合加速度计互补滤波得到较为准确的高度值。用高度作为外环，速度作为内环形成高度双环PID控制，最后调节输出油门以实现Z轴的自主悬停。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止，Breeze微型四轴飞行器飞控算法方面的内容就全部介绍完了，我想有很多同学看完之后还是会觉得云里雾里。的确，飞控这一部分在整个四轴飞行器的开发过程中算是最具挑战性，同时也是最难以理解的，所以不要指望仅仅只看几篇网上的博客教程就能入门飞控。如果你的研究方向是基于四轴飞行器平台来做上层研究的话（比如视觉避障、视觉SLAM、自主悬停和运动规划等），那么目前你所了解到的飞控知识应该已经足够，但是如果你想研究四轴飞行器的底层飞控算法实现，甚至是想自己实现一整套飞控算法的话，那么你还需要阅读更多飞控方面的专业书籍、论文，并要对国内外优秀的开源飞控代码进行深入的研究，我相信只要你足够的努力，你也可以成为别人眼里的飞控大神！</p><p>最后，简单预告一下下一篇文章所要讲的内容。下一篇文章我主要会介绍Breeze微型四轴飞行器上层软件开发的相关内容，除此之外，由于下一篇文章是Breeze微型四轴系列的最后一篇，所以我还会在文章中对之前整个Breeze微型四轴项目所讲的内容进行总结，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> STM32 </tag>
            
            <tag> PID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x05）：微风四轴飞行器-STM32嵌入式开发-代码编写规范</title>
      <link href="/zh-cn/2017/12/30/team_robot_5_breeze_quadcopter_stm32_code_guide/"/>
      <url>/zh-cn/2017/12/30/team_robot_5_breeze_quadcopter_stm32_code_guide/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一个成功的开源项目来说，我个人认为<strong>代码规范在某种程度上要比代码本身更为重要</strong>。至于为什么会得到这样的结论，主要归结于当初我自己还在舞蹈机器人基地的时候就曾遇到过因代码不规范所导致的一系列问题：那时我们晓萌软件组每人负责一个机器人模块的代码编写工作，由于比赛日期逐渐迫近，我们都在尽全力完成各自的任务而没太注意代码的编写规范，可是到后期要做各模块代码集成的时候我们却发现由于彼此的代码规范不统一，导致我们需要更多的时间来理解对方所编代码的含义，并且重新修改很多软件接口以实现数据的无障碍传输。</p><p>总之，以往的经历让我明白严谨的代码规范可以显著提高代码的质量、降低后期的开发和维护成本、提升团队开发的效率并减少错误的发生。因此，我们又有什么理由不去学习并制订自己团队的代码编写规范呢？</p><span id="more"></span><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>本代码规范参考自《STM32嵌入式系统开发实战指南》中的【第四章 编程规范】。</p></div><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>简要介绍基于C语言的嵌入式编程规范的排版、注释、标识符命名、变量使用、代码可测性、程序效率、质量保证、代码编译、测试、程序版本与维护等内容。</p><h3 id="ST固件库编程规范"><a href="#ST固件库编程规范" class="headerlink" title="ST固件库编程规范"></a>ST固件库编程规范</h3><ul><li><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">---------------------</span><br><span class="line">缩写         外设单元</span><br><span class="line">---------------------</span><br><span class="line">ADC         模数转换器</span><br><span class="line">BKP         备份寄存器</span><br><span class="line">CAN         控制器局域网模块</span><br><span class="line">DMA         直接内存存取控制器</span><br><span class="line">EXTI        外部中断事件控制器</span><br><span class="line">FLASH       闪存存储器</span><br><span class="line">GPIO        通用输入输出</span><br><span class="line">I2C         内部集成电路</span><br><span class="line">IWDG        独立看门狗</span><br><span class="line">NVIC        嵌套中断向量列表控制器</span><br><span class="line">PWR         电源/功耗控制</span><br><span class="line">RCC         复位与时钟控制器</span><br><span class="line">RTC         实时时钟</span><br><span class="line">SPI         串行外设接口</span><br><span class="line">SysTick     系统嘀嗒定时器</span><br><span class="line">TIM         通用定时器</span><br><span class="line">TIM1        高级控制定时器</span><br><span class="line">USART       通用同步异步接收发射端</span><br><span class="line">WWDG        窗口看门狗</span><br></pre></td></tr></table></figure></li><li><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li><p>系统、源程序文件和头文件命名都以<strong>stm32f10x</strong>作为开头。例如：<code>stm32f10x_conf.h</code>。</p></li><li><p>常量仅被应用于一个文件的，定义于该文件中。被应用于多个文件的，在对应头文件中定义。所有常量都由英文字母大写书写。</p></li><li><p>寄存器作为常量处理。他们的命名都由英文字母大写书写。在大多数情况下，他们采用的缩写规范与本用户手册一致。</p></li><li><p>外设函数的命名以该外设的缩写加下划线为开头。每个单词的第一个字母都由英文字母大写书写，例如：SPI_SendData。在函数名中，只允许存在一个下划线，用以分隔外设缩写和函数名的其他部分。而用以配置外设功能的函数，其名称应总是以字符串<strong>Config</strong>结尾。例如：GPIO_PinRemapConfig。</p><ul><li><p><strong>PPP_Init</strong>：<br>PPP_Init函数的功能是根据PPP_InitTypeDef中指定的参数初始化外设PPP。</p></li><li><p><strong>PPP_DeInit</strong>：<br>PPP_DeInit函数的功能为复位外设PPP的所有寄存器至缺省值。</p></li><li><p><strong>PPP_StructInit</strong>：<br>PPP_StructInit函数的功能是通过设置PPP_InitTypeDef结构中的各种参数来定义外设的功能。</p></li><li><p><strong>PPP_Cmd</strong>：<br>PPP_Cmd函数的功能为使能或者失能外设PPP。</p></li><li><p><strong>PPP_ITConfig</strong>：<br>PPP_ITConfig函数的功能为使能或者失能来自外设PPP某中断源。</p></li><li><p><strong>PPP_DMAConfig</strong>：<br>PPP_DMAConfig函数的功能为使能或者失能外设PPP的DMA接口。</p></li><li><p><strong>PPP_GetFlagStatus</strong>：<br>PPP_GetFlagStatus函数的功能为检查外设PPP某标志位被设置与否。</p></li><li><p><strong>PPP_ClearFlag</strong>：<br>PPP_ClearFlag函数的功能为清除外设PPP标志位。</p></li><li><p><strong>PPP_GetITStatus</strong>：<br>PPP_GetITStatus函数的功能为判断来自外设PPP的中断发生与否。</p></li><li><p><strong>PPP_ClearITPendingBit</strong>：<br>PPP_ClearITPendingBit函数的功能为清除外设PPP中断待处理标志位。</p></li></ul></li></ul></li><li><h4 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h4><p><strong>变量</strong><br>固件函数库定义了24个变量类型，它们的类型和大小是固定的。在文件<code>stm32f10x_type.h</code>中我们定义了这些变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span> s32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">short</span> s16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> s8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">const</span> sc32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">const</span> sc16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">const</span> sc8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">long</span> vs32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">short</span> vs16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">char</span> vs8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">const</span> vsc32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">const</span> vsc16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">const</span> vsc8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> uc32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">const</span> uc16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">const</span> uc8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> vu32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> vu16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> vu8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> vuc32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">const</span> vuc16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">const</span> vuc8;</span><br></pre></td></tr></table></figure><p><strong>布尔类型</strong><br>在文件<code>stm32f10x_type.h</code>中，布尔形变量被定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    FALSE = <span class="number">0</span>,</span><br><span class="line">    TRUE  = !FALSE</span><br><span class="line">&#125; <span class="keyword">bool</span>;</span><br></pre></td></tr></table></figure><p><strong>标志位状态类型</strong><br>在文件<code>stm32f10x_type.h</code>中，我们定义标志位类型的2个可能值为<strong>设置</strong>与<strong>重置</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    RESET = <span class="number">0</span>,</span><br><span class="line">    SET   = !RESET</span><br><span class="line">&#125; FlagStatus;</span><br></pre></td></tr></table></figure><p><strong>功能状态类型</strong><br>在文件<code>stm32f10x_type.h</code>中，我们定义功能状态类型的2个可能值为<strong>使能</strong>与<strong>失能</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DISABLE = <span class="number">0</span>,</span><br><span class="line">    ENABLE  = !DISABLE</span><br><span class="line">&#125; FunctionalState;</span><br></pre></td></tr></table></figure><p><strong>错误类型</strong><br>在文件<code>stm32f10x_type.h</code>中，我们错误状态类型类型的2个可能值为<strong>成功</strong>与<strong>错误</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ERROR   = <span class="number">0</span>,</span><br><span class="line">    SUCCESS = !ERROR</span><br><span class="line">&#125; ErrorStatus;</span><br></pre></td></tr></table></figure><p><strong>外设</strong><br>用户可以通过指向各个外设的指针访问各外设的控制寄存器。这些指针所指向的数据结构与各个外设的控制寄存器布局一一对应。外设控制寄存器结构文件<code>stm32f10x_map.h</code>包含了所有外设控制寄存器的结构，下例为SPI寄存器结构的声明，其中RESERVEDi（i为一个整数索引值）表示被保留区域：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    vu16 CR1;</span><br><span class="line">    u16 RESERVED0;</span><br><span class="line">    vu16 CR2;</span><br><span class="line">    u16 RESERVED1;</span><br><span class="line">    vu16 SR;</span><br><span class="line">    u16 RESERVED2;</span><br><span class="line">    vu16 DR;</span><br><span class="line">    u16 RESERVED3;</span><br><span class="line">    vu16 CRCPR;</span><br><span class="line">    u16 RESERVED4;</span><br><span class="line">    vu16 RXCRCR;</span><br><span class="line">    u16 RESERVED5;</span><br><span class="line">    vu16 TXCRCR;</span><br><span class="line">    u16 RESERVED6;</span><br><span class="line">&#125; SPI_TypeDef;</span><br></pre></td></tr></table></figure><p>文件<code>stm32f10x_map.h</code>包含了所有外设的声明，下例为SPI外设的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXT extern</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIPH_BASE ((u32)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APB1PERIPH_BASE PERIPH_BASE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APB2PERIPH_BASE (PERIPH_BASE + 0x10000) ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SPI2 Base Address definition.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI2_BASE (APB1PERIPH_BASE + 0x3800) ...</span></span><br><span class="line"><span class="comment">// SPI2 peripheral declaration.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DEBUG</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SPI2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI2 ((SPI_TypeDef *) SPI2_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _SPI2</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">// DEBUG</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SPI2</span></span><br><span class="line">EXT SPI_TypeDef *SPI2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _SPI2</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br></pre></td></tr></table></figure><p>如果用户希望使用外设SPI，那么必须在文件<code>stm32f10x_conf.h</code>中定义_SPI标签。通过定义标签_SPIn，用户可以访问外设SPIn的寄存器。例如，用户必须在文件<code>stm32f10x_conf.h</code>中定义标签_SPI2，否则是不能访问SPI2的寄存器的。在文件<code>stm32f10x_conf.h</code>中，用户可以按照下例定义标签_SPI和_SPIn：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SPI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SPI1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SPI2</span></span><br></pre></td></tr></table></figure><p>每个外设都有若干寄存器专门分配给标志位。我们按照相应的结构定义这些寄存器，标志位的命名，同样遵循上面的外设缩写规范，以<strong>PPP_FLAG_</strong>开始。对于不同的外设，标志位都被定义在相应的文件<code>stm32f10x_ppp.h</code>中。</p><p>用户想要进入除错（DEBUG）模式的话，必须在文件<code>stm32f10x_conf.h</code>中定义标签DEBUG，变量DEBUG可以仿照下例进行定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG 1</span></span><br></pre></td></tr></table></figure><p>初始化DEBUG模式与文件<code>stm32f10x_lib.c</code>的代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG void debug(void)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SPI2</span></span><br><span class="line">    SPI2 = (SPI_TypeDef *) SPI2_BASE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _SPI2</span></span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="C语言嵌入式编程规范"><a href="#C语言嵌入式编程规范" class="headerlink" title="C语言嵌入式编程规范"></a>C语言嵌入式编程规范</h3><ul><li><h4 id="代码排版"><a href="#代码排版" class="headerlink" title="代码排版"></a>代码排版</h4><p><strong>1、程序块要采用缩进风格编写，缩进的空格数为4个。</strong></p><p><strong>2、相对独立的程序块之间、变量说明之后必须加空行。</strong></p><p>示例：以下例子不符合规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line">variable_a = data_buffer[index].a;</span><br><span class="line">variable_b = data_buffer[index].b;</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable_a = data_buffer[index].a;</span><br><span class="line">variable_b = data_buffer[index].b;</span><br></pre></td></tr></table></figure><p><strong>3、较长的语句（大于80字符）要分成多行书写，长表达式要在低优先级操作符处划分新行，操作符放在旧行之尾，划分出的新行要进行适当的缩进，使排版整齐，语句可读。</strong></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data_package.length = DATA_PACKAGE_HEAD_LENGTH + DATA_PACKAGE_TAIL_LENGTH +</span><br><span class="line">    DATA_LENGTH_PER_BYTE * <span class="keyword">sizeof</span>(data_byte_sum);</span><br><span class="line"></span><br><span class="line">action_task_table[frame_id * ACTION_TASK_CHECK_NUMBER + index].occupied =</span><br><span class="line">    task_table[index].occupied;</span><br><span class="line"></span><br><span class="line">report_or_not_flag = ((task_index &lt; ACTION_TASK_MAX_NUMBER) &amp;&amp;</span><br><span class="line">    (judgeTaskIndexIsValid(task_index)) &amp;&amp;</span><br><span class="line">    (action_task_table[task_index].result_data != <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p><strong>4、循环、判断等语句中若有较长的表达式或语句，则要进行适应的划分，长表达式要在低优先级操作符处划分新行，操作符放在旧行之尾。</strong></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((variable_a &lt;= DATA_BUFFER_MAX_NUMBER) &amp;&amp;</span><br><span class="line">    (variable_b != getFunctionValue(parameter_a)))</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; (i &lt; data_buffer[index].length) &amp;&amp;</span><br><span class="line">    (j &lt; data_buffer[index].length); i++, j++)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    (i &lt; first_word_length) &amp;&amp; (j &lt; second_word_length);</span><br><span class="line">    i++, j++)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、若函数或过程中的参数较长，则要进行适当的划分。</strong></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">((BYTE *)parameter_a + <span class="keyword">sizeof</span>(parameter_c),</span></span></span><br><span class="line"><span class="params"><span class="function">                  (BYTE *)parameter_b + <span class="keyword">sizeof</span>(parameter_c),</span></span></span><br><span class="line"><span class="params"><span class="function">                  data_buffer[index])</span></span>;</span><br></pre></td></tr></table></figure><p><strong>6、不允许把多个短语句写在一行中，即一行只写一条语句。</strong></p><p>示例：以下例子不符合规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rect.length = <span class="number">0</span>; rect.width = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rect.length = <span class="number">0</span>;</span><br><span class="line">rect.width  = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>7、<code>if</code>、<code>for</code>、<code>do</code>、<code>while</code>、<code>case</code>、<code>switch</code>、<code>default</code>等语句自占一行，且 <code>if</code>、<code>for</code>、<code>do</code>、<code>while</code>等语句的执行语句部分无论多少都要加括号<code>&#123;&#125;</code>。</strong></p><p>示例：以下例子不符合规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8、对齐只能使用空格键，不能使用TAB键。</strong><br>说明：以免用不同的编辑器阅读程序时，因TAB键所设置的空格数目不同而造成程序布局不整齐。</p><p><strong>9、函数或过程的开始、结构的定义及循环、判断等语句中的代码都要采用缩进风格，<code>case</code>语句下的情况处理语句也要遵从语句缩进要求。</strong></p><p><strong>10、程序块的分界符（如C/C++语言的大括号<code>&#123;</code>和<code>&#125;</code>）应各独占一行并且位于同一列，同时与引用它们的语句左对齐。在函数体的开始、类的定义、结构的定义、枚举的定义以及<code>if</code>、<code>for</code>、<code>do</code>、<code>while</code>、<code>switch</code>、<code>case</code>语句中的程序都要采用如上的缩进方式。</strong></p><p>示例：以下例子不符合规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (...)</span><br><span class="line">   &#123;</span><br><span class="line">   ... <span class="comment">// Program code.</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   ... <span class="comment">// Program code.</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>11、在两个以上的关键字、变量、常量进行对等操作时，它们之间的操作符之前、之后或者前后要加空格。进行非对等操作时，如果是关系密切的立即操作符（如<code>-&gt;</code>），后不应加空格。</strong></p><p>说明：采用这种松散方式编写代码的目的是使代码更加清晰。由于留空格所产生的清晰性是相对的，所以在已经非常清晰的语句中没有必要再留空格，如果语句已足够清晰，则括号内侧（即左括号后面和右括号前面）不需要加空格，多重括号间不必加空格，因为在C/C++语言中括号已经是最清晰的标志了。</p><p>在长语句中，如果需要加的空格非常多，那么应该保持整体清晰，而在局部不加空格。给操作符留空格时不要连续留两个以上空格。</p><p>示例：</p><p>（1）逗号、分号只在后面加空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br></pre></td></tr></table></figure><p>（2）比较操作符，赋值操作符（<code>=</code>、<code>+=</code>），算术操作符（<code>+</code>、<code>%</code>），逻辑操作符（<code>&amp;&amp;</code>、<code>&amp;</code>），位域操作符（<code>&lt;&lt;</code>、<code>^</code>）等双目操作符的前后加空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt;= b &amp;&amp; b != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    c = a + b;</span><br><span class="line">    d = c ^ <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）<code>!</code>、<code>~</code>、<code>++</code>、<code>--</code>、<code>&amp;</code>（地址运算符）等单目操作符前后不加空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*p = <span class="number">1</span>;</span><br><span class="line"> a = !b;</span><br><span class="line"> p = &amp;a;</span><br><span class="line"> i++;</span><br></pre></td></tr></table></figure><p>（4）<code>-&gt;</code>、<code>.</code>前后不加空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>（5）<code>if</code>、<code>for</code>、<code>while</code>、<code>switch</code>等与后面的括号间应加空格，使<code>if</code>等关键字更为突出和明显。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt;= b &amp;&amp; c &gt; d)</span><br></pre></td></tr></table></figure><p><strong>12、一行程序以小于80字符为宜，不要写得过长。</strong></p></li><li><h4 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h4><p><strong>1、一般情况下，源程序应尽量简洁明了。</strong><br>说明：注释的原则是有助于对程序的阅读理解，注释应准确、易懂、简洁，此外为与各种编译环境的兼容，注释语言<strong>必须</strong>采用英文注释（为了便于大家理解，本规范中的一部分示例源码采用中文注释）。</p><p><strong>2、说明性文件（如<code>.h</code>文件、<code>.icf</code>文件、<code>.txt</code>文件等）头部应进行注释，注释必须列出：版权说明、版本号、生成日期、作者、内容、功能、与其他文件的关系、修改日志等。头文件的注释中还应有函数功能简要说明。</strong></p><p>示例：下面这段头文件的头注释比较标准。当然，并不局限于此格式，但上述信息建议要包含在内。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************************************************</span></span><br><span class="line"><span class="comment">Copyright (C), 2017-2018, Team MicroDynamics &lt;microdynamics@126.com&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 文件名。</span></span><br><span class="line"><span class="comment">File name:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 作者、版本及完成日期。</span></span><br><span class="line"><span class="comment">Author:    Version:    Date:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 用于详细说明此程序文件完成的主要功能，与其他模块或函数的接口，输出值、取值范围、</span></span><br><span class="line"><span class="comment">// 含义及参数间的控制、顺序、独立或依赖等关系。</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 其他内容的说明。</span></span><br><span class="line"><span class="comment">Others:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 主要函数列表，每条记录应包括函数名及功能简要说明。</span></span><br><span class="line"><span class="comment">Function List:</span></span><br><span class="line"><span class="comment">1. ....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 修改历史记录列表，每条修改记录应包括修改日期、修改者及修改内容简述。</span></span><br><span class="line"><span class="comment">History:</span></span><br><span class="line"><span class="comment">1. Date:</span></span><br><span class="line"><span class="comment">   Author:</span></span><br><span class="line"><span class="comment">   Modification:</span></span><br><span class="line"><span class="comment">2. ...</span></span><br><span class="line"><span class="comment">****************************************************************************/</span></span><br></pre></td></tr></table></figure><p><strong>3、源文件头部应进行注释，列出：版权说明、版本号、生成日期、作者、模块目的/功能、主要函数及其功能、修改日志等。</strong></p><p>示例：下面这段源文件的头注释比较标准，当然，并不局限于此格式，但上述信息建议要包含在内。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************************************************</span></span><br><span class="line"><span class="comment">Copyright (C), 2017-2018, Team MicroDynamics &lt;microdynamics@126.com&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 文件名。</span></span><br><span class="line"><span class="comment">FileName:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 作者、版本及完成日期。</span></span><br><span class="line"><span class="comment">Author:    Version:    Date:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 模块描述</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 版本信息</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 主要函数及其功能</span></span><br><span class="line"><span class="comment">Function List:</span></span><br><span class="line"><span class="comment">1. ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 历史修改记录</span></span><br><span class="line"><span class="comment">History:</span></span><br><span class="line"><span class="comment">&lt;author&gt;    &lt;time&gt;    &lt;version&gt;    &lt;desc&gt;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">****************************************************************************/</span></span><br></pre></td></tr></table></figure><p>说明：<strong>Description</strong>一项用于描述本文件的内容、功能、内部各部分之间的关系及本文件与其他文件关系等。<strong>History</strong>是修改历史记录列表，每条修改记录应包括修改日期、修改者及修改内容简述。</p><p>以Team MicroDynamics目前使用的源码头注释为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">THIS PROGRAM IS FREE SOFTWARE. YOU CAN REDISTRIBUTE IT AND/OR MODIFY IT</span></span><br><span class="line"><span class="comment">UNDER THE TERMS OF THE GNU GPLV3 AS PUBLISHED BY THE FREE SOFTWARE FOUNDATION.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Copyright (C), 2017-2018, Team MicroDynamics &lt;microdynamics@126.com&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Filename:    stm32f10x_driver_sys.c</span></span><br><span class="line"><span class="comment">Author:      maksyuki</span></span><br><span class="line"><span class="comment">Version:     0.1.0.20161231_release</span></span><br><span class="line"><span class="comment">Create date: 2016.8.3</span></span><br><span class="line"><span class="comment">Description: Define the bitband operation</span></span><br><span class="line"><span class="comment">Others:      none</span></span><br><span class="line"><span class="comment">Function List:</span></span><br><span class="line"><span class="comment">             none</span></span><br><span class="line"><span class="comment">History:</span></span><br><span class="line"><span class="comment">1. &lt;author&gt;    &lt;date&gt;         &lt;desc&gt;</span></span><br><span class="line"><span class="comment">   maksyuki    2016.11.29     modify the module</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br></pre></td></tr></table></figure><p><strong>4、函数头部应进行注释，列出：函数的目的/功能、输入参数、输出参数、返回值、调用关系（函数、表）等。</strong></p><p>示例：下面这段函数的注释比较标准，当然，并不局限于此格式，但上述信息建议要包含在内。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************************************************</span></span><br><span class="line"><span class="comment">Function:       // 函数名称。</span></span><br><span class="line"><span class="comment">Description:    // 函数功能、性能等的描述。</span></span><br><span class="line"><span class="comment">Calls:          // 被本函数调用的函数清单。</span></span><br><span class="line"><span class="comment">Called By:      // 调用本函数的函数清单。</span></span><br><span class="line"><span class="comment">Table Accessed: // 被访问的表（此项仅对于牵扯到数据库操作的程序）。</span></span><br><span class="line"><span class="comment">Table Updated:  // 被修改的表（此项仅对于牵扯到数据库操作的程序）。</span></span><br><span class="line"><span class="comment">Input:          // 输入参数说明，包括每个参数的作。</span></span><br><span class="line"><span class="comment">                // 用、取值说明及参数间关系。</span></span><br><span class="line"><span class="comment">Output:         // 对输出参数的说明。</span></span><br><span class="line"><span class="comment">Return:         // 函数返回值的说明。</span></span><br><span class="line"><span class="comment">Others:         // 其他说明。</span></span><br><span class="line"><span class="comment">****************************************************************************/</span></span><br></pre></td></tr></table></figure><p><strong>5、注释应与编写代码同步，修改代码同时修改相应的注释，以保证注释与代码的一致性。</strong></p><p><strong>6、注释的内容要清楚、明了，含义准确，避免产生歧义。</strong></p><p><strong>7、避免在注释中使用缩写，特别是非常用缩写，命名的标识符除外。</strong><br>说明：在使用缩写时或之前，应对缩写进行必要的说明。</p><p><strong>8、注释应与其描述的代码相近，对代码的注释应放在其上方或右方（对单条语句的注释）相邻位置，不可放在下面，如放于上方则需与其上面的代码用空行隔开。</strong></p><p>示例：以下例子不符合规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get replicate sub system index and net indicator.</span></span><br><span class="line">repssn_ind = ssn_data[index].repssn_index;</span><br><span class="line">repssn_ni  = ssn_data[index].ni;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repssn_ind = ssn_data[index].repssn_index;</span><br><span class="line">repssn_ni  = ssn_data[index].ni;</span><br><span class="line"><span class="comment">// Get replicate sub system index and net indicator.</span></span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get replicate sub system index and net indicator.</span></span><br><span class="line">repssn_ind = ssn_data[index].repssn_index;</span><br><span class="line">repssn_ni  = ssn_data[index].ni;</span><br></pre></td></tr></table></figure><p><strong>9、对于所有具有物理含义的变量、常量，如果其命名不是充分自注释的，在声明时都必须加以注释，说明其物理含义。变量、常量、宏的注释应放在其上方相邻位置或右方。</strong></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Active statistic task number.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ACT_TASK_NUMBER 1000</span></span><br></pre></td></tr></table></figure><p><strong>10、数据结构声明（包括数组、结构、枚举等），如果其命名不是充分自注释的，必须加以注释。对数据结构的注释应放在其上方相邻位置，不可放在下面。对结构中的每个域的注释放在此域的右方。</strong></p><p>示例：可按如下形式说明枚举/数据/联合结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// USART Ring Data buffer struct.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">USART_RingBuffer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u8  *buffer;   <span class="comment">// Data buffer pointer.</span></span><br><span class="line">    u16  mask;     <span class="comment">// Data mask.</span></span><br><span class="line">    vu16 index_rd; <span class="comment">// Data read index.</span></span><br><span class="line">    vu16 index_wt; <span class="comment">// Data write index.</span></span><br><span class="line">&#125; USART_RingBuffer;</span><br></pre></td></tr></table></figure><p><strong>11、全局变量要有较详细的注释，包括对其功能、取值范围、哪些函数或过程存取它以及存取时注意事项等的说明。</strong></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************************************************</span></span><br><span class="line"><span class="comment">// 全局变量功能。</span></span><br><span class="line"><span class="comment">Variable function:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 全局变量可能的取值即说明。</span></span><br><span class="line"><span class="comment">Avalable value:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 函数调用关系。</span></span><br><span class="line"><span class="comment">Call relationship:</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">****************************************************************************/</span></span><br></pre></td></tr></table></figure><p><strong>12、注释与所描述内容进行同样的缩排。</strong></p><p>示例：以下例子不符合规范，排版不整齐，阅读稍感不方便。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code one comments.</span></span><br><span class="line">    program code one;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Code two comments.</span></span><br><span class="line">     program code two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为如下布局：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Code one comments.</span></span><br><span class="line">    program code one;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Code two comments.</span></span><br><span class="line">    program code two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>13、将注释与其上面的代码用空行隔开。</strong></p><p>示例：以下例子不符合规范，代码显得过于紧凑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code one comments.</span></span><br><span class="line">program code one;</span><br><span class="line"><span class="comment">// Code two comments.</span></span><br><span class="line">program code two;</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code one comments.</span></span><br><span class="line">program code one;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code two comments.</span></span><br><span class="line">program code two;</span><br></pre></td></tr></table></figure><p><strong>14、对变量的定义和分支语句（条件分支、循环语句等）必须编写注释。</strong><br>说明：这些语句往往是程序实现某一特定功能的关键，对于维护人员来说，良好的注释帮助更好的理解程序，有时甚至优于看设计文档。</p><p><strong>15、对于<code>switch</code>语句下的<code>case</code>语句，如果因为特殊情况需要处理完一个<code>case</code>后进入下一个<code>case</code>处理，必须在该<code>case</code>语句处理完、下一个<code>case</code>语句前加上明确的注释。</strong><br>说明：这样有助于防止无故遗漏<code>break</code>语句情况的出现。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CMD_UP:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessUp();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_DOWN:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessDown();</span><br><span class="line">    <span class="keyword">if</span> (...)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Now jump into case CMD_A.</span></span><br><span class="line">        ProcessUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_A:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessA();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_B:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessB();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_C:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessC();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_D:</span><br><span class="line">&#123;</span><br><span class="line">    ProcessD();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>16、避免在一行代码或表达式的中间插入注释。</strong><br>说明：除非必要，不应在代码或表达中间插入注释，否则容易使代码可理解性变差。</p><p><strong>17、通过对函数或过程、变量、结构等正确的命名以及合理地组织代码的结构，使代码成为自注释的。</strong><br>说明：清晰准确的函数、变量等的命名，可增加代码可读性，并减少不必要的注释。</p><p><strong>18、在代码的功能、意图层次上进行注释，提供有用、额外的信息。</strong><br>说明：注释的目的是解释代码的目的、功能和采用的方法，提供代码以外的信息，帮助读者理解代码，防止没必要的重复注释信息。</p><p>示例：如下注释意义不大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If receive_flag is TRUE.</span></span><br><span class="line"><span class="keyword">if</span> (receive_flag)</span><br></pre></td></tr></table></figure><p>应如下书写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If receive a package from serial.</span></span><br><span class="line"><span class="keyword">if</span> (receive_flag)</span><br></pre></td></tr></table></figure><p><strong>19、在程序块的结束行右方加注释标记，以表明某程序块的结束。</strong><br>说明：当代码段较长，特别是多重嵌套时，这样做可以使代码更清晰，更便于阅读。</p><p>示例：参见以下例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; MAX_INDEX)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Program code.</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="comment">// End of while (index &lt; MAX_INDEX).</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// End of if (...).</span></span><br></pre></td></tr></table></figure><p><strong>20、注释格式尽量统一，除文件头注释外应全部使用行注释（//…）。</strong></p><p><strong>21、注释应考虑程序易读及外观排版的因素，使用的语言必须为英文。</strong></p></li><li><h4 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h4><p><strong>1、标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。</strong><br>说明：较短的单词可通过去掉<strong>元音</strong>形成缩写，而较长的单词可取单词的头几个字母形成缩写。</p><p>示例：以下单词的缩写能够被大家基本认可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------</span><br><span class="line">单词         缩写       单词             缩写  单词           缩写</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">addition     add        float           flt   previous      pre或prev</span><br><span class="line">answer       ans        frequency       freq  payload type  pt</span><br><span class="line">array        arr        header          hdr   pointer       ptr</span><br><span class="line">average      avg        index           idx   return code   rc</span><br><span class="line">buffer       buf或buff  image           img   record        rcd</span><br><span class="line">capture      cap或capt  increment       inc   receive       recv</span><br><span class="line">check        chk        initalize       init  result        res</span><br><span class="line">count        cnt        iteration       itr   return        ret</span><br><span class="line">column       col        length          len   source        src</span><br><span class="line">control      ctrl       memory          mem   stack         stk</span><br><span class="line">decode       dec        middle          mid   statistic     stat</span><br><span class="line">define       def        make            mk    string        str</span><br><span class="line">delete       del        message         msg   subtraction   sub</span><br><span class="line">destination  dst或dest  multiplication  mul   table         tab</span><br><span class="line">display      disp       number          num   temporary     tmp或temp</span><br><span class="line">division     div        operand         opnd  total         tot</span><br><span class="line">encode       enc        optimization    opt   time stamp    ts</span><br><span class="line">environment  env        operator        optr  value         val</span><br><span class="line">error        err        packet          pkt</span><br><span class="line">flag         flg        positon         pos</span><br></pre></td></tr></table></figure><p><strong>2、命名中若使用特殊约定或缩写，则要有注释说明。</strong><br>说明：应该在源文件的开始之处，对文件中所使用的缩写或约定，特别是特殊的缩写，进行必要的注释说明。</p><p><strong>3、自己特有的命名风格，要自始至终保持一致，不可来回变化。</strong><br>说明：个人的命名风格，在符合所在项目组或产品组的命名规则的前提下，才可使用（即命名规则中没有规定到的地方才可有个人命名风格）。</p><p><strong>4、对于变量命名，禁止取单个字符（如i、j、k…），建议除了要有具体含义外，还能表明其变量类型、数据类型等，但i、j、k作局部循环变量是允许的。</strong><br>说明：变量，尤其是局部变量，如果用单个字符表示，很容易敲错（如i写成j），而编译时又检查不出来，有可能为了这个小小的错误而花费大量的查错时间。</p><p>根据变量的类型，需要在变量原有名字之前添加相应的前缀，以下是变量前缀的类型表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---------------------</span><br><span class="line">变量前缀  解释</span><br><span class="line">---------------------</span><br><span class="line">g        全局变量（Global）</span><br><span class="line">c        常量（Const）</span><br><span class="line">s        静态变量（Static）</span><br></pre></td></tr></table></figure><p><strong>5、命名规范必须与所使用的系统风格保持一致，并在同一项目中统一。</strong></p><p><strong>6、除非必要，不要用数字或较奇怪的字符来定义标识符。</strong></p><p><strong>7、在同一软件开发项目内，应在编写代码前规划好接口部分标识符（变量、结构、函数及常量）的命名方式，以防止编译、链接时产生冲突。</strong><br>说明：对接口部分的标识符应该有更严格限制，防止冲突。如可规定接口部分的变量与常量之前加上<strong>模块</strong>标识等。</p><p><strong>8、用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。</strong></p><p>示例：下面是一些在软件中常用的反义词组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------------------</span><br><span class="line">正义词      反义词</span><br><span class="line">----------------------</span><br><span class="line">begin      end</span><br><span class="line">create     destroy</span><br><span class="line">insert     delete</span><br><span class="line">first      last</span><br><span class="line">get        release</span><br><span class="line">increment  decrement</span><br><span class="line">put        get</span><br><span class="line">add        delete</span><br><span class="line">lock       unlock</span><br><span class="line">open       close</span><br><span class="line">min        max</span><br><span class="line">old        new</span><br><span class="line">start      stop</span><br><span class="line">next       previous</span><br><span class="line">source     target</span><br><span class="line">show       hide</span><br><span class="line">send       receive</span><br><span class="line">source     destination</span><br><span class="line">cut        paste</span><br><span class="line">up         down</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> min_sum;</span><br><span class="line"><span class="keyword">int</span> max_sum;</span><br></pre></td></tr></table></figure><p><strong>9、除了编译开关/头文件等特殊应用，应避免使用以下划线开始和结尾的宏定义。</strong></p></li><li><h4 id="代码可读性"><a href="#代码可读性" class="headerlink" title="代码可读性"></a>代码可读性</h4><p><strong>1、注意运算符的优先级，并用括号明确表达式的操作顺序，避免使用默认优先级。</strong><br>说明：防止阅读程序时产生误解，防止因默认的优先级与设计思想不符而导致程序出错。</p><p>示例：下列语句中的表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = (high &lt;&lt; <span class="number">8</span>) | low</span><br><span class="line"><span class="keyword">if</span> ((a | b) &amp;&amp; (a &amp; c))</span><br><span class="line"><span class="keyword">if</span> ((a | b) &lt; (c &amp; d))</span><br></pre></td></tr></table></figure><p>如果书写为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">high &lt;&lt; <span class="number">8</span> | low     （<span class="number">1</span>）</span><br><span class="line">a | b &amp;&amp; a &amp; c      （<span class="number">2</span>）</span><br><span class="line">a | b &lt; c &amp; d       （<span class="number">3</span>）</span><br></pre></td></tr></table></figure><p>由于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">high &lt;&lt; <span class="number">8</span> | low = ( high &lt;&lt; <span class="number">8</span>) | low</span><br><span class="line">a | b &amp;&amp; a &amp; c  = (a | b) &amp;&amp; (a &amp; c)</span><br><span class="line">a | b &lt; c &amp; d = a | (b &lt; c) &amp; d</span><br></pre></td></tr></table></figure><p>所以（1）和（2）不会出错，但语句不易理解，而语句（3）却造成了条件判断的错误。</p><p><strong>2、避免使用不易理解的数字，用有意义的标识来替代。涉及物理状态或者含有物理意义的常量，不应直接使用数字，必须用有意义的枚举或宏来代替。</strong></p><p>示例：以下程序可读性差。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (TaskTable[index].state == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    TaskTable[index].state = <span class="number">1</span>;</span><br><span class="line">    ...  <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为如下形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_STATE_IDLE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_STATE_BUSY 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TaskTable[index].state == TASK_STATE_IDLE)</span><br><span class="line">&#123;</span><br><span class="line">    TaskTable[index].state = TASK_STATE_BUSY;</span><br><span class="line">    ...  <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、源程序中关系较为紧密的代码应尽可能相邻。</strong><br>说明：便于程序阅读和查找。</p><p>示例：以下代码布局不太合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rect.length  = <span class="number">10</span>;</span><br><span class="line">receive_flag = <span class="literal">true</span>;</span><br><span class="line">rect.width   = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>若按如下形式书写，可能更清晰一些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rect.length  = <span class="number">10</span>;</span><br><span class="line">rect.width   = <span class="number">5</span>;</span><br><span class="line">receive_flag = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>4、不要使用难懂的技巧性很高的语句，除非很有必要时。</strong><br>说明：高技巧语句不等于高效率的程序，实际上程序的效率关键在于算法。</p><p>示例：以下表达式，考虑不周就可能出问题，也较难理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*stat_poi++ += <span class="number">1</span>;</span><br><span class="line">*++stat_poi += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>应分别改为如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此二语句功能相当于“*stat_poi++ += 1;”。</span></span><br><span class="line">*stat_poi += <span class="number">1</span>;</span><br><span class="line"> stat_poi++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此二语句功能相当于“*++stat_poi += 1;”。</span></span><br><span class="line">++stat_poi;</span><br><span class="line"> *stat_poi += <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="代码变量与结构"><a href="#代码变量与结构" class="headerlink" title="代码变量与结构"></a>代码变量与结构</h4><p><strong>1、尽可能少地使用公共变量。</strong><br>说明：公共变量是增大模块间耦合的原因之一，故应减少没必要的公共变量以降低模块间的耦合度。</p><p><strong>2、仔细定义并明确公共变量的含义、作用、取值范围及公共变量间的关系。</strong><br>说明：在对变量声明的同时，应对其含义、作用及取值范围进行注释说明，同时若有必要还应说明与其他变量的关系。</p><p><strong>3、明确公共变量与操作此公共变量的函数或过程的关系，如访问、修改及创建等。</strong><br>说明：明确过程操作变量的关系后，将有利于程序的进一步优化、单元测试、系统联调以及代码维护等。这种关系的说明可在注释或文档中描述。</p><p>示例：在源文件中，可按如下注释形式说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------------------</span><br><span class="line">RELATION      initRectValues inputRectValues printRectValues calculateRectArea</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">g_rect_length Create         Modify          Access          Access</span><br><span class="line">g_rect_width  Create         Modify          Access          Access/Modify</span><br></pre></td></tr></table></figure><p>注：RELATION为操作关系。<code>initRectValues()</code>、<code>inputRectValues()</code>、<code>printRectValues()</code>、<code>calculateRectArea()</code>为四个不同的函数。<code>g_rect_length</code>、<code>g_rect_width</code>为两个全局变量。<strong>Create</strong>表示创建，<strong>Modify</strong>表示修改，<strong>Access</strong>表示访问。其中，函数<code>inputRectValues()</code>和<code>printRectValues()</code>都可修改变量<code>g_rect_width</code>，故此变量将引起函数间较大的耦合，并可能增加代码测试、维护的难度。</p><p><strong>4、当向公共变量传递数据时，要十分小心，防止赋予不合理的值或越界等现象发生。</strong><br>说明：对公共变量赋值时，若有必要应进行合法性检查，以提高代码的可靠性、稳定性。</p><p><strong>5、防止局部变量与公共变量同名。</strong><br>说明：若使用了较好的命名规则，那么此问题可自动消除。</p><p><strong>6、严禁使用未经初始化的变量作为右值。</strong><br>说明：特别是在C/C++中引用未经赋值的指针，经常会引起系统崩溃。</p><p><strong>7、构造仅有一个模块或函数可以修改、创建，而其余有关模块或函数只访问的公共变量，防止多个不同模块或函数都可以修改、创建同一公共变量的现象。</strong><br>说明：降低公共变量耦合度。</p><p><strong>8、使用严格形式定义的、可移植的数据类型，尽量不要使用与具体硬件或软件环境关系密切的变量。</strong><br>说明：使用标准的数据类型，有利于程序的移植。</p><p><strong>9、结构的功能要单一，是针对一种事务的抽象。</strong><br>说明：设计结构时应力争使结构代表一种现实事务的抽象，而不是同时代表多种。结构中的各元素应代表同一事务的不同侧面，而不应把描述没有关系或关系很弱的不同事务的元素放到同一结构中。</p><p>示例：以下结构不太清晰、合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_name[<span class="number">8</span>]; <span class="comment">// Student&#x27;s name.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_age;     <span class="comment">// Student&#x27;s age.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_sex;     <span class="comment">// Student&#x27;s sex.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> teacher_name[<span class="number">8</span>]; <span class="comment">// Student teacher&#x27;s name.</span></span><br><span class="line">    unisgned <span class="keyword">char</span> teacher_sex;     <span class="comment">// Student teacher&#x27;s sex.</span></span><br><span class="line">&#125; StudentInformation;</span><br></pre></td></tr></table></figure><p>若改为如下，可能更合理些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TeacherInfomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> teacher_name[<span class="number">8</span>]; <span class="comment">// Student teacher&#x27;s name.</span></span><br><span class="line">    unisgned <span class="keyword">char</span> teacher_sex;     <span class="comment">// Student teacher&#x27;s sex.</span></span><br><span class="line">&#125; TeacherInfomation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_name[<span class="number">8</span>]; <span class="comment">// Student&#x27;s name.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_age;     <span class="comment">// Student&#x27;s age.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> student_sex;     <span class="comment">// Student&#x27;s sex.</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  teacher_index;   <span class="comment">// Student&#x27;s teacher index.</span></span><br><span class="line">&#125; StudentInformation;</span><br></pre></td></tr></table></figure><p><strong>10、不要设计面面俱到、非常灵活的数据结构。</strong><br>说明：面面俱到、灵活的数据结构反而容易引起误解和操作困难。</p><p><strong>11、不同结构间的关系不要过于复杂。</strong><br>说明：若两个结构间关系较复杂、密切，那么应合为一个结构。</p><p>示例：以下两个结构体的构造不合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformationA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> city[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> addr[<span class="number">40</span>];</span><br><span class="line">&#125; PersonInformationA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformationB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> age;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tel;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">&#125; PersonInformationB;</span><br></pre></td></tr></table></figure><p>由于两个结构都是描述同一事物的，那么不如合成一个结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> age;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tel;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> city[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> addr[<span class="number">40</span>];</span><br><span class="line">&#125; PersonInformation;</span><br></pre></td></tr></table></figure><p><strong>12、结构体中元素的个数应适中。若结构体中元素个数过多可考虑依据某种原则把元素组成不同的子结构体，以减少原结构体中元素的个数。</strong><br>说明：增加结构体的可理解性、可操作性和可维护性。</p><p>示例：可将上面的PersonInformation进行如下的划分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformationBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> age;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">&#125; PersonInformationBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformationAddress</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tel;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> addr[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> city[<span class="number">15</span>];</span><br><span class="line">&#125; PersonInformationAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PersonInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PersonInformationBase    person_base;</span><br><span class="line">    PersonInformationAddress person_addr;</span><br><span class="line">&#125; PersonInformation;</span><br></pre></td></tr></table></figure><p><strong>13、仔细设计结构体中元素的布局与排列顺序，使结构体容易理解、节省占用空间，并减少误用情况的发生。</strong><br>说明：合理排列结构体中元素顺序，可节省空间并提高可读性。</p><p>示例：以下结构体中的位域排列会占用不少空间，且可读性也稍差。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ExampleStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> valid: <span class="number">1</span>;</span><br><span class="line">    PersonInformation person;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flag:  <span class="number">1</span>;</span><br><span class="line">&#125; ExampleStruct;</span><br></pre></td></tr></table></figure><p>若改成如下形式，不仅可节省1字节空间，可读性也变好了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ExampleStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> valid: <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flag:  <span class="number">1</span>;</span><br><span class="line">    PersonInformation person;</span><br><span class="line">&#125; ExampleStruct;</span><br></pre></td></tr></table></figure><p><strong>14、结构体的设计要尽量考虑向前兼容和以后的版本升级，并为某些未来可能的应用保留余地（如预留一些空间等）。</strong><br>说明：软件向前兼容的特性，是软件产品是否成功的重要标志之一。如果要想使产品具有较好的前向兼容，那么在产品设计之初就应为以后版本升级保留一定余地，并且在产品升级时必须考虑前一版本的各种特性。</p><p><strong>15、留心具体语言及编译器处理不同数据类型的原则及有关细节。</strong><br>说明：如在C语言中，<code>static</code>局部变量将在内存的“数据区”中生成，而非<code>static</code>局部变量将在“堆栈”中生成。这些细节对程序质量的保证非常重要。</p><p><strong>16、编程时，要注意数据类型的强制转换。</strong><br>说明：当进行数据类型强制转换时，其数据的意义、转换后的取值等都有可能发生变化，而这些细节若考虑不周，就很有可能留下隐患。</p><p><strong>17、对编译系统默认的数据类型转换，也要有充分的认识。</strong></p><p>示例：以下赋值多数编译器不产生告警，但值的含义还是稍有变化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>           variable_a;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> variable_b;</span><br><span class="line"></span><br><span class="line">variable_a = <span class="number">-1</span>;</span><br><span class="line">variable_b = variable_a; <span class="comment">// 编译器不产生告警，此时variable_b为0xFFFF。</span></span><br></pre></td></tr></table></figure><p><strong>18、尽量减少没有必要的数据类型默认转换与强制转换。</strong></p><p><strong>19、合理地设计数据并使用自定义数据类型，避免数据间进行不必要的类型转换。</strong></p><p><strong>20、对自定义数据类型进行恰当命名，使它成为自描述性的，以提高代码可读性。注意其命名方式在同一产品中的统一。</strong><br>说明：使用自定义类型，可以弥补编程语言提供类型少、信息量不足的缺点，并能使程序清晰、简洁。</p><p>示例：可参考如下方式声明自定义数据类型。下面的声明可使数据类型的使用简洁、明了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>  BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> WORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>   DWORD;</span><br></pre></td></tr></table></figure><p><strong>21、当声明用于分布式环境或不同CPU间通信环境的数据结构时，必须考虑机器的字节顺序、使用的位域及字节对齐等问题。</strong><br>说明：比如Intel CPU与68360 CPU在处理位域及整数时，其在内存存放的<strong>顺序</strong>正好相反。</p></li><li><h4 id="代码函数与过程"><a href="#代码函数与过程" class="headerlink" title="代码函数与过程"></a>代码函数与过程</h4><p><strong>1、对所调用函数的错误返回码要仔细、全面地处理。</strong></p><p><strong>2、明确函数功能，精确（而不是近似）地实现函数设计。</strong></p><p><strong>3、编写可重入函数时，应注意局部变量的使用（如编写C/C++语言的可重入函数时，应使用 <code>auto</code>即缺省态局部变量或寄存器变量）。</strong><br>说明：编写C/C++语言的可重入函数时，不应使用<code>static</code>局部变量，否则必须经过特殊处理，才能使函数具有可重入性。</p><p><strong>4、编写可重入函数时，若使用全局变量，则应通过关中断、信号量（即 P、V 操作）等手段对其加以保护。</strong><br>说明：若对所使用的全局变量不加以保护，则此函数就不具有可重入性，即当多个进程调用此函数时，很有可能使有关全局变量变为不可知状态。</p><p>示例：假设g_variable是<code>int</code>型全局变量，函数<code>testSemaphore()</code>返回g_variable平方值。那么如下函数不具有可重入性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">testSemaphore</span><span class="params">(<span class="keyword">int</span> variable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    g_variable = variable;         <span class="comment">// （1）</span></span><br><span class="line">    temp = calculateSqureValue();  <span class="comment">// （2）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数若被多个进程调用的话，其结果可能是未知的，因为当语句（1）刚执行完后，另外一个使用本函数的进程可能正好被激活，那么当新激活的进程执行到此函数时，将使<code>g_variable</code>赋与另一个不同的<code>variable</code>值，所以当控制重新回到语句（2）后，计算出的<code>temp</code>很可能不是预想中的结果。此函数应如下改进：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">testSemaphore</span><span class="params">(<span class="keyword">int</span> variable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    [申请信号量操作]</span><br><span class="line"></span><br><span class="line">    g_variable = variable;</span><br><span class="line">    temp = testSemaphore();</span><br><span class="line"></span><br><span class="line">    [释放信号量操作]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若申请不到“信号量”，说明另外的进程正处于给<code>g_variable</code>赋值并计算其平方过程中（即正在使用此信号），本进程必须等待其释放信号后，才可继续执行。若申请到信号，则可继续执行，但其他进程必须等待本进程释放信号量后，才能再用本信号。</p><p><strong>5、在同一项目组中应明确规定对接口函数参数的合法性检查应由函数的调用者负责还是由接口函数本身负责，缺省是由函数调用者负责。</strong><br>说明：对于模块间接口函数参数的合法性检查这一问题，往往有两个极端现象，即：要么是调用者和被调用者对参数均不作合法性检查，结果就遗漏了合法性检查这一必要的处理过程，造成问题隐患。要么就是调用者和被调用者均对参数进行合法性检查，这种情况虽不会造成问题，但产生了冗余代码，降低了效率。</p><p><strong>6、防止将函数的参数作为工作变量。</strong><br>说明：将函数的参数作为工作变量，有可能错误地改变参数内容，所以很危险。对必须改变的参数，最好先用局部变量代之，最后再将该局部变量的内容赋给该参数。</p><p>示例：以下函数的实现不太好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculateDataSum</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> *data, <span class="keyword">int</span> *sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *sum += data[i]; <span class="comment">// sum成了工作变量，不太好。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若改为如下，则更好些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculateDataSum</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> *data, <span class="keyword">int</span> *sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum_temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum_temp += data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *sum = sum_temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、函数的规模尽量限制在200行以内。</strong><br>说明：不包括注释和空格行。</p><p><strong>8、一个函数仅完成一件功能。</strong></p><p><strong>9、为简单功能编写函数。</strong><br>说明：虽然为仅用一两行就可完成的功能去编函数好象没有必要，但用函数可使功能明确化，增加程序可读性，亦可方便维护、测试。</p><p>示例：以下语句的功能就不是很明显。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = (a &gt; b) ? a : b;</span><br></pre></td></tr></table></figure><p>改为如下就很清晰了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((a &gt; b) ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value = getMaxValue(a, b);</span><br></pre></td></tr></table></figure><p>或改为如下的形式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_MAX_VALUE(a, b) (((a) &gt; (b)) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line">value = GET_MAX_VALUE(a, b);</span><br></pre></td></tr></table></figure><p><strong>10、不要设计多用途、面面俱到的函数。</strong><br>说明：多功能集于一身的函数，很可能使函数的理解、测试、维护等变得困难。</p><p><strong>11、函数的功能应该是可以预测的，也就是只要输入数据相同就应产生同样的输出。</strong><br>说明：带有内部“存储器”的函数功能可能是不可预测的，因为它的输出可能取决于内部存储器（如某标记）的状态。这样的函数既不易于理解又不利于测试和维护。在C/C++语言中，函数的<code>static</code>局部变量是函数的内部存储器，有可能使函数的功能不可预测，然而，当某函数的返回值为指针类型时，则必须将<code>static</code>局部变量的地址作为返回值，若为<code>auto</code>类，则返回为错误指针。</p><p>示例：以下函数，其返回值（即功能）是不可预测的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">integer_sum</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// sum是static类型的，若改为auto类型，则函数即变为可预测。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>12、尽量不要编写依赖于其他函数内部实现的函数。</strong><br>说明：此条为函数独立性的基本要求。由于目前大部分高级语言都是结构化的，所以通过具体语言的语法要求与编译器功能，基本就可以防止这种情况发生。但在汇编语言中，由于其灵活性，很可能使函数出现这种情况。</p><p><strong>13、避免设计多参数函数，不使用的参数从接口中去掉。</strong><br>说明：目的是减少函数间接口的复杂度。</p><p><strong>14、非调度函数应减少或防止控制参数，尽量只使用数据参数。</strong><br>说明：本建议的目的是防止函数间的控制耦合。调度函数是指根据输入的消息类型或控制命令，来启动相应的功能实体（即函数或过程），而本身并不完成具体功能。控制参数是指改变函数功能行为的参数，即函数要根据此参数来决定具体怎样工作。非调度函数的控制参数增加了函数间的控制耦合，很可能使函数间的耦合度增大，并使函数的功能不唯一。</p><p>示例：以下函数的构造不太合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addOrSubDataValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">unsigned</span> <span class="keyword">char</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == INTEGER_ADD)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == INTEGER_SUB)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (a – b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不如分为如下两个函数清晰：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addDataValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subDataValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a – b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>15、检查函数所有参数输入的有效性。</strong></p><p><strong>16、检查函数所有非参数输入的有效性，如数据文件、公共变量等。</strong><br>说明：函数的输入主要有两种：一种是参数输入；另一种是全局变量、数据文件的输入，即非参数输入。函数在使用输入之前，应进行必要的检查。</p><p><strong>17、函数名应准确描述函数的功能。</strong></p><p><strong>18、使用动宾词组为执行某操作的函数命名。如果是OOP方法，可以只有动词（名词是对象本身）。</strong></p><p>示例：参照以下方式命名函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printRecordFile</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> file_name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputRecoreFile</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">getCurrentData</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>19、避免使用无意义或含义不清的动词为函数命名。</strong><br>说明：避免用含义不清的动词如<strong>process</strong>、<strong>handle</strong>等为函数命名，因为这些动词并没有说明要具体做什么。</p><p><strong>20、函数的返回值要清楚、明了，让使用者不容易忽视错误情况。</strong><br>说明：函数的每种出错返回值的意义要清晰、明了、准确，防止使用者误用、理解错误或忽视错误返回码。</p><p><strong>21、除非必要，最好不要把与函数返回值类型不同的变量，以编译系统默认的转换方式或强制的转换方式作为返回值返回。</strong></p><p><strong>22、让函数在调用点显得易懂、容易理解。</strong></p><p><strong>23、在调用函数填写参数时，应尽量减少没有必要的默认数据类型转换或强制数据类型转换。</strong><br>说明：因为数据类型转换或多或少存在危险。</p><p><strong>24、避免函数中不必要语句，防止程序中的垃圾代码。</strong><br>说明：程序中的垃圾代码不仅占用额外的空间，而且还常常影响程序的功能与性能，很可能给程序的测试、维护等造成不必要的麻烦。</p><p><strong>25、防止把没有关联的语句放到一个函数中。</strong><br>说明：防止函数或过程内出现随机内聚。随机内聚是指将没有关联或关联很弱的语句放到同一个函数或过程中。随机内聚给函数或过程的维护、测试及以后的升级等造成了不便，同时也使函数或过程的功能不明确。使用随机内聚函数，常常容易出现在一种应用场合需要改进此函数，而另一种应用场合又不允许这种改进，从而陷入困境。</p><p>在编程时，经常遇到在不同函数中使用相同的代码，许多开发人员都愿把这些代码提出来，并构成一个新函数。若这些代码关联较大并且是完成一个功能的，那么这种构造是合理的，否则这种构造将产生随机内聚函数。</p><p>示例：以下函数就是一种随机内聚。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVariableValues</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rect.length = <span class="number">0</span>;</span><br><span class="line">    rect.width  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    point.x = <span class="number">10</span>;</span><br><span class="line">    point.y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>矩形的长、宽与点的坐标基本没有任何关系，故以上函数是随机内聚。应如下分为两个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRectValues</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rect.length = <span class="number">0</span>;</span><br><span class="line">    rect.width  = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPointValues</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point.x = <span class="number">10</span>;</span><br><span class="line">    point.y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>26、如果多段代码重复做同一件事情，那么在函数的划分上可能存在问题。</strong><br>说明：若此段代码各语句之间有实质性关联并且是完成同一件功能的，那么可考虑把此段代码构造成一个新的函数。</p><p><strong>27、功能不明确、较小的函数，特别是仅有一个上级函数调用它时，应考虑把它合并到上级函数中，而不必单独存在。</strong><br>说明：模块中函数划分的过多，一般会使函数间的接口变得复杂。所以功能过小的函数，特别是扇入很低的或功能不明确的函数，不值得单独存在。</p><p><strong>28、设计高扇入、合理扇出（小于7）的函数。</strong><br>说明：扇出是指一个函数直接调用（控制）其他函数的数目，而扇入是指有多少上级函数调用它。</p><p>扇出过大，表明函数过分复杂，需要控制和协调过多的下级函数。而扇出过小，如总是1，表明函数的调用层次可能过多，这样不利程序阅读和函数结构的分析，并且程序运行时会对系统资源如堆栈空间等造成压力。函数较合理的扇出（调度函数除外）通常是<strong>3~5</strong>。扇出太大，一般是由于缺乏中间层次，可适当增加中间层次的函数。扇出太小，可把下级函数进一步分解成多个函数，或合并到上级函数中。当然分解或合并函数时，不能改变要实现的功能，也不能违背函数间的独立性。</p><p>扇入越大，表明使用此函数的上级函数越多，这样的函数使用效率高，但不能违背函数间的独立性而单纯地追求高扇入。公共模块中的函数及底层函数应该有较高的扇入。</p><p>较好的软件结构通常是顶层函数的扇出较高，中层函数的扇出较少，而底层函数则扇入到公共模块中。</p><p><strong>29、减少函数本身或函数间的递归调用。</strong><br>说明：递归调用特别是函数间的递归调用（如 A-&gt;B-&gt;C-&gt;A），影响程序的可理解性：递归调用一般都占用较多的系统资源（如栈空间）；递归调用对程序的测试有一定影响。因此，除非为某些算法或功能的实现方便，否则应减少没必要的递归调用。</p><p><strong>30、仔细分析模块的功能及性能需求，并进一步细分，同时若有必要画出有关数据流图，据此来进行模块的函数划分与组织。</strong><br>说明：函数的划分与组织是模块实现过程中很关键的一步，如何划分出合理的函数结构，关系到模块的最终效率和可维护性、可测性等。根据模块的功能图和数据流图映射出函数结构是常用方法之一。</p><p><strong>31、改进模块中函数的结构，降低函数间的耦合度，并提高函数的独立性以及代码可读性、效率和可维护性。优化函数结构时，要遵守以下原则：</strong></p><ul><li>不能影响模块功能的实现。</li><li>仔细考查模块或函数出错处理及模块的性能要求并进行完善。</li><li>通过分解或合并函数来改进软件结构。</li><li>考查函数的规模，过大的要进行分解。</li><li>降低函数间接口的复杂度。</li><li>不同层次的函数调用要有较合理的扇入、扇出。</li><li>函数功能应可预测。</li><li>提高函数内聚（单一功能的函数内聚最高）。</li></ul><p>说明：对初步划分后的函数结构应进行改进、优化，使之更为合理。</p><p><strong>32、在多任务操作系统的环境下编程，要注意函数可重入性的构造。</strong><br>说明：可重入性是指函数可以被多个任务进程调用。在多任务操作系统中，函数是否具有可重入性是非常重要的，因为这是多个进程可以共用此函数的必要条件。另外，编译器是否提供可重入函数库，与它所服务的操作系统有关，只有操作系统是多任务时，编译器才有可能提供可重入函数库。</p><p><strong>33、对于提供了返回值的函数，在引用时最好使用其返回值。</strong></p><p><strong>34、当一个函数（过程）中对较长变量（一般是结构体成员）有较多引用时，可以用一个意义相当的宏代替。</strong><br>说明：这样可以增加编程效率和程序的可读性。</p><p>示例：在某过程中较多引用<code>receive_buffer[socket].data_ptr</code>，则可以通过以下宏定义来代替：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PTR_SOCKET_DATA receive_buffer[socket].data_ptr</span></span><br></pre></td></tr></table></figure></li><li><h4 id="代码可测性"><a href="#代码可测性" class="headerlink" title="代码可测性"></a>代码可测性</h4><p><strong>1、在同一项目组内，要有一套统一的为集成测试与系统联调准备的调测开关及相应输出函数，并且要有详细的说明。</strong></p><p><strong>2、在同一项目组内，调测输出的信息串的格式要有统一的形式。信息串中至少要有所在模块名（或源文件名）及行号。</strong><br>说明：统一的调测信息格式便于集成测试。</p><p><strong>3、编程的同时要为单元测试选择恰当的测试点，并仔细构造测试代码、测试用例，同时给出明确的注释说明。测试代码部分应作为（模块中的）一个子模块，以方便测试代码在模块中的安装与拆卸（通过调测开关）。</strong><br>说明：为单元测试而准备。</p><p><strong>4、在进行集成测试/系统联调之前，要构造好测试环境、测试项目及测试用例，同时仔细分析并优化测试用例，以提高测试效率。</strong><br>说明：好的测试用例应尽可能模拟出程序所遇到的边界值、各种复杂环境及一些极端情况等。</p><p><strong>5、使用断言来发现软件问题，提高代码可测性。</strong><br>说明：断言是对某种假设条件进行检查（可理解为若条件成立则无动作，否则应报告），它可以快速发现并定位软件问题，同时对系统错误进行自动报警。断言可以对在系统中隐藏很深，用其他手段极难发现的问题进行定位，从而缩短软件问题定位时间，提高系统的可测性。在实际应用时，可根据具体情况灵活地设计断言。</p><p><strong>6、用断言来检查程序正常运行时不应发生但在调测时有可能发生的非法情况。</strong></p><p><strong>7、不能用断言来检查最终软件肯定会出现且必须处理的错误情况。</strong><br>说明：断言是用来处理不应该发生的错误情况的，对于可能会发生的且必须处理的情况要写防错程序，而不是断言。如某模块收到其他模块或链路上的消息后，要对消息的合理性进行检查，此过程为正常的错误检查，不能用断言来实现。</p><p><strong>8、对较复杂的断言加上明确的注释。</strong><br>说明：为复杂的断言加注释，可澄清断言含义并减少不必要的误用。</p><p><strong>9、用断言确认函数的参数。</strong></p><p>示例：假设某函数参数中有一个指针，那么使用指针前可对它检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TEST_ASSERT(str != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10、用断言保证没有定义的特性或功能不被使用。</strong></p><p><strong>11、用断言对程序开发环境的假设进行检查。</strong><br>说明：针对程序运行时所需的软硬件环境及配置要求，不能用断言来检查，而必须有一段专门代码处理。断言仅用于对程序开发环境中的假设及所配置的某版本软硬件是否具有某种功能的假设进行检查。如某网卡是否在系统运行环境中配置了，应由程序中的正式代码来检查；而此网卡是否具有某设想的功能，则可由断言来检查。</p><p>对编译器提供的功能及特性假设可用断言检查，原因是最终的运行代码或机器码与编译器已没有任何直接关系，及软件运行过程中不会也不应该对编译器的功能提出任何需求。</p><p>示例：用断言检查编译器的<code>int</code>型数据占用的内存空间是否为2。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TEST_ASSERT(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) == <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>12、正式软件中应把断言及其他调测代码删除。</strong><br>说明：加快软件运行速度。</p><p><strong>13、在软件系统中设置与取消有关测试手段，不能对软件实现的功能等产生影响。</strong><br>说明：即有测试代码的软件和关闭测试代码的软件在功能行为上应一致。</p><p><strong>14、用调测开关来切换软件的Debug版和Release版，而不要同时存在Debug和Release版本的不同源文件，以减少维护的难度。</strong></p><p><strong>15、软件的Debug和Release版本应该统一进行维护，并时刻保证两个版本在功能实现上的一致性。</strong></p><p><strong>16、在编写代码之前，应预先设计好程序调试与测试的方法和手段，并设计好各种调测开关机相应测试代码如输出函数等。</strong><br>说明：程序的调试与测试是软件生存周期中很重要的一个阶段，如何对软件进行较全面、高效率的测试，并尽可能地找出软件中的错误就成为一个很关键的问题。因此在编写源代码之前，除了要有一套比较完善的测试计划外，还应设计出一系列代码测试手段，为单元测试、集成测试及系统联调提供方便。</p><p><strong>17、调测开关应分为不同级别和类型。</strong><br>说明：调测开关的设置及分类应从以下几方面考虑：针对模块或系统某部分代码的调测；针对模块或系统某功能的调测；出于某种其他目的，如对性能、容量等的测试。这样做便于软件功能的调测，并利于模块的单元测试和系统联调等。</p><p><strong>18、编写防错程序，然后在处理错误之后用断言宣布错误的发生。</strong></p></li><li><h4 id="代码执行效率"><a href="#代码执行效率" class="headerlink" title="代码执行效率"></a>代码执行效率</h4><p><strong>1、编程时要经常注意代码的效率。</strong><br>说明：代码效率分为全局效率、局部效率、时间效率和空间效率。全局效率是站在整个系统角度上的效率；局部效率是站在模块或函数角度上的效率；时间效率是指程序处理输入任务所需的时间长短；空间效率是指程序所需内存空间，如机器代码空间大小、数据空间大小、栈空间大小等。</p><p><strong>2、在保证软件系统的正确性、稳定性、可读性和可测性的前提下，提高代码效率。</strong><br>说明：不能因一味地追求代码效率而对软件的正确性、稳定性、可读性和可测性造成影响。</p><p><strong>3、局部效率应为全局效率服务，不能应为提高局部效率而对全局效率造成影响。</strong></p><p><strong>4、通过对系统数据结构的划分与组织的改进，以及对程序算法的优化来提高空间效率。</strong><br>说明：这种方式是解决软件空间效率的根本办法。</p><p>示例：以下记录学生学习成绩的结构体不合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>  BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> WORD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentScoreInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BYTE  name[<span class="number">8</span>];</span><br><span class="line">    BYTE  age;</span><br><span class="line">    BYTE  sex;</span><br><span class="line">    BYTE  <span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">    BYTE  subject;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">&#125; StudentScoreInformation;</span><br></pre></td></tr></table></figure><p>因为每个学生都会有很多科目的成绩，如果使用以上的结构将占用较大的空间。应按照以下的方式进行改进（分为两个结构体），总的存储空间将变小，操作也变得更方便。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BYTE name[<span class="number">8</span>];</span><br><span class="line">    BYTE age;</span><br><span class="line">    BYTE sex;</span><br><span class="line">    BYTE <span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">&#125; StudentInformation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentScoreInformation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD  student_index;</span><br><span class="line">    BYTE  subject;</span><br><span class="line">    flaot score;</span><br><span class="line">&#125; StudentScoreInformation;</span><br></pre></td></tr></table></figure><p><strong>5、循环体内工作量最小化。</strong><br>说明：应仔细考虑循环体内的语句是否可以放在循环体之外，使循环体内工作量最小，从而提高程序的执行效率。</p><p>示例：以下代码效率较低。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NUMBER; i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    sum_backup = sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句<code>sum_backup = sum;</code>完全可以放到<code>for</code>语句之后，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NUMBER; i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum_backup = sum;</span><br></pre></td></tr></table></figure><p><strong>6、仔细分析有关算法、并进行优化。</strong></p><p><strong>7、仔细考查、分析系统及模块处理输入（如事务、消息等）的方式，并加以改进。</strong></p><p><strong>8、对模块中函数的划分及组织方式进行分析、优化，改进模块中函数的组织结构，提高程序执行效率。</strong><br>说明：软件系统的效率主要与算法、处理任务方式、系统功能及函数结构有很大关系，仅在代码上下功夫一般不能解决根本问题。</p><p><strong>9、编程时，要随时留意代码效率；优化代码时，要考虑周全。</strong></p><p><strong>10、不应花过多的时间提高调用频率不高的函数的代码效率。</strong><br>说明：对代码优化可提高效率，但若考虑不周很有可能引起严重后果。</p><p><strong>11、要仔细地构造或直接用汇编编写调用频繁或性能要求极高的函数。</strong><br>说明：只有对编译系统产生机器码的方式以及硬件系统较为熟悉时，才可使用汇编嵌入方式。嵌入汇编可提高时间及空间效率，但也存在一定风险。</p><p><strong>12、在保证程序质量的前提下，通过压缩代码量、去掉不必要代码以及减少不必要的局部和全局变量来提高空间效率。</strong><br>说明：这种方式对提高空间效率可起到一定作用，但往往不能解决根本问题。</p><p><strong>13、减少CPU切入循环层的次数。</strong></p><p>示例：以下代码效率较低。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以改为如下方式，以提高效率：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>14、尽量减少循环嵌套层次。</strong></p><p><strong>15、避免在循环体内包含判断语句，应将循环语句至于判断语句的代码块中。</strong><br>说明：目的是减少判断次数。循环体中的判断语句是否可以移到循环体外，要视程序的具体情况而言，一般情况，与循环变量无关的判断语句可以移到循环体外，而有关的则不可以。</p><p>示例：以下代码的效率稍低。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NUMBER; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (data_type == RECT_AREA)</span><br><span class="line">    &#123;</span><br><span class="line">        rect_sum_area += rect[i].area;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rect_sum_length += rect[i].length;</span><br><span class="line">        rect_sum_width  += rect[i].width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为判断语句与循环变量无关，可进行以下改进，以减少判断次数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data_type == RECT_AREA)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rect_sum_area += rect[i].area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rect_sum_length += rect[i].length;</span><br><span class="line">        rect_sum_width  += rect[i].width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>16、尽量用乘法或其他方法代替除法，特别是浮点运算中的除法。</strong><br>说明：浮点运算除法要占用较多CPU资源。</p><p>示例：以下表达式可能占用较多CPU资源。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"></span><br><span class="line">radius = circle_length / (<span class="number">2</span> * PI);</span><br></pre></td></tr></table></figure><p>应把浮点除法改为浮点乘法，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI_RECIPROCAL (1 / 3.1415926)</span></span><br><span class="line"></span><br><span class="line">radius = circle_length * PI_RECIPROCAL / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>17、不要一味追求紧凑的代码。</strong><br>说明：因为紧凑的代码并不代表高效的机器码。</p></li><li><h4 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h4><p><strong>1、在软件设计过程中构建软件质量。</strong></p><p><strong>2、代码质量保证优先原则。</strong></p><ul><li>正确性，之程序要实现设计要求的功能。</li><li>稳定性、安全性，指程序稳定、可靠、安全。</li><li>可测试性，指程序要具有良好的可测试性。</li><li>规范/可读性，指程序书写风格、命名规则等要符合规范。</li><li>全局效率，指软件系统的整体效率。</li><li>局部效率，指某个模块、子模块、函数的本身效率。</li><li>个人表达方式，指个人编程习惯。</li></ul><p><strong>3、只引用属于自己的存储空间。</strong></p><p><strong>4、防止引用已经释放的内存空间。</strong></p><p><strong>5、在过程/函数中分配的内存，要在过程/函数退出之前释放。</strong></p><p><strong>6、过程/函数中申请的文件句柄，要在过程/函数退出之前关闭。</strong><br>说明：分配的内存不释放以及文件句柄不关闭是比较常见的错误，而且稍不注意就有可能发生。这类错误往往会引起很严重的后果，且难以定位。</p><p><strong>7、防止内存操作越界。</strong><br>说明：内存操作主要是指对数组、指针、内存地址等的操作。内存操作越界是软件系统主要错误之一，后果往往非常严重，所以当进行这些操作时一定要仔细小心。</p><p><strong>8、认真处理程序所能遇到的各种出错情况。</strong></p><p><strong>9、系统运行之初，要初始化有关变量及运行环境，防止引用未经初始化的变量。</strong></p><p><strong>10、系统运行之初，要对加载到系统中的数据进行一致性检查。</strong><br>说明：使用不一致的数据，容易式系统进入混乱和不可知状态。</p><p><strong>11、严禁随意修改其他模块或系统的有关设置。</strong><br>说明：编程时，不要随意修改不属于自己模块的有关设置，如常量、数组的大小等。</p><p><strong>12、不能随意改变与其他模块的接口。</strong></p><p><strong>13、充分了解系统的接口之后，在使用系统提供的功能。</strong></p><p><strong>14、编程时，要防止“差1”错误。</strong><br>说明：此类错误一般是由于把<code>&lt;=</code>误写成<code>&lt;</code>或<code>&gt;=</code>误写成<code>&gt;</code>等造成的，由此引起的后果，很多情况下是很严重的，所以编程时一定要在这些地缝小心。当编写完程序后，应第一这些操作符进行彻底检查。</p><p><strong>15、要时刻主要易混淆的操作符。当编完程序后，应从头至尾检查一遍这些操作符，以防止拼写错误。</strong><br>说明：形式相近的操作符最容易引起误用，如C/C++中的<code>=</code>与<code>==</code>、<code>|</code>与<code>||</code>、<code>&amp;</code>与<code>&amp;&amp;</code>等，若拼写错误，编译器不一定能够检查的出来。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable_a == <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>被写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable_a = <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>16、尽可能为所有的<code>if</code>语句加上<code>else</code>分支，而对于没有<code>else</code>分支的语句要小心对待。<code>switch</code>语句则必须要有<code>default</code>分支。</strong></p><p><strong>17、在类Unix系统中，多线程中的子线程退出必须采用主动退出方式，即子线程应<code>return</code>出口。</strong></p><p><strong>18、不要滥用<code>goto</code>语句。</strong><br>说明：<code>goto</code>语句会破坏程序的结构性，所以除非用于让程序统一跳转到异常处理代码块进行异常处理之外，不允许使用<code>goto</code>语句。</p><p><strong>19、不使用与硬件或操作系统关系很大的语法。建议使用标准的语法，以提高代码在不同操作系统之间的可移植性和可重用性。</strong></p><p><strong>20、除非为了满足特殊需求，否则避免使用嵌入式汇编。</strong><br>说明：若在程序中嵌入汇编语句，一般都会对代码的可移植性造成较大的影响。</p><p><strong>21、精心地构造、划分子模块，并按“接口”部分以及“内核”部分合理地组织子模块，以提高“内核”部分的可移植性和可重用性。</strong><br>说明：对于不同软件中的某个功能相同的模块，若能做到其内核部分完全或基本一致，那么无论对软件的测试、维护，还是以后的升级都会有很大帮助。</p><p><strong>22、精心构造算法，并对其性能、效率进行测试。</strong></p><p><strong>23、对较为关键的算法，最好使用其他算法来进行验证。</strong></p><p><strong>24、时刻注意表达式是否存在上溢和下溢问题。</strong></p><p>示例：以下代码将造成变量的下溢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (size-- &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>size</code>等于0的时候，再减1不会小于0，而是0XFF，故程序是一个死循环。应做如下的修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (size-- &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// Program code.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>25、使用变量时要注意其边界值的情况。</strong></p><p>示例：在C语言中，字符型变量的有效值范围为<strong>-128~127</strong>。因此以下表达式的计算存在一定的风险。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">int</span>  b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加1使得变量a的值上溢到-128，而不是128。</span></span><br><span class="line">a += <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 所以b的结果是72，而不是328。</span></span><br><span class="line">b += a;</span><br></pre></td></tr></table></figure><p><strong>26、留心程序机器码大小（如指令空间大小、数据空间大小、堆栈空间大小等）是否超出系统有关的限制。</strong></p><p><strong>27、为用户提供良好的接口界面，使用户能较充分地了解系统内部运行状态及有关系统出错情况。</strong></p><p><strong>28、系统应具备一定的容错能力，能对一些错误事件（如用户误操作等）进行自动补救。</strong></p><p><strong>29、对一些具有危险性的操作代码（如写硬盘、删数据等）要仔细考虑，防止对数据、硬件等安全构成危害，以提高系统的安全性。</strong></p><p><strong>30、使用第三方提供的软件开发工具包或控件时，要注意以下几点。</strong></p><ul><li>充分了解应用接口、使用环境及使用时的注意事项。</li><li>不能过分信赖其正确性。</li><li>除非有必要，否则不要使用不熟悉的第三方工具包或控件。</li></ul><p>说明：使用工具包与控件，可加快程序开发速度，节省时间，但是用之前一定要对它有较为充分的了解，同时第三方工具包与控件也有可能存在Bug等问题。</p><p><strong>31、如果资源文件是对语言敏感的，应让该资源文件与源文件脱离，具体方法包括：使用单独的资源文件、DLL文件或其他单独的描述文件（如数据库格式）等。</strong></p></li><li><h4 id="代码编辑、编译与审查"><a href="#代码编辑、编译与审查" class="headerlink" title="代码编辑、编译与审查"></a>代码编辑、编译与审查</h4><p><strong>1、打开编译器的所有警告开关对程序进行编译。</strong></p><p><strong>2、统一软件代码中的编译开关选项。</strong></p><p><strong>3、通过代码走读及审查方式对代码进行检查。</strong><br>说明：代码走读主要是对程序的编程风格如注释、命名以及容易出错的内容进行检查，可由开发人员自己或其他开发人员进行。代码审查主要是对程序实现的功能及程序的稳定性、安全性、可靠性等进行检查。</p><p><strong>4、编写的代码要注意及时保存，并定期备份，防止由于硬盘损坏等不可控因素造成代码丢失。</strong></p><p><strong>5、同一项目组内，应尽量使用相同的代码编辑器或IDE，而其相关的配置选项也要尽可能保持一致。</strong><br>说明：同一项目组应采用相同的代码编辑器或IDE，如Atom、Sublime Text、Qt等，并设计使用一套缩进宏和注释宏等，将代码缩进和注释等问题交给编辑器来处理。</p><p><strong>6、要小心使用编辑器提供的块拷贝功能编程。</strong><br>说明：当某段代码与另一段代码的处理功能相似时，可用块拷贝功能完成这段代码的编写工作。由于程序功能相近，故所使用的变量、采用的表达式等在功能及命名上可能很接近，所以使用块拷贝时要注意：除了修改相应的程序外，一定要把使用的每个变量仔细查看一遍，以改成正确的。</p><p><strong>7、合理地设计软件系统目录，方便开发人员使用。</strong><br>说明：方便、合理的软件系统目录可提高工作效率。目录构造的原则是方便有关源程序的存储、查询、编译、链接等工作。</p><p><strong>8、使用代码检查工具对源程序进行检查。</strong></p></li><li><h4 id="代码测试与维护"><a href="#代码测试与维护" class="headerlink" title="代码测试与维护"></a>代码测试与维护</h4><p><strong>1、单元测试要求至少达到语句覆盖。</strong></p><p><strong>2、单元测试开始要跟踪每一条语句，并观察数据流及变量的变化。</strong></p><p><strong>3、清理、整理或优化后的代码要经过审查及测试。</strong></p><p><strong>4、代码版本升级要经过严格的测试。</strong></p><p><strong>5、使用Git对代码版本进行维护。</strong></p><p><strong>6、有关正式版本软件的任何修改都应有详细的文档记录。</strong></p><p><strong>7、发现错误要立即进行修复，并将其记录到开发日志当中去。</strong></p><p><strong>8、仔细设计并分析测试用例，使测试用例覆盖尽可能多的情况，以提高效率。</strong></p><p><strong>9、尽可能模拟出程序的各种出错情况，并充分测试出错处理代码。</strong></p><p><strong>10、仔细测试代码处理数据、变量的边界情况。</strong></p><p><strong>11、保留测试信息，以便分析、总结经验和进行更充分的测试。</strong></p><p><strong>12、对自动消失的错误进行分析，搞清楚错误是如何发生和消失的。</strong></p><p><strong>13、测试时应设法使很少发生的事件经常发生。</strong></p><p><strong>14、明确模块或函数处理哪些事件，并使它们经常发生。</strong></p><p><strong>15、坚持在编码阶段就对代码进行彻底的单元测试，不要等以后在测试工作中发现问题。</strong></p><p><strong>16、去除代码运行的随机性，让函数运行的结果可预测，并使出现的错误可再现。</strong></p></li><li><h4 id="代码宏定义"><a href="#代码宏定义" class="headerlink" title="代码宏定义"></a>代码宏定义</h4><p><strong>1、用宏定义表达式时，要是用完整的括号。</strong></p><p>示例：以下定义的宏都存在一定的风险。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_AREA(a, b) a * b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_AREA(a, b) (a * b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_AREA(a, b) (a) * (b)</span></span><br></pre></td></tr></table></figure><p>正确的定义应为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_AREA(a, b) ((a) * (b))</span></span><br></pre></td></tr></table></figure><p><strong>2、将宏定义的多条表达式放在大括号中。</strong></p><p><strong>3、使用宏定义时，不允许参数发生变化。</strong></p><p>示例：以下用法可能会导致错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQUARE(value) ((value) * (value))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a的值为7，即执行了两次自加操作。</span></span><br><span class="line">b = SQUARE(a++);</span><br></pre></td></tr></table></figure><p>正确的用法是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQUARE(value) ((value) * (value))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">b = SQUARE(a);</span><br><span class="line"><span class="comment">// a的值为6，即执行了一次自加操作。</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的介绍，我相信大家都对我们MicroDynamics团队制订的STM32嵌入式代码编写规范有了一个较为清楚的认识。古人曾经说过：<strong>不以规矩，不能成方圆</strong>，很难想象如果我们不用严格的代码规范来约束自己，我们编写出来的代码质量能有多高呢？因此，我希望每个编写嵌入式代码的同学都能够在开始之前先沉下心把代码规范仔细地学习一遍，就算你以后不再搞嵌入式，拥有编写规范代码的能力也会成为你将来最为宝贵的一份财富！</p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x04）：微风四轴飞行器-STM32嵌入式开发-Makefile详解</title>
      <link href="/zh-cn/2017/11/18/team_robot_4_breeze_quadcopter_stm32_makefile/"/>
      <url>/zh-cn/2017/11/18/team_robot_4_breeze_quadcopter_stm32_makefile/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我详细介绍了STM32嵌入式开发工具的相关内容，也通过具体的操作向大家展现了STM32嵌入式开发环境的整个搭建过程，但是如果你想看懂本篇文章或者想尝试自己在GNU/Linux下编写STM32嵌入式程序，那以上的知识是远远不够的，你还需要自学<strong>Make</strong>和<strong>Makefile</strong>，理解它的语法和用法，并亲手进行实践。</p><p>本篇文章因为篇幅有限，并不对Make和Makefile进行详细介绍，请大家先自行上网查找教程资料进行学习，这里我个人强烈推荐大神<a href="http://blog.csdn.net/haoel">陈皓</a>曾在CSDN上发表过的《跟我一起写Makefile》系列文章（当初我就是通过这份教程学会Makefile的），里面对Makefile的基本规则、命令、变量、条件判断、函数、运行和隐含规则等内容进行了详细的介绍，讲的非常棒，网上也有PDF版本的，可以下载到本地，方便阅读。</p><span id="more"></span><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_embedded_architecture.png" alt="breeze_embedded_architecture"></p><p>如上图所示，Breeze微型四轴飞行器的嵌入式系统架构自底向上共由五个部分组成，它们分别为<strong>硬件设备层</strong>、<strong>官方开发库层</strong>、<strong>底层驱动层</strong>、<strong>外设模块层</strong>和<strong>飞控算法层</strong>（其中官方开发库层比较特殊，因为它为底层驱动层和外设模块层代码的编写均提供STM32底层函数实现，因此当初我在构思嵌入式架构图的时候，为简化设计，并且能更好体现官方开发库层在整个架构图中的层级关系，就将其放置在了驱动层和模块层的右侧，只表示逻辑上的调用关系，不存在层级上的高低之分）。</p><ul><li><h4 id="硬件设备层"><a href="#硬件设备层" class="headerlink" title="硬件设备层"></a>硬件设备层</h4><p>硬件设备层是整个嵌入式系统架构的基础，其中包括电机驱动、电源管理、传感器、无线通信以及主控制器共五个核心电路模块。关于这部分的内容我已经在<a href="https://myyerrol.xyz/zh-cn/2017/10/21/team_robots_2_breeze_quadcopter_hardware_design">团队机器人系列（0x02）：微风四轴飞行器-硬件电路板设计</a>文章中进行了详细的讲解，这里就不再重复介绍了。</p></li><li><h4 id="官方开发库层"><a href="#官方开发库层" class="headerlink" title="官方开发库层"></a>官方开发库层</h4><p>官方开发库层主要由<strong>CMSIS</strong>、<strong>FWLib</strong>和<strong>LinkScript</strong>这三个部分组成：</p><p><strong>CMSIS</strong><br>CMSIS是Cortex Microcontroller Software Interface Standard的简写，即ARM Cortex™微控制器软件接口标准。CMSIS是独立于供应商的Cortex-M处理器系列硬件抽象层，为芯片厂商和中间件供应商提供了简单的处理器软件接口，简化了软件复用工作，降低了Cortex-M上操作系统的移植难度，并减少了新入门的微控制器开发者的学习曲线和新产品的上市时间。以下是CMSIS 5.x标准的软件架构图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/cmsis_architecture.png" alt="cmsis_architecture"></p><p>从上图可以看到，CMSIS 5.x软件架构主要分为以下三层：<strong>应用代码层</strong>、<strong>CMSIS软件层</strong>和<strong>微控制器层</strong>，其中CMSIS软件层起着承上启下的作用，一方面该层对微控制器层进行了统一的实现，屏蔽了不同厂商对Cortex-M系列微处理器核内外设寄存器的不同定义，另一方面又向上层的操作系统和应用层提供接口，简化了应用程序开发的难度，使开发人员能够在完全透明的情况下进行一些应用程序的开发。也正是如此，CMSIS层的实现也相对复杂.有关CMSIS更详细的介绍请访问<a href="https://developer.arm.com/embedded/cmsis">CMSIS官网</a>。</p><p><strong>FWLib</strong><br>FWLib是STM32官方提供的固件库源码，它基于STM32F1系列芯片的内部寄存器架构并根据CMSIS命名规范封装了一套完整的底层操作函数，方便用户进行应用开发。FWLib下的inc目录下存放的是stm32f10x_xxx.h形式的头文件，src目录下存放的是stm32f10x_xxx.c形式的固件库源码文件，每一个.c文件和一个.h文件相对应，用于实现命名中由xxx所指定的功能。注意：在开发的时候，不要修改这些源码文件，直接调用其中的函数即可。</p><p><strong>LinkScript</strong><br>LinkScript即链接脚本，它的主要功能是描述如何把输入文件中的节（sections）映射到输出文件中，并控制输出文件的存储布局。当然，在大多数情况下我们都不会注意到链接脚本的存在，主要原因在于链接器在我们没有指定特定链接脚本的时候，会使用一个默认缺省的脚本。最后如果你对链接脚本的工作原理很感兴趣，并且想要获得更多有关链接脚本的介绍，请阅读下一篇LinkScript专题文章。</p></li><li><h4 id="底层驱动层"><a href="#底层驱动层" class="headerlink" title="底层驱动层"></a>底层驱动层</h4><p>底层驱动层包含了常用的通信接口（IIC、SPI、USART、IO）和内部核心功能（时钟、延时、嵌套中断、定时器、EEPROM、Flash），它们全部是基于官方开发库层中的FWLib，即STM32官方固件库中的相应外设驱动代码进行编写，以便对系统外设接口或内部核心功能进行进一步的封装，在实现与硬件设备进行数据通信的同时也能满足外设模块对其调用的需要。</p></li><li><h4 id="外设模块层"><a href="#外设模块层" class="headerlink" title="外设模块层"></a>外设模块层</h4><p>外设模块层包含传感器模块（MPU6050、MS5611、NRF24L01）、LED显示模块、电机驱动模块、电池管理模块和CommLink通信协议栈模块等。外设模块层是对具体外设硬件进行操作的函数库，它主要通过调用底层驱动层中已封装好的函数来实现与硬件之间的双向数据通信，其中CommLink通信协议栈模块定义并实现了微型四轴飞行器与远程控制端之间，微型四轴飞行器与电脑调试端口之间的通信数据格式，提高系统整体的数据传输准确性。</p></li><li><h4 id="飞控算法层"><a href="#飞控算法层" class="headerlink" title="飞控算法层"></a>飞控算法层</h4><p>飞控算法层位于整个嵌入式架构的最顶端，其实现主要是建立在硬件设备层、底层驱动层和外设模块层三者已有的基础之上。飞控算法层包含有高度融合算法、数据滤波算法、高度闭环算法、IMU融合算法以及最重要的PID控制算法等，由于整个微型四轴飞行器的核心功能都是由飞控算法所决定的，所以飞控算法层是嵌入式系统的绝对核心，也是开发的重点和难点。</p></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>根据上一节所讲的嵌入式系统架构图，我设计了如下图所示的工程根目录结构，它共由八个子功能目录组成，分别为<strong>Algorithm</strong>（飞控算法源码）、<strong>Documents</strong>（工程开发文档）、<strong>Drivers</strong>（底层驱动源码）、<strong>Libraries</strong>（官方开发库）、<strong>Modules</strong>（外设模块源码）、<strong>Project</strong>（Makefile文件）、<strong>Tools</strong>（功能脚本）和<strong>User</strong>（工程核心源码）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_make.png" alt="breeze_dir_make"></p><ul><li><h4 id="目录Algorithm"><a href="#目录Algorithm" class="headerlink" title="目录Algorithm"></a>目录Algorithm</h4><p>该目录下存放有Breeze微型四轴飞行器所有顶层飞控算法的源码，其中包含高度融合算法、数据滤波算法、高度闭环算法、IMU融合算法以及最重要的PID控制算法等，有关飞控算法的具体内容我会在之后的文章中进行详细的介绍。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_algorithm.png" alt="breeze_dir_algorithm"></p></li><li><h4 id="目录Drivers"><a href="#目录Drivers" class="headerlink" title="目录Drivers"></a>目录Drivers</h4><p>该目录下存放的是硬件驱动层源码，其所有的子目录也是根据系统架构图中底层驱动层里面的相应内容进行组织的。如下图所示，为便于源码管理，每个子目录命名统一为<strong>Driver_XXX</strong>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_drivers.png" alt="breeze_dir_drivers"></p></li><li><h4 id="目录Libraries"><a href="#目录Libraries" class="headerlink" title="目录Libraries"></a>目录Libraries</h4><p>该目录下存放的是STM32官方开发库的相关内容，其中CMSIS子目录下包含有STM32内核源码、硬件寄存器和中断定义源码以及启动汇编源码等，FWLib子目录下包含有STM32提供的官方固件库源码，而LinkScript目录下则存有基于ARM-GCC的链接脚本文件。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_libraries.png" alt="breeze_dir_libraries"></p></li><li><h4 id="目录Modules"><a href="#目录Modules" class="headerlink" title="目录Modules"></a>目录Modules</h4><p>该目录下存放的是所有外设模块层中的源码，其中每个外设模块的子目录中都包含有同名的.h和.c文件（下图中子目录文件夹显示包含有三个文件，其中第三个文件是编译生成的.o中间文件），便于源码管理和调用。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_modules.png" alt="breeze_dir_modules"></p></li><li><h4 id="目录Project"><a href="#目录Project" class="headerlink" title="目录Project"></a>目录Project</h4><p>该目录下主要存放有工程的Makefile文件，除此之外，根据Makefile中所定义的规则（在下面一节中会讲到），工程在被成功编译之后还会在本目录下生成.hex和.bin等可供烧写的文件。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_project.png" alt="breeze_dir_project"></p></li><li><h4 id="目录Tools"><a href="#目录Tools" class="headerlink" title="目录Tools"></a>目录Tools</h4><p>该目录目前包含有命名为setup.sh的Shell脚本文件，以管理员权限运行这个脚本可以实现一键安装ARM-GCC交叉编译工具链、OpenOCD烧写工具和Minicom终端串口软件。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_tools.png" alt="breeze_dir_tools"></p></li><li><h4 id="目录User"><a href="#目录User" class="headerlink" title="目录User"></a>目录User</h4><p>该目录主要是参考原子KEIL MDK工程模板中的USER目录进行设计的，里面存放的是工程的main.c（工程主源码文件）、stm32f10x_conf.h（工程头文件引用）、stm32f10x_it.h（中断函数定义）和stm32f10x_it.c（中断函数实现）等源码文件。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_dir_user.png" alt="breeze_dir_user"></p></li></ul><h3 id="文件详解"><a href="#文件详解" class="headerlink" title="文件详解"></a>文件详解</h3><p>根据工程目录结构、ARM-GCC和OpenOCD等工具的使用手册以及HandsFree项目所提供的STM32学习资料，我编写了工程的Makefile文件。在开始详细讲解相关内容之前，还是先放上工程的Makefile文件，好让大家对其能有一个整体的印象。</p><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>因为我在把Makefile中的内容拷过来的时候，为了能够让其中的命令以Soft Wrap（Atom等现代编辑器所提供的功能，可以自动让一行文字在某个特定列换行显示）的形式进行显示，我把原本Makefile中的TAB全部替换成空格，并且在80列的边界处进行了换行处理，所以如果你想自己编写Makefile，请复制并编辑工程目录里的Makefile，而不要直接复制下面的内容到你自己的Makefile文件中，否则运行make肯定会报错！</p></div><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">PROJECT := breeze_firmware_none</span><br><span class="line"></span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Clock/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Delay/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_EEPROM/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Flash/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_IIC/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_IO/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_NVIC/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_SPI/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Timer/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_USART/</span><br><span class="line"></span><br><span class="line">DIR_MODULES   += ../Modules/Module_Battery/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_CommLink/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_LED/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_Motor/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_MPU6050/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_MS5611/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_NRF24L01/</span><br><span class="line"></span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Altitude/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Control/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Filter/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Flight/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_IMU/</span><br><span class="line"></span><br><span class="line">DIR_INCLUDE   += -I../Libraries/CMSIS/ \</span><br><span class="line">                 -I../Libraries/FWLib/inc/ \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_DRIVERS)</span>)</span> \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_MODULES)</span>)</span> \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_ALGORITHM)</span>)</span> \</span><br><span class="line">                 -I../User/ \</span><br><span class="line"></span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../Libraries/CMSIS/*.c)</span></span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../Libraries/FWLib/src/*.c)</span></span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_DRIVERS)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_MODULES)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_ALGORITHM)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../User/*.c)</span></span><br><span class="line"></span><br><span class="line">SRC_ASM := ../Libraries/CMSIS/startup/gcc/startup_stm32f10x_md.s</span><br><span class="line"></span><br><span class="line">OBJS    := <span class="variable">$(<span class="built_in">filter</span> %.o, $(SRC_ASM:.s=.o)</span>) <span class="variable">$(<span class="built_in">filter</span> %.o, $(SRC_C:.c=.o)</span>)</span><br><span class="line"></span><br><span class="line">LINK_SCRIPT := ../Libraries/LinkScript/stm32f10x_flash.lds</span><br><span class="line"></span><br><span class="line">CC_PREFIX := arm-none-eabi-</span><br><span class="line"></span><br><span class="line">CC        := <span class="variable">$(CC_PREFIX)</span>gcc</span><br><span class="line">CXX       := <span class="variable">$(CC_PREFIX)</span>g++</span><br><span class="line">CP        := <span class="variable">$(CC_PREFIX)</span>objcopy</span><br><span class="line">GDB       := <span class="variable">$(CC_PREFIX)</span>gdb</span><br><span class="line">SIZE      := <span class="variable">$(CC_PREFIX)</span>size</span><br><span class="line">AS        := <span class="variable">$(CC)</span> -x assembler-with-cpp</span><br><span class="line">HEX       := <span class="variable">$(CP)</span> -O ihex</span><br><span class="line">BIN       := <span class="variable">$(CP)</span> -O binary -S</span><br><span class="line"></span><br><span class="line">DDEFS += -DSTM32F10X_MD</span><br><span class="line">DDEFS += -DHSE_VALUE=8000000 -DUSE_STDPERIPH_DRIVER</span><br><span class="line"></span><br><span class="line">DEFS  := <span class="variable">$(DDEFS)</span> -DRUN_FROM_FLASH=1</span><br><span class="line"></span><br><span class="line">MCU   := cortex-m3</span><br><span class="line"></span><br><span class="line">OPT   += -Os</span><br><span class="line">OPT   += -fsingle-precision-constant</span><br><span class="line">OPT   += -fno-common</span><br><span class="line">OPT   += -ffunction-sections</span><br><span class="line">OPT   += -fdata-sections</span><br><span class="line"></span><br><span class="line">SPECS := --specs=rdimon.specs -u _printf_float</span><br><span class="line"></span><br><span class="line">FLAGS_MCU := -mcpu=<span class="variable">$(MCU)</span></span><br><span class="line">FLAGS_AS  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb</span><br><span class="line">FLAGS_C   := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm <span class="variable">$(DEFS)</span></span><br><span class="line">FLAGS_CXX := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm -fno-exceptions \</span><br><span class="line">             -fno-rtti -fno-threadsafe-statics -fvisibility=hidden -std=c++11 \</span><br><span class="line">             <span class="variable">$(DEFS)</span></span><br><span class="line">FLAGS_LD  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -lm -g -gdwarf-2 -mthumb \</span><br><span class="line">             -nostartfiles -Xlinker --gc-sections -T<span class="variable">$(LINK_SCRIPT)</span> \</span><br><span class="line">             -Wl,-Map=<span class="variable">$(PROJECT)</span>.map,--cref,--no-warn-mismatch</span><br><span class="line"></span><br><span class="line">TYPE_BURN  := openocd_swd_flash</span><br><span class="line">TYPE_DEBUG := openocd_swd_debug</span><br><span class="line">TYPE_ERASE := openocd_swd_erase</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all burn debug erase clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span> <span class="variable">$(PROJECT)</span>.elf <span class="variable">$(PROJECT)</span>.hex <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    <span class="variable">$(SIZE)</span> <span class="variable">$(PROJECT)</span>.elf</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(FLAGS_C)</span> <span class="variable">$(DIR_INCLUDE)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.s</span></span><br><span class="line">    <span class="variable">$(AS)</span> <span class="variable">$(FLAGS_AS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.elf: <span class="variable">$(OBJS)</span></span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(FLAGS_LD)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.hex: %.elf</span></span><br><span class="line">    <span class="variable">$(HEX)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.bin: %.elf</span></span><br><span class="line">    <span class="variable">$(BIN)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="section">burn:  <span class="variable">$(TYPE_BURN)</span></span></span><br><span class="line"><span class="section">debug: <span class="variable">$(TYPE_DEBUG)</span></span></span><br><span class="line"><span class="section">erase: <span class="variable">$(TYPE_ERASE)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">openocd_swd_flash: <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;wait_halt</span></span><br><span class="line"><span class="string">    2&quot;</span> -c <span class="string">&quot;flash write_image erase <span class="variable">$(PROJECT)</span>.bin 0x08000000&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c</span><br><span class="line">    <span class="string">&quot;verify_image <span class="variable">$(PROJECT)</span>.bin 0x08000000&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;reset run&quot;</span> -c</span><br><span class="line">    shutdown</span><br><span class="line"></span><br><span class="line"><span class="section">openocd_swd_debug: <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    xterm -e openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;halt&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> &amp;</span><br><span class="line">    <span class="variable">$(GDB)</span> --eval-command=<span class="string">&quot;target extended-remote localhost:3333&quot;</span> <span class="variable">$(PROJECT)</span>.elf</span><br><span class="line"></span><br><span class="line"><span class="section">openocd_swd_erase:</span></span><br><span class="line">    openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg  -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;stm32f1x</span></span><br><span class="line"><span class="string">    mass_erase 0&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -rf <span class="variable">$(OBJS)</span></span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.elf</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.map</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.hex</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.bin</span><br></pre></td></tr></table></figure><ul><li><h4 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h4><p><strong>工程命名</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROJECT := breeze_firmware_none</span><br></pre></td></tr></table></figure><p>使用变量的方式来存储工程的名字，以便为之后编译生成的程序提供统一的命名。</p><p><strong>目录引用</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Clock/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Delay/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_EEPROM/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Flash/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_IIC/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_IO/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_NVIC/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_SPI/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_Timer/</span><br><span class="line">DIR_DRIVERS   += ../Drivers/Driver_USART/</span><br><span class="line"></span><br><span class="line">DIR_MODULES   += ../Modules/Module_Battery/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_CommLink/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_LED/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_Motor/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_MPU6050/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_MS5611/</span><br><span class="line">DIR_MODULES   += ../Modules/Module_NRF24L01/</span><br><span class="line"></span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Altitude/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Control/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Filter/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_Flight/</span><br><span class="line">DIR_ALGORITHM += ../Algorithm/Algorithm_IMU/</span><br><span class="line"></span><br><span class="line">DIR_INCLUDE   += -I../Libraries/CMSIS/ \</span><br><span class="line">                 -I../Libraries/FWLib/inc/ \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_DRIVERS)</span>)</span> \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_MODULES)</span>)</span> \</span><br><span class="line">                 <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(DIR_ALGORITHM)</span>)</span> \</span><br><span class="line">                 -I../User/ \</span><br></pre></td></tr></table></figure><p><strong>DIR_DRIVERS</strong>、<strong>DIR_MODULES</strong>和<strong>DIR_ALGORITHM</strong>这三个变量的作用是根据工程目录结构设计，使用相对路径的方式将底层驱动层、外设模块层和飞控算法层中的子目录分别添加到其中，为之后提取目录中的源码提供搜索路径。</p><p>而<strong>DIR_INCLUDE</strong>变量主要用于获取工程目录结构中的所有.h头文件，其中包括官方开发库层中CMSIS和FWLib里的头文件，以及底层驱动层、外设模块层、飞控算法层和用户主函数目录中所有相关的头文件。这里，为了让大家看得更加清楚，我在每个目录后面都添加了反斜杠来进行转义，表示所有目录路径在逻辑上依然同处一行，但可以通过多行的形式进行显示。此外，我还用了GNU/Make中的<code>addprefix</code>函数，以下引用自《跟我一起学Makefile》：</p><blockquote><p>$(addprefix &lt;prefix&gt;, &lt;names…&gt;)</p><p>名称：加前缀函数——addprefix。</p><p>功能：把前缀&lt;prefix&gt;加到&lt;names&gt;中的每个单词后面。</p><p>返回：返回加过前缀的文件名序列。</p><p>示例：$(addprefix src/,foo bar)返回值是“src/foo src/bar”。</p></blockquote><p>因此在工程Makefile中，<code>$(addprefix -I, \$(DIR_DRIVERS))</code>函数操作会在<strong>DIR_DRIVERS</strong>变量前面添加<code>-I</code>标志，即将DIR_DRIVERS目录下的头文件添加到编译器的头文件搜索路径中。这样做简单灵活，且具有更好的可扩展性。</p><p><strong>源文件搜索</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../Libraries/CMSIS/*.c)</span></span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../Libraries/FWLib/src/*.c)</span></span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_DRIVERS)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_MODULES)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">addsuffix</span> *.c, <span class="variable">$(DIR_ALGORITHM)</span>)</span>)</span><br><span class="line">SRC_C   += <span class="variable">$(<span class="built_in">wildcard</span> ../User/*.c)</span></span><br><span class="line"></span><br><span class="line">SRC_ASM := ../Libraries/CMSIS/startup/gcc/startup_stm32f10x_md.s</span><br><span class="line"></span><br><span class="line">OBJS    := <span class="variable">$(<span class="built_in">filter</span> %.o, $(SRC_ASM:.s=.o)</span>) <span class="variable">$(<span class="built_in">filter</span> %.o, $(SRC_C:.c=.o)</span>)</span><br></pre></td></tr></table></figure><p>根据操作不难看出，<strong>SRC_C</strong>和<strong>SCR_ASM</strong>这两个变量用于分别存储C源码和汇编文件，其中SRC_C里用到了<code>wildcard</code>和<code>addsuffix</code>两个函数，这里首先对<code>wildcard</code>函数进行简单讲解，以下内容引用自liangkaiming的《<a href="http://blog.csdn.net/liangkaiming/article/details/6267357">Makefile中的wildcard用法</a>》中的部分内容：</p><blockquote><p>在Makefile规则中，通配符会被自动展开。但在变量的定义和函数引用时，通配符将失效。这种情况下如果需要通配符有效，就需要使用函数“wildcard”，它的用法是：$(wildcard PATTERN…) 。在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表。如果不存在任何符合此模式的文件，函数会忽略模式字符并返回空。</p></blockquote><p>所以，<code>$(wildcard ../Libraries/CMSIS/\*.c)</code>的含义是获取../Libraries/CMSIS/目录下的所有.c源文件，其它的类似。而<code>$(wildcard $(addsuffix \*.c, $(DIR_DRIVERS)))</code>则在<code>wildcard</code>函数的基础上又嵌套了<code>addsuffix</code>函数，它跟之前讲过的<code>addprefix</code>功能类似，主要用来添加后缀。以内容下依旧引用自《跟我一起学Makefile》：</p><blockquote><p>$(addsuffix &lt;suffix&gt;, &lt;names…&gt;)</p><p>名称：加后缀函数——addsuffix。</p><p>功能：把后缀&lt;suffix&gt;加到&lt;names&gt;中的每个单词后面。</p><p>返回：返回加过后缀的文件名序列。</p><p>示例：$(addsuffix .c,foo bar)返回值是“foo.c bar.c”</p></blockquote><p>因此，<code>$(wildcard $(addsuffix *.c, $(DIR_DRIVERS)))</code>函数的含义是首先在DIR_DRIVERS变量的后边添加.c后缀，然后再调用<code>wildcard</code>函数获取其中的所有.c源文件。这种通过函数组合来实现指定功能的方式可以大大减少编写Makefile的工作量，提高项目的开发效率。</p><p><strong>OBJS</strong>变量用于存储所有通过.c和.s源文件生成的中间目标文件（object files），这里用到了<code>filter</code>函数和变量的<strong>替换规则</strong>，先介绍一下<code>filter</code>函数：</p><blockquote><p>$(filter &lt;pattern…&gt;, &lt;text&gt;)</p><p>名称：过滤函数——filter。</p><p>功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，保留符合模式&lt;pattern&gt;的单词。可以有多个模式。</p><p>返回：返回符合模式&lt;pattern&gt;的字串。</p><p>示例：<br>sources := foo.c bar.c baz.s ugh.h</p><p>foo: $(sources)</p><p>cc \$(filter %.c %.s, $(sources)) -o foo</p><p>\$(filter %.c %.s, $(sources))返回的值是“foo.c bar.c baz.s”。</p></blockquote><p>综上所述，<code>$(filter %.o, $(SRC_ASM:.s=.o))</code>和<code>$(filter %.o, $(SRC_C:.c=.o))</code>函数的执行过程如下：<code>filter</code>函数首先根据<code>$(SRC_ASM:.s=.o)</code>和<code>$(SRC_C:.c=.o)</code>所定义好的替换规则，分别将<strong>SRC_ASM</strong>和<strong>SRC_C</strong>变量中的.s和.c字符串替换成.o，然后从替换之后的变量中匹配出符合.o后缀的文件，最后返回字符串结果给<strong>OBJS</strong>变量。</p><p><strong>链接脚本</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LINK_SCRIPT := ../Libraries/LinkScript/stm32f10x_flash.lds</span><br></pre></td></tr></table></figure><p><strong>LINK_SCRIPT</strong>变量存储的是基于ARM-GCC编译器的链接脚本。</p><p><strong>编译器可执行程序</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CC_PREFIX := arm-none-eabi-</span><br><span class="line"></span><br><span class="line">CC        := <span class="variable">$(CC_PREFIX)</span>gcc</span><br><span class="line">CXX       := <span class="variable">$(CC_PREFIX)</span>g++</span><br><span class="line">CP        := <span class="variable">$(CC_PREFIX)</span>objcopy</span><br><span class="line">GDB       := <span class="variable">$(CC_PREFIX)</span>gdb</span><br><span class="line">SIZE      := <span class="variable">$(CC_PREFIX)</span>size</span><br><span class="line">AS        := <span class="variable">$(CC)</span> -x assembler-with-cpp</span><br><span class="line">HEX       := <span class="variable">$(CP)</span> -O ihex</span><br><span class="line">BIN       := <span class="variable">$(CP)</span> -O binary -S</span><br></pre></td></tr></table></figure><p>以上一系列变量用于为ARM-GCC编译器相关可执行程序赋予新的别名，方便之后编译过程的使用。</p><p><strong>编译选项</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DDEFS += -DSTM32F10X_MD</span><br><span class="line">DDEFS += -DHSE_VALUE=8000000 -DUSE_STDPERIPH_DRIVER</span><br><span class="line"></span><br><span class="line">DEFS  := <span class="variable">$(DDEFS)</span> -DRUN_FROM_FLASH=1</span><br><span class="line"></span><br><span class="line">MCU   := cortex-m3</span><br><span class="line"></span><br><span class="line">OPT   += -Os</span><br><span class="line">OPT   += -fsingle-precision-constant</span><br><span class="line">OPT   += -fno-common</span><br><span class="line">OPT   += -ffunction-sections</span><br><span class="line">OPT   += -fdata-sections</span><br><span class="line"></span><br><span class="line">SPECS := --specs=rdimon.specs -u _printf_float</span><br></pre></td></tr></table></figure><p><strong>DDEFS</strong>和<strong>DEFS</strong>变量是ARM-GCC编译器的预处理宏定义，用于将指定的功能编译到可执行程序当中去：</p><ul><li><p><strong>-DSTM32F10X_MD</strong><br>-DSTM32F10X_MD选项表示该工程使用的是STM32F1系列的中容量芯片。如果你用的是小容量或大容量的芯片，请将此处对应地修改为-DSTM32F10X_LD或-DSTM32F10X_HD等选项。</p></li><li><p><strong>-DHSE_VALUE=8000000</strong><br>-DHSE_VALUE=8000000选项用于配置STM32的外部晶振频率，其中8000000表示芯片使用的晶振频率为8MHz。</p></li><li><p><strong>-DUSE_STDPERIPH_DRIVER</strong><br>-DUSE_STDPERIPH_DRIVER选项表示该工程会使用STM32官方提供的固件库。如果你自己的工程里没有使用STM32官方固件库，也可以不添加该选项。</p></li><li><p><strong>-DRUN_FROM_FLASH=1</strong><br>-DRUN_FROM_FLASH=1选项用于指定程序从硬件的FLASH中开始运行。</p></li></ul><p><strong>MCU</strong>变量表示当前工程所用芯片的架构。我们用的是STM32F1系列的芯片，所以该变量的值为cortex-m3。</p><p><strong>OPT</strong>(Optimization)变量用于表示<strong>编译优化</strong>方面的选项：</p><ul><li><strong>-Os</strong><br>-Os(Optimize size)选项指定编译器以-O2级别优化来进一步减少可执行程序所占空间的大小。</li></ul><ul><li><p><strong>fsingle-precision-constant</strong><br>fsingle-precision-constant选项指定编译器将浮点型（floating-point）常量看成单精度常量而不把它们隐式地转换成双精度常量。</p></li><li><p><strong>-fno-common</strong><br>-fno-common选项指定编译器应该将未初始化的全局变量放置到.o目标文件（object file）的数据段中而不是生成它们作为公共块（common blocks）。虽然当出现同一个变量在两个不同的编译中被声明的情况时，编译器会在链接过程中报<strong>重复定义</strong>的错误，但使用-fno-common选项编译目标程序可以更好地提高程序的性能（Unix C编译器传统上通过将变量放置在公共块中，以允许在不同编译单元中对这些变量进行多个定义，这种行为主要通过-fcommon选项来进行指定。但另一方面，ISO C标准并不要求这种行为，且对于某些可执行程序来说这种行为会带来变量引用上的速度或空间开销，因此-fno-common选项便出现了）。</p></li><li><p><strong>-ffunction-sections</strong>和<strong>-fdata-sections</strong><br>-ffunction-sections和-fdata-sections选项指定编译器将每一个函数或数据项放置到输出文件的相应段里去，函数或数据项的名字决定了输出文件中相应段的名字。使用该选项可以让链接器执行优化来改进指令空间中引用的局部性，但代价是牺牲了目标文件和可执行文件的空间大小和速度。</p></li></ul><p><strong>SPECS</strong>变量用于指定编译器所要读取的<strong>规格</strong>（specs）文件，在命令行里可以指定多个规格文件，编译器会根据顺序从左到右依次进行处理。</p><p><strong>编译标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_MCU := -mcpu=<span class="variable">$(MCU)</span></span><br><span class="line">FLAGS_AS  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb</span><br><span class="line">FLAGS_C   := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm <span class="variable">$(DEFS)</span></span><br><span class="line">FLAGS_CXX := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm -fno-exceptions \</span><br><span class="line">             -fno-rtti -fno-threadsafe-statics -fvisibility=hidden -std=c++11 \</span><br><span class="line">             <span class="variable">$(DEFS)</span></span><br><span class="line">FLAGS_LD  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -lm -g -gdwarf-2 -mthumb \</span><br><span class="line">             -nostartfiles -Xlinker --gc-sections -T<span class="variable">$(LINK_SCRIPT)</span> \</span><br><span class="line">             -Wl,-Map=<span class="variable">$(PROJECT)</span>.map,--cref,--no-warn-mismatch</span><br></pre></td></tr></table></figure><ul><li><p><strong>MCU标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_MCU := -mcpu=<span class="variable">$(MCU)</span></span><br></pre></td></tr></table></figure><p><strong>-mcpu</strong>选项用于指定目标处理器的名字（目前其值为cortex-m3）。GCC可通过该选项确定使用什么样的CPU指令集来生成对应的汇编代码，并确定目标处理器的性能调优。</p></li><li><p><strong>汇编标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_AS  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb</span><br></pre></td></tr></table></figure><p><strong>编译标签</strong>中的<code>-c</code>选项指定编译器编译或汇编源文件，但并不进行链接；<code>-g</code>选项用于生成程序的调试信息，为之后的GDB调试提供基础；<code>-gdwarf-2</code>选项用于指定编译器生成DWARF-2格式的调试信息；<code>-mthumb</code>选项指定生成的代码能以<strong>Thumb</strong>状态运行。</p></li><li><p><strong>C编译标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_C   := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm <span class="variable">$(DEFS)</span></span><br></pre></td></tr></table></figure><p><strong>C编译标签</strong>除了<strong>编译标签</strong>中所讲过的内容，还有<code>-fomit-frame-pointer</code>、<code>-Wall</code>和<code>-fverbose-asm</code>。其中<code>-fomit-frame-pointer</code>选项减少了栈帧的切换和栈地址的保存，可提高程序性能；<code>-Wall</code>选项用于打开代码的所有可选警告；<code>-fverbose-asm</code>选项用于在生成的汇编代码中加入额外的注释信息来使汇编代码更具可读性。</p></li><li><p><strong>CXX编译标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_CXX := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -c -g -gdwarf-2 -mthumb \</span><br><span class="line">             -fomit-frame-pointer -Wall -fverbose-asm -fno-exceptions \</span><br><span class="line">             -fno-rtti -fno-threadsafe-statics -fvisibility=hidden -std=c++11 \</span><br><span class="line">             <span class="variable">$(DEFS)</span></span><br></pre></td></tr></table></figure><p><strong>CXX编译标签</strong>中的<code>-fno-exceptions</code>选项用于禁用异常机制；<code>-fno-rtti</code>选项用于禁用C++运行时类型信息的生成；<code>-fno-threadsafe-statics</code>选项用于禁用局部静态变量的线程安全初始化；<code>fvisibility=hidden</code>选项用于隐藏ELF格式的符号名称；<code>-std=c++11</code>选项指定编译器使用C++ 11标准对源文件进行编译。</p></li><li><p><strong>链接标签</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLAGS_LD  := <span class="variable">$(SPECS)</span> <span class="variable">$(FLAGS_MCU)</span> <span class="variable">$(OPT)</span> -lm -g -gdwarf-2 -mthumb \</span><br><span class="line">             -nostartfiles -Xlinker --gc-sections -T<span class="variable">$(LINK_SCRIPT)</span> \</span><br><span class="line">             -Wl,-Map=<span class="variable">$(PROJECT)</span>.map,--cref,--no-warn-mismatch</span><br></pre></td></tr></table></figure><p><strong>链接标签</strong>中的<code>-lm</code>选项用于链接libm.so库，即math数学函数库；<code>-nostartfiles</code>选项指定在链接的时候不使用系统标准的启动文件；<code>-T$(LINK_SCRIPT)</code>选项指定使用$(LINK_SCRIPT)变量的值作为工程的链接脚本。</p><p><code>-Xlinker</code>和<code>-Wl</code>两个选项都用于传递参数给链接器，区别首先在于<code>-Xlinker</code>是使用空格进行多个参数的划分，而<code>-Wl</code>则使用逗号。除此之外，如果你想传递一个包含有多个参数的选项，你就必须使用<code>-Xlinker</code>两次，第一次是为了指定选项，第二次则是为了指定参数。举个例子，对于传递<code>-assert definitions</code>命令给链接器，你必须写成<code>-Xlinker -assert -Xlinker defintions</code>而不是<code>-Xlinker &quot;-assert definitions&quot;</code>，因为链接器会认为这是一个参数。如果你用的是GNU的链接器，通常更简便的做法就是用<code>option=value</code>的方式，比如<code>-Xlinker -Map -Xlinker output.map</code>可以简写成<code>-Xlinker -Map=output.map</code>。而对于<code>Wl</code>来说，前面的例子可以则写成<code>-Wl,-Map,output.map</code>。</p><p>最后介绍一下由<code>-Xlinker</code>和<code>-Wl</code>所传递的选项的功能：<code>-gc-sections</code>选项用于指定编译器不把未在可执行程序中进行调用的函数链接到可执行程序中，这样做可在一定程度上节约FLASH和内存空间；<code>-Map=$(PROJECT).map</code>选项用于将链接的映射关系打印到标准输出上；<code>--cref</code>选项是<strong>Cross Reference</strong>的简写，用于输出交叉引用表；<code>--no-warn-mismatch</code>选项告诉链接器当出现<strong>不匹配</strong>的问题时，需要对其进行忽略。</p></li></ul><p><strong>调试器类型</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TYPE_BURN  := openocd_swd_flash</span><br><span class="line">TYPE_DEBUG := openocd_swd_debug</span><br><span class="line">TYPE_ERASE := openocd_swd_erase</span><br></pre></td></tr></table></figure><p>根据名字可以知道，以上三个变量分别代表调试器烧写、调试和擦除的类型。由于目前该工程使用的调试器为J-Link，软件为OpenOCD，并且基于J-Link的SWD模式与硬件进行数据通信，所以上述三个变量的值是固定的。如果以后工程添加了新的调试器命令（比如ST-Link等），用户可以通过修改相应变量的值（必须要在下面的<strong>调试器命令</strong>部分中存在）来自行选择使用哪种调试器进行烧写、调试和擦除操作。</p></li><li><h4 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h4><p><strong>伪目标定义</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all burn debug erase clean</span></span><br></pre></td></tr></table></figure><p>这里首先介绍一下什么是<strong>伪目标</strong>：伪目标并不是一个文件，而是一个标签，我们通常用它来执行某种特定的功能，比如使用<code>make clean</code>来清理编译过程中生成的中间文件，其中<code>clean</code>就是伪目标。当伪目标的取名与文件名不重复时，GNU/Make会自动将伪目标识别为标签，执行其中定义好的命令，但是如果伪目标与文件名重复，那么便会出现问题，举个简单的例子：Makefile文件中存在有如下的伪目标定义，且恰好该目录中有一个名为clean的文件：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -rf *.o</span><br></pre></td></tr></table></figure><p>这时若执行<code>make clean</code>命令，GNU/Make会以clean文件已存在且Makefile中的clean规则不存在依赖关系为由，不执行该操作。当然，为避免这种情况的发生，我们可以使用<strong>.PHONY</strong>关键字来显示地指明<code>clean</code>目标是一个伪目标，即就像下面这样：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -rf *.o</span><br></pre></td></tr></table></figure><p>只要有.PHONY声明，不管是否有clean这个文件，只要执行<code>make clean</code>命令，GNU/Make便会调用Shell中的rm命令对中间文件进行删除操作。</p><p>伪目标一般没有依赖的文件。但是，我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为<strong>默认目标</strong>，只要将其放在第一个。一个示例就是，如果你的Makefile需要一口气生成若干个可执行文件，但你只想简单地敲一个make完事，并且，所有的目标文件都写在一个Makefile中，那么你可以使用伪目标这个特性：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span> <span class="variable">$(PROJECT)</span>.elf <span class="variable">$(PROJECT)</span>.hex <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    <span class="variable">$(SIZE)</span> <span class="variable">$(PROJECT)</span>.elf</span><br></pre></td></tr></table></figure><p>我们知道，Makefile中的第一个目标会被作为其默认目标。我们声明了一个<code>all</code>的伪目标，其依赖于其它四个目标。由于伪目标的特性是，总是被执行的，所以其依赖的那四个目标就总是不如<code>all</code>这个目标新。所以，其它四个目标的规则总是会被决议。也就达到了我们一口气生成多个目标的目的。</p><p>当然，从上面的例子我们可以看出，目标也可以成为依赖。所以，伪目标同样也可成为依赖：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">burn: <span class="variable">$(TYPE_BURN)</span></span></span><br></pre></td></tr></table></figure><p><code>burn</code>是伪目标，而$(TYPE_BURN)变量的当前值为<code>openocd_swd_flash</code>，它也是一个伪目标。我们可以很方便地使用<code>make burn</code>或<code>make openocd_swd_flash</code>将编译好的程序烧写到硬件中去。</p><p><strong>编译规则</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span> <span class="variable">$(PROJECT)</span>.elf <span class="variable">$(PROJECT)</span>.hex <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    <span class="variable">$(SIZE)</span> <span class="variable">$(PROJECT)</span>.elf</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(FLAGS_C)</span> <span class="variable">$(DIR_INCLUDE)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.s</span></span><br><span class="line">    <span class="variable">$(AS)</span> <span class="variable">$(FLAGS_AS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.elf: <span class="variable">$(OBJS)</span></span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(FLAGS_LD)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.hex: %.elf</span></span><br><span class="line">    <span class="variable">$(HEX)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.bin: %.elf</span></span><br><span class="line">    <span class="variable">$(BIN)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>编译规则里面用到了GNU/Make的<strong>模式规则</strong>和<strong>自动化变量</strong>等高级用法，以下首先对<strong>模式规则</strong>的用法进行介绍（内容摘自《跟我一起写Makefile》）：</p><blockquote><p>模式规则中，至少在规则的目标定义中要包含”%”，否则，就是一般的规则。目标中的”%”定义表示对文件名的匹配，”%”表示长度任意的非空字符串。例如：”%.c”表示以”.c”结尾的文件名（文件名的长度至少为3），而”s.%.c”则表示以”s.”开头，”.c”结尾的文件名（文件名的长度至少为5）。</p><p>如果”%”定义在目标中，那么，目标中的”%”的值决定了依赖目标中的”%”的值，也就是说，目标中的模式的”%”决定了依赖目标中”%”的样子。</p></blockquote><p>举个例子，若存在以下的模式规则：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%.o : %.c</span><br><span class="line">    &lt;command&gt;</span><br></pre></td></tr></table></figure><p>则它指定了怎么从所有的[.c]文件生成相应的[.o]文件的规则。如果要生成的目标是<code>a.o b.o</code>，那么<code>%.c</code>就是<code>a.c b.c</code>。当然，一旦<code>%</code>模式被确定，GNU/Make会匹配当前工程目录下所有符合要求的文件名，并执行模式规则下的命令。</p><p>下面对<strong>自动化变量</strong>进行介绍（摘自《跟我一起写Makefile》）：</p><blockquote><p>在上述的模式规则中，目标和依赖文件都是一系例的文件，那么我们如何书写一个命令来完成从不同的依赖文件生成相应的目标？因为在每一次的对模式规则的解析时，都会是不同的目标和依赖文件。</p><p>所谓自动化变量，就是这种变量会把模式中所定义的一系列的文件自动地挨个取出，直至所有的符合模式的文件都取完了。这种自动化变量只应出现在规则的命令中。</p><p>\$@：<br>表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，”$@”就是匹配于目标中模式定义的集合。</p><p>\$%：<br>仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是”foo.a (bar.o)”，那么，”\$%”就是”bar.o”，”$@”就是”foo.a”。如果目标不是函数库文件（Unix下是[.a]，Windows下是[.lib]），那么，其值为空。</p><p>\$&lt;：<br>依赖目标中的第一个目标名字。如果依赖目标是以模式（即”%”）定义的，那么”$&lt;”将是符合模式的一系列的文件集。注意，其是一个一个取出来的。</p><p>$?：<br>所有比目标新的依赖目标的集合。以空格分隔。</p><p>$^：<br>所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。</p><p>\$+：<br>这个变量很像”$^”，也是所有依赖目标的集合。只是它不去除重复的依赖目标。</p><p>\$*：<br>这个变量表示目标模式中”%”及其之前的部分。如果目标是”dir/a.foo.b”，并且目标的模式是”a.%.b”，那么，”\$*“的值就是”dir/a.foo”。这个变量对于构造有关联的文件名是比较有较。如果目标中没有模式的定义，那么”\$*“也就不能被推导出，但是，如果目标文件的后缀是make所识别的，那么”\$*“就是除了后缀的那一部分。例如：如果目标是”foo.c”，因为”.c”是make所能识别的后缀名，所以，”\$*“的值就是”foo”。这个特性是GNU make的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用”\$*“，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么”\$*“就是空值。</p></blockquote><p>根据以上介绍的<strong>模式规则</strong>和<strong>自动化变量</strong>等高级用法，我们来具体地分析一下本项目Makefile中<strong>编译规则</strong>里的相关内容：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(FLAGS_C)</span> <span class="variable">$(DIR_INCLUDE)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>这条规则通过使用ARM-GCC编译器，并根据之前定义好的<strong>编译标签</strong>和<strong>头文件目录</strong>，将所有[.c]文件编译成相对应的[.o]文件，其中<code>$&lt;</code>表示[.c]文件的依次值，而<code>$@</code>则表示[.o]文件的依次值。</p><p>同理，由于剩余的规则用法与上面讲的类似，这里就不过多进行介绍了，只依次简要地说明一下它们的功能：使用汇编器将所有[.s]文件汇编成[.o]文件；使用编译器将所有的[.o]文件链接成[.elf]格式文件；分别使用<code>$(HEX)</code>和<code>$(BIN)</code>工具将[.elf]文件转变成可供烧写的[.hex]和[.bin]文件。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.s</span></span><br><span class="line">    <span class="variable">$(AS)</span> <span class="variable">$(FLAGS_AS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.elf: <span class="variable">$(OBJS)</span></span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(FLAGS_LD)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.hex: %.elf</span></span><br><span class="line">    <span class="variable">$(HEX)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.bin: %.elf</span></span><br><span class="line">    <span class="variable">$(BIN)</span> <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br></pre></td></tr></table></figure></li><li><h4 id="调试器命令"><a href="#调试器命令" class="headerlink" title="调试器命令"></a>调试器命令</h4><p><strong>调试器定义</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">burn:  <span class="variable">$(TYPE_BURN)</span></span></span><br><span class="line"><span class="section">debug: <span class="variable">$(TYPE_DEBUG)</span></span></span><br><span class="line"><span class="section">erase: <span class="variable">$(TYPE_ERASE)</span></span></span><br></pre></td></tr></table></figure><p>确定<strong>烧写</strong>、<strong>调试</strong>和<strong>擦除</strong>等功能所使用的调试器命令。</p><p><strong>烧写命令</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">openocd_swd_flash: <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;wait_halt</span></span><br><span class="line"><span class="string">    2&quot;</span> -c <span class="string">&quot;flash write_image erase <span class="variable">$(PROJECT)</span>.bin 0x08000000&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c</span><br><span class="line">    <span class="string">&quot;verify_image <span class="variable">$(PROJECT)</span>.bin 0x08000000&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;reset run&quot;</span> -c</span><br><span class="line">    shutdown</span><br></pre></td></tr></table></figure><p><strong>烧写命令</strong>的重点在于OpenOCD的命令参数，以下对其进行简要介绍：</p><ul><li><p><strong>-f interface/jlink.cfg</strong><br>指定OpenOCD使用系统<code>interface</code>目录下的<code>jlink.cfg</code>调试适配器配置文件。</p></li><li><p><strong>-c “transport select swd”</strong><br>指定调试适配器使用SWD模式进行数据传输。</p></li><li><p><strong>-f target/stm32f1x.cfg</strong><br>指定OpenOCD使用系统<code>target</code>目录下的<code>stm32f1x.cfg</code>芯片配置文件。</p></li><li><p><strong>-c “init”</strong><br>该命令指定OpenOCD结束配置而进入运行阶段。</p></li><li><p><strong>-c “reset run”</strong><br>执行硬件复位，将所有已定义的目标重置，并开始目标的运行。</p></li><li><p><strong>-c “reset halt”</strong><br>执行硬件复位，将所有已定义的目标重置，并立即停止目标的运行。</p></li><li><p><strong>-c “sleep 100”</strong><br>指定OpenOCD在状态恢复之前等待至少100毫秒。</p></li><li><p><strong>-c “wait_halt 2”</strong><br>指定OpenOCD等待目标停止的时间为2毫秒。</p></li><li><p><strong>-c “flash write_image erase $(PROJECT).bin 0x08000000”</strong><br>指定OpenOCD将通过ARM-GCC编译生成的$(PROJECT).bin镜像文件烧写到当前目标硬件的FLASH块中，其中<strong>0x08000000</strong>是STM32芯片默认的重定位偏移量，在烧写镜像的过程中，它会被自动添加到镜像文件每个段的基址上，用于确保程序可以从正确的地址上运行。最后，在<strong>erase</strong>参数被指定后，相关FLASH扇区会在编程之前被擦除掉。</p></li><li><p><strong>-c “verify_image $(PROJECT).bin 0x08000000”</strong><br>指定OpenOCD从<strong>0x08000000</strong>地址处开始验证<strong>$(PROJECT).bin</strong>镜像文件的数据是否正确，首先尝试使用CRC校验，若失败则直接对二进制文件进行比较。</p></li><li><p><strong>-c shutdown</strong><br>该命令会关闭OpenOCD服务器，并断开所有与之相连的客户端（如GDB，Telnet等）。</p></li></ul><p>在介绍完以上有关OpenOCD的命令参数之后，相信大家对OpenOCD的用法有了一个基本的认识，接下来总结一下本项目OpenOCD的整个烧写流程：</p><ul><li>设置调试适配器驱动为J-Link。</li><li>设置调试适配器使用SWD模式来进行数据传输。</li><li>设置目标芯片的类型为STM32F1系列。</li><li>调用OpenOCD的init命令开始执行烧写操作。</li><li>调用OpenOCD的reset halt命令重置并停止目标的运行。</li><li>延迟100毫秒等待状态恢复。</li><li>延迟2毫秒等待目标停止运行。</li><li>调用OpenOCD的flash write_image命令执行擦除和烧写文件操作。</li><li>延迟100毫秒等待状态恢复。</li><li>调用OpenOCD的verify_image命令验证烧写到STM32中的镜像文件是否正确。</li><li>延迟100毫秒等待状态恢复。</li><li>调用OpenOCD的reset run命令重置并开始目标的运行。</li><li>关闭OpenOCD服务器。</li></ul><p><strong>调试命令</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">openocd_swd_debug: <span class="variable">$(PROJECT)</span>.bin</span></span><br><span class="line">    xterm -e openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;halt&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> &amp;</span><br><span class="line">    <span class="variable">$(GDB)</span> --eval-command=<span class="string">&quot;target extended-remote localhost:3333&quot;</span> <span class="variable">$(PROJECT)</span>.elf</span><br></pre></td></tr></table></figure><p><strong>调试命令</strong>基本上和<strong>烧写命令</strong>类似，不同点在于当OpenOCD经过初始化并启动完服务器之后，Makefile会调用arm-none-eabi-gdb工具执行<code>target extended-remote localhost:3333</code>命令来建立GDB与OpenOCD的GDBServer之间的数据通信，并加载名为<strong>$(PROJECT).elf</strong>的程序到GDB中完成调试的初始化工作。而至于如何使用GDB进行调试，网上有非常多的资料，这里就不再进行介绍了。</p><p><strong>擦除命令</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">openocd_swd_erase:</span></span><br><span class="line">    openocd -f interface/jlink.cfg -c <span class="string">&quot;transport select swd&quot;</span> -f</span><br><span class="line">    target/stm32f1x.cfg  -c <span class="string">&quot;init&quot;</span> -c <span class="string">&quot;reset halt&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c <span class="string">&quot;stm32f1x</span></span><br><span class="line"><span class="string">    mass_erase 0&quot;</span> -c <span class="string">&quot;sleep 100&quot;</span> -c shutdown</span><br></pre></td></tr></table></figure><p><strong>擦除命令</strong>依然和上面讲过的<strong>烧写命令</strong>类似，不同点在于OpenOCD会使用<code>-c &quot;stm32f1x mass_erase 0</code>命令来擦除STM32芯片的FLASH中0号扇区里的所有内容，该命令通常用于解锁受保护的FLASH。</p></li><li><h4 id="清理命令"><a href="#清理命令" class="headerlink" title="清理命令"></a>清理命令</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -rf <span class="variable">$(OBJS)</span></span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.elf</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.map</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.hex</span><br><span class="line">    -rm -rf <span class="variable">$(PROJECT)</span>.bin</span><br></pre></td></tr></table></figure><p>通过调用Shell中的rm -rf命令来强制递归删除工程的所有因编译所产生的文件。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读到这里，我相信大家对Breeze微型四轴飞行器的嵌入式架构以及工程本身的Makefile有了一个比较清楚的认识。这里，我想再强调一下项目整体架构以及目录组织结构的重要性，一个开源项目能否成功在很大程度上取决于系统架构设计的好坏，优秀的系统架构可以降低各模块之间的耦合性，提高底层代码的封装性，并向上提供较为丰富的API接口，除此之外，最重要的是它统一了接口标准，降低程序开发的复杂程度，从而提高系统整体的鲁棒性。当然，拥有设计出色的系统架构之后，我们还需要根据其来组织整个项目工程的目录结构，把不同功能的代码、Makefile以及开发文档等放到不同的目录当中去，这样有利于后期项目代码的编写和维护等工作。</p><p>在接下来的文章中，我将会为大家讲解STM32链接脚本的工作原理和相关配置，并分析其在程序链接和运行阶段的作用。由于下一篇的链接脚本部分涉及很多非常深奥的软件底层知识，所以我希望那些想深入理解STM32嵌入式程序是如何在硬件上运行的同学可以提前先看看《C专家编程》这本书中的<strong>“第6章 运动的诗章：运行时数据结构”</strong>，里面对程序的堆、栈和段进行了介绍，对你理解链接脚本中的相关内容有着很好的促进作用。最后，我还是希望能有更多的爱好者可以从本系列教程中受益匪浅。</p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> STM32 </tag>
            
            <tag> GNU/Linux </tag>
            
            <tag> GNU/Make </tag>
            
            <tag> Makefile </tag>
            
            <tag> ARM-GCC </tag>
            
            <tag> OpenOCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x03）：微风四轴飞行器-STM32嵌入式开发-开发环境搭建</title>
      <link href="/zh-cn/2017/11/07/team_robot_3_breeze_quadcopter_stm32_development/"/>
      <url>/zh-cn/2017/11/07/team_robot_3_breeze_quadcopter_stm32_development/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我跟很多刚开始接触STM32的同学一样，都是先通过各种渠道获得战舰的开发板（我是从机器人基地电子组那里借了一个STM32最小系统板），然后边看着《原子教你玩转STM32》，边用KEIL MDK编写代码来入门STM32嵌入式开发的。在学习的过程中，我发现虽然KEIL MDK集代码编辑、编译、下载、调试为一体，并且提供了非常友好的图形操作界面，但是它的代码编辑功能实在是做得很一般，而且最关键的是它不能在GNU/Linux和Mac OS上跨平台运行。因此，为了提高项目的开发效率并且践行开源的宗旨，我决定遵循<a href="https://hands-free.github.io">HandsFree</a>的<a href="https://github.com/HANDS-FREE/OpenRE">OpenRE</a>库（由我们西工大舞蹈机器人基地学长们联合创立的开源机器人软硬件项目）以及很多国外开源飞控项目所做的那样，使用GNU/Linux下的开源工具链来搭建Breeze微型四轴飞行器的嵌入式开发环境。</p><span id="more"></span><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><h4 id="GNU-Make"><a href="#GNU-Make" class="headerlink" title="GNU/Make"></a>GNU/Make</h4><p><a href="https://www.gnu.org/software/make">GNU/Make</a>是一个控制从程序的源文件中生成程序的可执行文件和其他非源文件的自动化工具，它可以通过读取包含有每个非源文件以及生成依赖规则的Makefile文件来构建程序。GNU/Make拥有以下几个能力：</p><ul><li><p>GNU/Make允许最终的用户不需要知道整个构建的具体细节就可以完成软件包的编译和安装，因为这些细节都存在于软件提供者的Makefile文件中。</p></li><li><p>GNU/Make能够根据哪些源文件已经更改，自动生成需要更新的文件。除此之外，它也会自动确定更新文件的正确顺序，以防止一个非源文件依赖于另一个非源文件。因此，如果开发者修改了几个源文件，然后运行make命令，GNU/Make只会更新那些直接或间接依赖于已修改的源文件的非源文件，而不会重新编译所有的程序。</p></li><li><p>GNU/Make不限于任何特定的语言。对于程序中的每个非源文件，Makefile都会指定Shell命令来处理它，比如使用Shell命令运行编译器或链接器来生成目标文件或可执行文件，使用TeX或Makeinfo工具来格式化文档等。</p></li><li><p>GNU/Make的功能不仅限于构建软件包。开发者还可以使用它来控制安装或卸载软件包，为其生成标签表或实现其他任何开发者想要做的操作。</p></li></ul></li><li><h4 id="ARM-GCC"><a href="#ARM-GCC" class="headerlink" title="ARM-GCC"></a>ARM-GCC</h4><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>以下内容部分摘自VeryARM网站中的《arm交叉编译器gnueabi、none-eabi、arm-eabi、gnueabihf、gnueabi区别》文章。</p></div><p>ARM-GCC是一套交叉编译工具链家族，其命名规则统一为：<strong>arch [-vendor] [-os] [-(gnu)eabi]</strong>：</p><ul><li><p><strong>arch</strong><br>代表芯片的体系架构，比如ARM，MIPS等。</p></li><li><p><strong>vendor</strong><br>代表工具链的提供商。</p></li><li><p><strong>os</strong><br>代表目标开发板所使用的操作系统。</p></li><li><p><strong>eabi</strong><br>代表<strong>Embedded Application Binary Interface</strong>，即嵌入式应用二进制接口。</p></li></ul><p>ARM-GCC家族主要成员具体如下：</p><ul><li><p><strong>arm-none-eabi-gcc</strong><br>(ARM architecture, <strong>no</strong> vendor, <strong>not</strong> target an operating system, complies with the ARM EABI)<br>主要用于编译ARM架构的裸机系统（包括ARM Linux的Boot和Kernel，不适用编译Linux应用），一般适合ARM7、Cortex-M和Cortex-R内核等芯片使用，不支持那些跟操作系统关系密切的函数。除此之外，该编译器在底层使用了<strong>newlib</strong>这个专用于嵌入式系统的C库。</p></li><li><p><strong>arm-none-linux-gnueabi-gcc</strong><br>(ARM architecture, <strong>no</strong> vendor, creates binaries that run on the Linux operating system, and uses the GNU EABI)<br>arm-none-linux-gnueabi-gcc是一款基于GCC，底层使用<strong>glibc</strong>库，并经过Codesourcery公司优化后所推出的编译器，其浮点运算的处理能力非常优秀，主要用于编译基于ARM架构（ARM9、ARM11以及Cortex-A9）的Linux系统（包括ARM架构的U-boot、Linux内核和Linux应用等）。</p></li><li><p><strong>arm-eabi-gcc</strong><br>主要用于编译运行在Android ARM架构上的应用程序。</p></li><li><p><strong>armcc</strong><br>ARM公司官方推出的编译工具，功能和arm-none-eabi-gcc类似，可以编译裸机程序（U-boot和Kernel），但是不能编译Linux应用程序。armcc一般是和ARM集成开发工具一起进行发布的，比如KEIL MDK、ADS、RVDS和DS-5中都将armcc作为自己默认的编译器，是付费软件。</p></li></ul><p>根据以上的介绍，由于Breeze微型四轴飞行器采用的是基于Cortex-M3架构的STM32F1芯片，所以我们选择用<strong>arm-none-eabi-gcc</strong>来作为该项目交叉编译的工具链，目前该工具链的预编译二进制版本可以在<a href="https://launchpad.net/gcc-arm-embedded">GNU ARM Embedded Toolchain</a>官网上查看并进行下载。</p></li><li><h4 id="OpenOCD"><a href="#OpenOCD" class="headerlink" title="OpenOCD"></a>OpenOCD</h4><p><a href="http://openocd.org">OpenOCD</a>项目最早是由Dominic Rath发起，它的目标是开发出一种能够接入市场上大多数常见MCU、MPU和FPGA等平台的通用开源片上调试器（Open On-Chip Debuger），并提供调试、系统内在线编程和边界扫描测试等功能。具体使用的时候，OpenOCD需要依靠一种叫做<strong>调试适配器</strong>（点击<a href="http://openocd.org/doc-release/html/Debug-Adapter-Hardware.html#Debug-Adapter-Hardware">这里</a>获得OpenOCD所支持的完成设备列表）的硬件模块来帮助其在底层提供与目标板子相一致的电信号，因此只要在配置文件中对所使用的芯片和调试适配器的具体型号进行指定，OpenOCD就可以通过驱动与连接有硬件芯片的适配器进行数据通信，从而最终实现板级代码的烧写和调试。</p><p>通常市场上常见的调试适配器都可以支持一种或多种传输协议，比如在本项目中，我使用的 SEGGER J-Link设备就支持JTAG(Joint Test Action Group，即联合测试工作组)和SWD(Serial Wire Debug，即串口总线调试)两种通信协议。这里我推荐使用SWD模式来烧写和调试代码，主要是因为SWD只需要两根线就可以轻松完成适配器与硬件之间的连接，而且在SWD模式下，适配器烧写代码的速度更快。最后，有关项目中OpenOCD的具体配置，我会在下一篇文章中进行详细介绍。</p></li><li><h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><p><a href="https://atom.io">Atom</a>是GitHub开发团队“为21世纪创造的可配置的编辑器”，它拥有非常精致细腻的界面，并且可配置项丰富，加上它提供了包管理功能，人们可以非常方便地安装和管理各种插件，并将Atom打造成真正适合自己的开发工具。除此之外，Atom代码编辑器还支持Windows、Mac、GNU/Linux三大桌面平台，完全免费，并且已经在GitHub上开放了全部的源代码，在经过一段长时间的迭代开发和不断改进后，Atom在性能和稳定性方面都有着显著的改善。</p><p>这里我选用Atom作为编辑器主要是因为它完全免费，并且拥有很多功能丰富的插件，其中我最喜爱的就是Atom编辑器本身所集成的Git插件，它可以通过颜色的不同（新添加的为绿色，修改的为黄色，删除的为红色）把对代码和文本的修改显示在编辑器的界面上，而且有改动的文件其文件名和所在文件夹名都会被标记为高亮显示，编辑器底部也会显示当前代码仓库所在分支和对文件所修改的行数统计，这对于像我这样基本每天都会Commit的用户来说是非常方便的。</p></li></ul><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><ul><li><h4 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h4><p>以下命令主要安装Git和GNU/Make这两个开发工具，其中make软件是包含在build-essential元包（meta-package）当中的（build-essential元包是GNU/Linux为方便开发者所特别制作的，里面除make软件外，还有gcc、g++以及软件库等编译代码时所需要的相关组件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install git build-essential</span><br></pre></td></tr></table></figure></li><li><h4 id="安装ARM-GCC"><a href="#安装ARM-GCC" class="headerlink" title="安装ARM-GCC"></a>安装ARM-GCC</h4><p><strong>PPA源安装</strong><br>以下命令来源于<a href="https://launchpad.net/~team-gcc-arm-embedded/+archive/ubuntu/ppa">GNU ARM Embedded Toolchain PPA</a>网站，目前支持Ubuntu 12.04/14.04/16.04/16.10 32/64-bit操作系统，是官方<strong>推荐</strong>的安装方法，本项目使用的就是这种安装方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa</span><br><span class="line">$&gt; sudo apt-get udpate</span><br><span class="line">$&gt; sudo apt-get install gcc-arm-embedded</span><br></pre></td></tr></table></figure><p>当然，如果你之前也看过国外开源飞控中有关交叉工具链安装方法方面的资料，你就会发现下面这种PPA源安装方式也很常见：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded</span><br><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install gcc-arm-none-eabi</span><br></pre></td></tr></table></figure><p>这里我要解释一下以上两种PPA源安装方式的区别，以下内容摘自<a href="https://launchpad.net/gcc-arm-embedded/+announcement/13824">GNU ARM Embedded Toolchain官网的通告</a>：</p><blockquote><p>For our 2015Q4 GCC 5 release we decided to move from the old PPA maintained by Terry Guo to a team maintained one. We also took advantage of that move to rename the package from <strong>gcc-arm-none-eabi</strong> to <strong>gcc-arm-embedded</strong>.</p></blockquote><p>上面的文字已经写得非常清楚了，从2015Q4 GCC 5版本开始，官方就将PPA源由原先Terry Guo个人维护改成新的基于团队管理的模式，并且将安装包的名字从gcc-arm-none-eabi改为gcc-arm-embedded。所以以上两种安装方式都没问题，只是Terry Guo的PPA源中arm-none-eabi-gcc的版本可能会偏低。</p><p><strong>手动安装</strong><br>在终端中运行以下命令来手动安装arm-none-eabi-gcc。首先通过wget命令把工具链下载到本地，然后使用tar命令对文件进行解压缩，最后将工具链的bin目录添加到系统环境变量当中，并用source命令对PATH路径进行更新就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Downloads</span><br><span class="line">$&gt; wget https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2</span><br><span class="line">$&gt; tar -xvf gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2</span><br><span class="line">$&gt; <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/Downloads/gcc-arm-none-eabi-5_4-2016q3/bin&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$&gt; <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>最后，根据<a href="http://my.csdn.net/zhengyangliu123">zhengyangliu123</a>在《<a href="http://blog.csdn.net/zhengyangliu123/article/details/54783443">STM32高级开发(5)-gcc-arm-none-eabi</a>》博客中所讲到的内容，64位的Ubuntu需要安装lsb-core工具才可以正常使用工具链，使用下面的命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install lsb-core</span><br></pre></td></tr></table></figure></li><li><h4 id="安装OpenOCD"><a href="#安装OpenOCD" class="headerlink" title="安装OpenOCD"></a>安装OpenOCD</h4><p>OpenOCD工具很好安装，因为Ubuntu的官方仓库中已经包含有该软件包，所以直接使用下面的命令安装即可（不是最新版本的，如果需要最新的0.10.0版本可以从官方仓库中进行下载，并使用make进行编译和安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install openocd</span><br></pre></td></tr></table></figure></li><li><h4 id="安装Atom"><a href="#安装Atom" class="headerlink" title="安装Atom"></a>安装Atom</h4><p>Atom编辑器可以使用下面PPA源的方式安装，也可以直接到官网上下载对应操作系统位数的.deb包来进行安装（个人喜欢PPA源安装方式，主要是因为系统可以帮你自动解决软件依赖问题）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo add-apt-repository ppa:webupd8team/atom</span><br><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install atom</span><br></pre></td></tr></table></figure></li><li><h4 id="下载并编译源码"><a href="#下载并编译源码" class="headerlink" title="下载并编译源码"></a>下载并编译源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Desktop</span><br><span class="line">$&gt; git <span class="built_in">clone</span> https://github.com/microdynamics-quadcopter/breeze_firmware_none.git</span><br><span class="line">$&gt; <span class="built_in">cd</span> breeze_firmware_none/make</span><br><span class="line">$&gt; make all</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/3_breeze_quadcopter_stm32_development/breeze_make_all.png" alt="breeze_make_all"></p></li><li><h4 id="烧写或调试程序"><a href="#烧写或调试程序" class="headerlink" title="烧写或调试程序"></a>烧写或调试程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; make burn</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/3_breeze_quadcopter_stm32_development/breeze_make_burn.png" alt="breeze_make_burn"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; make Debug</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/3_breeze_quadcopter_stm32_development/breeze_make_debug.png" alt="breeze_make_debug"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先我要说的是目前国内高校的STM32嵌入式教育基本上被KEIL+IAR所垄断了，虽然这些商业化的软件把代码编辑、编译和调试等功能集成在一个带有界面的程序当中，这对于很多刚开始接触STM32开发的新手来说是非常方便的，但是其缺点也非常明显：<strong>它们阻碍了初学者对交叉编译工具链以及整个编译过程的理解</strong>。而且相比于开发X86或X64架构的桌面程序，我个人认为编写嵌入式程序的开发者更需要理解编译器的相关知识，因为往往硬件的ROM、RAM或FLASH空间是非常有限的，你只有通过学习才能知道如何通过设置编译器的命令参数来优化.bin或.elf生成文件的大小。除此之外，你还能通过配置链接脚本中TEXT段、DATA段、BSS段以及堆、栈的起始地址和空间容量等参数来获得定制STM32程序运行时的能力。因此，对于那些刚开始学习STM32并打算精通其开发的同学来说，我推荐一开始就放弃<strong>Windows+KEIL MDK</strong>的固有学习模式，而直接使用<strong>GNU/Linux+ARM GCC+OpenOCD</strong>搭建开发环境来进行学习。虽然大家在刚开始学的过程中会出现很多问题，也会觉得很不适应，但是我相信过一段时间之后你就会明白这套开源工具链的强大之处了。</p><p>最后通过以上的介绍，我想大家对开发工具链以及其整个配置流程都有了一个比较清晰的认识，接下来我会通过介绍项目仓库中Makefile的设计思想和参数配置来详细讲解在GNU/Linux下是如何像KEIL MDK那样对STM32工程进行组织的，以及ARM-GCC和OpenOCD这两个软件的具体使用方法。当然，这里我要特别感谢HandsFree OpenRE库的创建者（马学长和陈学长）和相关维护人员，让我可以非常方便地学习到GNU/Linux下STM32嵌入式开发的相关知识。除此之外，我也非常感谢以上文章中所介绍过的开发工具的缔造者们，是他们让我真正体会到了什么是嵌入式开发应有的效率和乐趣！</p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> STM32 </tag>
            
            <tag> GNU/Linux </tag>
            
            <tag> GNU/Make </tag>
            
            <tag> Makefile </tag>
            
            <tag> ARM-GCC </tag>
            
            <tag> OpenOCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x02）：微风四轴飞行器-硬件电路板设计</title>
      <link href="/zh-cn/2017/10/21/team_robot_2_breeze_quadcopter_hardware_design/"/>
      <url>/zh-cn/2017/10/21/team_robot_2_breeze_quadcopter_hardware_design/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我曾经在大二的时候为完成数字电路实验而简单地学过一些硬件电路板设计，当时我看的是郭天祥老师的教程视频，里面有关Altium Designer 6.9软件的操作可以说是讲得非常细致，但是由于后来临近期末考试，时间较为紧迫，而且实验电路本身并不复杂，所以我只学了其中的PCB部分之后就没再深入地学习下去了。</p><p>可能是之前我还有一些PCB设计的基础，所以这次在设计Breeze微型四轴飞行器PCB的时候感觉还是比较容易上手的。我最早是在Ubuntu 14.04上用<a href="http://kicad-pcb.org">KiCad</a>来设计硬件（因为Crazyflie 1.0四轴飞行器的PCB就是用KiCAD画的），但是后来综合考虑到KiCAD在处理复杂元器件布线以及规则约束方面的短板，所以我们最终还是决定使用功能更加强大的Altium Designer 16来重新完成对PCB的绘制工作。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Breeze微型四轴飞行器硬件电路主要由五个部分组成，以下是硬件的架构图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_hardware_architecture.png" alt="breeze_hardware_architecture"></p><p><strong>电机驱动模块</strong><br>电机驱动模块主要负责接收主控制器发过来的PWM（脉冲宽度调制）信号来控制四轴飞行器每个有刷空心杯电机的转速。</p><p><strong>电源管理模块</strong><br>电源管理模块是四轴飞行器能量的来源，它的主要功能有：负责USB和锂电池电源的切换、管理锂电池的充放电以及对输入的电源进行降稳压操作。</p><p><strong>传感器模块</strong><br>传感器模块包括了陀螺仪、加速度计、磁力计和气压计。正是由以上这些传感器所构成的10自由度IMU（惯性测量单元）为四轴飞行器提供了绝对或相对的位置和姿态信息，使得四轴飞行器可以在运动过程中获知自身的运动状态，使其可以更好地预估自己的行为。</p><p><strong>无线通信模块</strong><br>无线通信模块根据预先制订的通信协议，在四轴飞行器和远程PC端之间建立起数据通信的桥梁，便于在PC端控制和监视飞行器的运动状态。</p><p><strong>主控制器模块</strong><br>主控制器模块是四轴飞行器的核心，它主要接收从上层传感器和无线通信模块发过来的数据，并根据不同的控制命令对姿态数据进行数学解算，最后将解算结果以PWM信号的形式发送给电机驱动模块。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="KiCad"><a href="#KiCad" class="headerlink" title="KiCad"></a>KiCad</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/logo_kicad.png" alt="kicad_logo"></p><ul><li><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="http://kicad-pcb.org">KiCad</a>是一款开源的电路原理图和PCB设计工具，它可以被用来设计较为简单的硬件电路板。KiCad软件不对电路板的尺寸做任何的限制，它最多可以处理32个覆铜层、14个工艺层以及4个辅助层。KiCad可以创建所有与构建PCB有关的文件，比如光绘文件、钻孔文件、元器件位置文件等。</p></li><li><h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p>以下是我前期在Ubuntu 14.04上用KiCad软件所设计的Breeze微型四轴飞行器PCB图，由于KiCad软件不像Altium Designer那样带有各种IC封装生成的向导功能，所以当时我是边看IC的Datasheet边用KiCad的PCB库编辑功能来进行封装的绘制，这个过程很花费时间，不过也确实让我学到一些PCB封装设计方面的技巧和经验（比如根据手焊或机焊方式的不同来确定IC四周引脚的长宽度等）。最后很遗憾的是，由于我们对Breeze微型四轴飞行器的功能需求进行了较大的变更并考虑到后期PCB打板制作方面的问题，因此我们决定放弃KiCad转而使用Altium Designer来完成PCB电路板的设计工作（这也是为什么下图中的PCB没有完成的原因），但有一点我不得不说，作为一个开源且跨平台的EDA软件，KiCad真的很好上手，而且它在国外Hack界拥有非常高的人气的，毕竟<a href="https://www.bitcraze.io">Crazyflie</a>和<a href="https://pixhawk.org">Pixhawk</a>两大知名的开源项目都曾使用KiCad作为其PCB设计的工具。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_pcb_kicad.png" alt="breeze_pcb_kicad"></p></li></ul><h3 id="Altium-Designer"><a href="#Altium-Designer" class="headerlink" title="Altium Designer"></a>Altium Designer</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/logo_altium.jpg" alt="altium_logo"></p><ul><li><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><a href="http://www.altium.com">Altium Designer</a>是原Protel软件开发商Altium公司推出的一款EDA（电子设计自动化）软件，它集成了原理图设计、电路仿真、PCB绘制编辑、拓扑逻辑自动布线、信号完整性分析和设计输出等功能。除此之外，Altium Designer设计平台还拓宽了板级设计的传统界面，全面集成了FPGA和SOPC设计，为设计者提供了全新的一体化解决方案，提高了电路设计的质量和效率。</p></li><li><h4 id="成果-1"><a href="#成果-1" class="headerlink" title="成果"></a>成果</h4><p>下图所展示的就是我最终用Altium Designer所完成的Breeze微型四轴飞行器的PCB文件，该PCB采用双面布局走线、双面覆铜处理、四层电路板设计。除此之外，我对连接有直流电机器件的电源线路进行了加粗处理，以提高电流对电机的驱动能力，还有就是由于该PCB使用了陶瓷天线（下图最中间上面那个突出的长方形区域），为了减少电源层对其信号传输的干扰，我对四层电路板中的VCC和GND层进行了分割处理，即将陶瓷天线元器件下方的VCC和GND层掏空，这样电流不从陶瓷天线的底部通过，自然便可降低由电流所产生的电磁干扰。最后总结一下，Altium Designer这款EDA软件是我用过的PCB设计工具（其它有KiCad和Cadence SPB）中对初学者最友好的，原因主要得益于其美观的人机交互界面、便捷强大的设计功能和丰富的教程案例，总之，如果你是刚开始接触PCB设计的新人，我推荐你学习Altium Designer。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_pcb_altium.png" alt="breeze_pcb_altium"></p></li></ul><h3 id="Cadence-SPB"><a href="#Cadence-SPB" class="headerlink" title="Cadence SPB"></a>Cadence SPB</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/logo_cadence.jpg" alt="cadence_logo"></p><ul><li><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p><a href="https://www.cadence.com">Cadance SPB</a>是Cadence旗下用于PCB板级设计的EDA软件。Cadence SPB是一套PCB板级设计完整解决方案，涵盖了从原理图设计到PCB设计以及生产加工装配输出的整个流程。Cadence SPB包括原理图输入设计工具，元件库管理工具，PCB设计工具和一个自动/交互式的强大的布线工具。</p><p><strong>OrCAD</strong><br>Cadence OrCAD Capture是一款多功能的PCB原理图输入工具。OrCAD Capture作为行业标准的PCB原理图输入方式，是当今世界最流行的原理图输入工具之一，具有简单直观的用户设计界面。OrCAD Capture CIS具有功能强大的元件信息系统，可以在线和集中管理元件数据库，从而大幅提升电路设计的效率。</p><p><strong>Allergo</strong><br>Cadence Allegro PCB Designer是一个可扩展的，经过验证的PCB设计环境，在解决技术和方法的挑战同时，可以使设计周期可控并尽可能缩短。Allegro PCB Designer解决方案采用了基础软件加选项的配置方案，包含了与PCB设计相关的一个完整的设计流程所需的一切。</p></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h3><p>电机驱动模块部分负责接收主控发送的PWM信号，并控制每个空心杯电机的转速。</p><ul><li><h4 id="器件"><a href="#器件" class="headerlink" title="器件"></a>器件</h4><p><strong>SI2302场效应管</strong><br>SI2302是N沟道增强型场效应管，它的源极和漏级接在N 型半导体上。相比于三极管，它的优点在于其完全导通的时候，源漏级电阻为毫欧级别，即它自身的耗散非常小，这使得用它作为电机驱动管是非常合适的。</p><p>SI2302的工作原理为当施加在栅极上的正电压达到栅压的时候，由于电场的作用，此时N型半导体的源极和漏级的负电子就会被吸引出来而涌向栅极，但由于金属氧化膜的阻挡，使得电子聚集在两个N沟道之间的P型半导体中，从而形成电流，使源极和漏级之间导通。</p><p><strong>720有刷空心杯电机</strong><br>空心杯电机属于直流、永磁、伺服微特电机。空心杯电机在结构上突破了传统电机的转子结构，采用的是无铁芯转子。空心杯电机具有十分突出的节能、控制和拖动特性。</p><p>Breeze微型四轴飞行器使用的是有刷空心杯电机（转子无铁芯），转速为30000转/分钟，直径为7mm，长度为20mm（简称720电机），电机轴直径为1mm。</p></li><li><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_motor.png" alt="breeze_motor"></p><p>Breeze微型四轴飞行器使用的是有刷空心杯电机，所以电机的控制属于有刷直流电机控制，这相对于无刷电调来说要简单很多。只需要将信号的驱动能力增大，就可以驱动有刷电机。</p><p>电机调速主要利用了PWM（脉冲宽度调制）原理，PWM是一种模拟控制方式，它根据相应载荷的变化来调制场效应管栅极的偏置，来实现场效应管导通时间的变化，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效地技术。</p><p>上图中，电源和电机之间连接了一个型号为BAT54KFLM的二极管，它的功能主要是分流有刷空心杯电机在PWM工作模式下产生的反电动势尖峰。接下来，电路中使用SI2302场效应管作为电机驱动，这得益于其在完全导通的时候，源漏级电阻非常小，即当将其用作大电流负载的驱动管时，其自身的耗散非常小，因此接近全部的电流可以被用来驱动电机，使得该电路表现出了很好的驱动能力。</p><p>最后，每个SI2302场效应管的栅极都接了一个阻值为10K欧姆的下拉电阻，目的是为了防止主控在没有给栅极发送PWM信号的时候，电机由于PWM信号不稳定而开始猛转。在栅极接一个下拉电阻，确保了场效应管的输入信号要么是高，要么是低，没有不确定的第三种状态。因此，电机也就只用两种状态，要么转，要么不转。主控输出的是PWM波形，用于控制场效应管的导通和截止，从而控制电机的转动速度。</p></li></ul><h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><p>电源管理模块负责USB和锂电池电源的切换、管理锂电池的充放电以及对输入的电源进行降稳压操作。</p><ul><li><h4 id="器件-1"><a href="#器件-1" class="headerlink" title="器件"></a>器件</h4><p><strong>NUF2221W1T2</strong><br>NUF2221W1T2是带有ESD保护的USB终止器。它可以对USB电路进行保护，防止过高的输入电压对整个系统的损坏。</p><p><strong>MAX16054</strong><br>MAX16054是带有ESD保护的单个开关去抖以及内部闭锁电路的按键通/断控制器，可接受机械开关产生的嘈杂输入，并经过一个有工厂设置的延迟时间后产生干净的数字锁存输出。在开关通、断期间，MAX16054无接触抖动，只有对开关输入去抖后的下降沿触发时，输出状态才会改变。在输入上升沿，输出保持不变。</p><p><strong>BQ24075</strong><br>BQ24075芯片集成了锂电池线性充电和系统电源管理。它接受USB或锂电池的输入并且支持最大为1.5A的充电电流。其内置的动态电源管理功能可以防止在USB配置出错时出现充电崩溃的情况。</p><p>除此之外，BQ24075还拥有强大的动态电源路径管理功能，它可以不断地监视电池充电的状态，并根据输入电流的大小，提供最佳的充电电流。这使得其能有效地减少电池充电以及放电的循环次数，提高了电池的使用寿命和工作效率。</p><p>BQ24075有三种输入限制模式：100mA、500mA和用户自定义，这使得它能更容易地遵守不同USB的标准。</p><p><strong>TPS79301</strong><br>TPS79301是可调的低压差线性稳压器。它具有高电源抑制比、超低噪声、快速启动以及很好的线性负载瞬态响应等特点。TPS79301可以通过在对应的引脚连接不同阻值的电阻，来改变输出电压的大小。</p></li><li><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_battery.png" alt="breeze_power_battery"></p><p>当不连接USB，而仅采用电池供电时，BQ24075对电池进行放电管理，其10号引脚输出的VCOM信号使电路中的2N7002场效应管导通，R22和R26两个电阻对电池进行分压，此时处理器开始不断地采样VBAT的值，如果VBAT的值过低，处理器就会给MAX16054发送SYSOFF信号，使其关断系统，防止因电池过放而导致的损害。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_nuf2221w1t2.png" alt="breeze_power_nuf2221w1t2"></p><p>NUF2221W1T2在电路中的作用主要是对USB进行缓冲或保护，防止因为USB的错误导致电路系统出现意外情况。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_max16054.png" alt="breeze_power_max16054"></p><p>MAX16054电路右上部分的2N7002场效应管以及10K欧姆的电阻组成了可控的下拉。VUSB连接到USB供电端，若有USB供电，则场效应管导通，从而BQ24075的SYSOFF引脚被拉低，此时BQ24075不会识别处理器间接发送过来的关机信号。保证了在使用USB进行调试的时候，不会因为此时电池电压低而出现关机的情况。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_bq24075.png" alt="breeze_power_bq24075"></p><p>BQ24075 充电时的参数可以通过连接不同阻值大小的电阻来确定，以下是具体的计算公式：</p><p><strong>快速充电电流（ISET）</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_formula_1.jpg" alt="breeze_formula_1"></p><p><strong>输入电流限制（ILIM）</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_formula_2.jpg" alt="breeze_formula_2"></p><p><strong>快速充电安全定时器（TMR）</strong><br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_formula_3.jpg" alt="breeze_formula_3"></p><p>根据以上官方提供的公式和电路图中的电阻阻值，可以得出此时BQ24075的快速充电电流为740mA，输入电流限制为1.3A，安全定时器为80min左右。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_tps79301_vcca.png" alt="breeze_power_tps79301_vcca"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_tps79301_vcc.png" alt="breeze_power_tps79301_vcc"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_power_tps79301_guide.png" alt="breeze_power_tps79301_guide"></p><p>TPS79301可调输出的稳压值可以通过以下计算公式得到：<br><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_formula_4.jpg" alt="breeze_formula_4"></p><p>首先以上图中的模拟电源部分为例讲解。根据官方提供的连接关系图，可以得知上述公式中的R1和R2分别对应模拟电源部分中的R和R9，因此计算得到输出的VCCA电压为2.8V。</p><p>同理，对于数字电源部分，当不接USB供电时，BQ24075的PGOOD引脚输出为高电平，此时公式中的R1对应于R11和R15的并联，公式中的R2对应R16。当连接USB供电并且电池充满电时，PGOOD输出低电平，此时公式中的R1对应R11，公式中的R2对应R15和R16的并联。通过计算，输出的VCC电压为3.3V。</p></li></ul><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><p>本电路模块使用的IMU传感器包含三轴陀螺仪、三轴加速度和三轴数字罗盘。基本原理是对陀螺仪测量到的角速度进行积分得出姿态角，并使用数字罗盘测量得到偏航角、加速度传感器测量到的横滚角和俯仰角对陀螺仪的飘移进行补偿，从而得到较高精度的姿态信息。</p><ul><li><h4 id="器件-2"><a href="#器件-2" class="headerlink" title="器件"></a>器件</h4><p><strong>MPU6050</strong><br>MPU6050模块是InvenSense公司推出的一款低成本的6轴传感器模块，包括三轴加速度，三轴角速度。其体积小巧，用途广阔。</p><p>MPU6050对陀螺仪和加速度计分别用了三个16位的ADC，将其测量的模拟量转化为可输出的数字量。并通过最高至400kHz的IIC接口输出测量数据，为了精确跟踪快速和慢速的运动，传感器的测量范围都是用户可控的，陀螺仪可测范围为±250，±500，±1000，±2000°/秒，加速度计可测范围为±2，±4，±8，±16g可准确追踪快速与慢速动作。</p><p><strong>HMC5883L</strong><br>HMC5883L模块是Honeywell公司推出的一种表面贴装的高集成模块，并带有数字接口的弱磁传感器芯片，应用于低成本罗盘和磁场检测领域。</p><p>HMC5883L包含最先进的高分辨率HMC118X系列磁阻传感器，并附带Honeywell专利的集成电路包括放大器、自动消磁驱动器、偏差校准、能使罗盘精度控制在1°~2°的12位模数转换器等。HMC5883L采用Honeywell各向异性磁阻 (AMR) 技术，这使得其拥有轴向高灵敏度和线性高精度的特点。HMC5883L传感器带有的对于正交轴低敏感性的固相结构能用于测量地球磁场的方向和大小，其测量范围从毫高斯到8高斯。除此之外，它使用IIC系列总线接口与其他器件进行数据通信。</p><p><strong>MS5611</strong><br>MS5611气压传感器是由MEAS（瑞士）推出的一款SPI和I²C总线接口的新一代高分辨率气压传感器，分辨率可达到10cm。该传感器模块包括一个高线性度的压力传感器和一个超低功耗的24位模数转换器（工厂校准系数）。MS5611提供了一个精确的24位数字压力值和温度值以及不同的操作模式，可以提高转换速度并优化电流消耗。高分辨率的温度输出无须额外传感器可实现气压计/温度计功能。可以与几乎任何微控制器连接。通信协议简单，无需在设备内部寄存器编程。MS5611压力传感器只有5.0毫米×3.0毫米×1.0毫米的小尺寸可以集成在移动设备中。这款传感器采用领先的MEMS技术并得益于MEAS（瑞士）十余年的成熟设计以及大批量制造经验，保证产品具有高稳定性以及非常低的压力信号滞后。</p></li><li><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_sensor_mpu6050.png" alt="breeze_sensor_mpu6050"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_sensor_hmc5883l.png" alt="breeze_sensor_hmc5883l"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_sensor_ms5611.png" alt="breeze_sensor_ms5611"></p><p>MPU6050和MS5611连接到STM32的主IIC总线上，而HMC5883L连接到MPU6050的从IIC总线上。在初始化MPU6050时，可以设置主IIC总线和从IIC总线直通，这样STM32就可以直接通过主IIC总线访问从IIC总线，从而读取HMC5883L中的数据了。</p><p>数据更新模式采用硬件中断模式，即MPU6050和HMC5883L都有一个硬件中断引脚MPU_INT和HM_INT，这样能保证数据到来时间的准确，让CPU资源最大化利用。</p></li></ul><h3 id="无线通信"><a href="#无线通信" class="headerlink" title="无线通信"></a>无线通信</h3><p>无线通信模块负责四轴飞行器与远程PC之间的数据通信。</p><ul><li><h4 id="器件-3"><a href="#器件-3" class="headerlink" title="器件"></a>器件</h4><p>nRF51822是一个超低功耗的2.4GHz无线SoC。它集成了2.4GHz收发器、ARM Cortex-M0架构的32位CPU、闪存以及数字和模拟外设接口。它支持蓝牙低功耗和一系列专有2.4GHz通信协议，功能非常强大。</p></li><li><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_wireless.png" alt="breeze_wireless"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_wireless_guide.png" alt="breeze_wireless_guide"></p><p>Breeze微型四轴飞行器的无线通信电路主要参考了上图的官方示例，并在原有的基础之上修改了部分GPIO引脚的功能，使其可以对电源管理模块进行监视和控制。除此之外，nRF51822芯片使用USART接口与主控STM32进行数据的交互，而且预留的SCLK和SDIO也方便之后使用J-Link的SWD模式来进行代码的下载和调试。</p></li></ul><h3 id="主控制器"><a href="#主控制器" class="headerlink" title="主控制器"></a>主控制器</h3><p>主控制器模块的核心是微处理器，它负责采集传感器的数据，并根据命令对数据进行融合和计算，最后将计算好的数据发送给四轴飞行器的执行机构。</p><ul><li><h4 id="器件-4"><a href="#器件-4" class="headerlink" title="器件"></a>器件</h4><p><strong>STM32F103T6U6</strong><br>STM32F103T6U6是意法半导体公司推出的基于ARM Cortex-M3内核的32位高性能微处理器。它工作在72MHz的主频下，拥有32K字节的Flash和10K字节的SRAM，并且提供了增强型的I/O和外设接口，其中包含2路12位ADC、1路7通道DMA、2路16位通用定时器和1路PWM定时器。同时，STM32F103T6U6也包含标准和先进的通信接口：1路IIC和SPI总线、2路USART、1路USB和1路CAN。</p><p><strong>CP2102</strong><br>CP2102是高度集成的USB转UART控制器芯片，其内置了USB2.0全速功能控制器、USB收发器、晶体振荡器、EEPROM及异步串行数据总线（UART），支持调制解调器全功能信号，无需任何外部的USB器件。</p><p>CP2102与其他USB转串口电路的工作原理类似，通过驱动程序将PC的USB口虚拟成COM口以达到扩展的目的。</p></li><li><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_controller_stm32f103t6u6.png" alt="breeze_controller_stm32f103t6u6"></p><p>如上图所示，该电路包含了STM32的最小系统：复位电路、外部时钟电路、启动模式选择电路和电源退耦电路等。查阅意法半导的官方手册可以知道，STM32系列单片机都是低电平复位。于是采用如图所示的方法，将NRST引脚连接到对应的复位电路中。该电路图中STM32外接了一个16MHz的无源晶振，通过内部倍频，STM32的系统时钟最高可达72MHz。STM32的启动模式分为三种，可以从下面的表格给出：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_table.png" alt="breeze_table"></p><p>电路图中STM32的BOOT0引脚默认是被拉低的，即STM32默认是运行在正常工作模式下的。BOOT0和BOOT1引脚的电平都可以进行配置以满足不同的实际需求。</p><p>电源退耦电路不仅是主控电路才需要，对于所有的数字电路和模拟电路共存的系统，电源退耦都是必不可少的。电源退耦就是将电源上的噪声电压引入到地面，让电源电压保持在一个稳定的值，从而使系统也能够稳定地工作。上图中右上角就是典型的电源退耦电路，其实现方法是在电源的正负极之间并联一大一小两个电容。</p><p>因为电容对频率高的信号，呈现低阻性，对直流呈现高阻特性。电源上的噪声对地平面而言就是一个交流信号，交流信号能通过电容到达地平面，而电源本身是直流的，电容对它会呈现出无穷大的阻力。因此，通过示波器可以看到，加了退耦电容的电源要比没加的波形要稳定得多。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_controller_cp2102.png" alt="breeze_controller_cp2102"></p><p>CP2102电路原理比较简单，它负责转换USB和RS232接口的电平，主要用于后期的代码调试中。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_controller_expansion.png" alt="breeze_controller_expansion"></p><p>扩展电路将主控制器和无线通信模块中的一些引脚引到排插上，提高了四轴飞行器的可扩展性，并方便了之后的代码下载和调试。</p></li></ul><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><ul><li><p>使用Altium Designer修改完原理图的一些电气连接，并将更改同步到PCB中的时候，软件提示有<strong>Unknown Pin</strong>和<strong>Failed to add class member</strong>这两种形式的错误。</p></li><li><p>手动给QFN封装的中间散热焊盘添加DGND等电源网络时，软件提示有多个DRC报错，错误内容是QFN封装中间焊盘和焊盘上的多个过孔之间发生了碰撞。</p></li><li><p>在给PCB正反面进行覆铜的时候，有些布局靠内部的元件焊盘并没有被覆上铜，导致DRC检查报错。</p></li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul><li><p>错误原因是元件网络表和对象类表发生改变（比如添加、删除元件的某个引脚），这与之前PCB中的已有内容发生冲突。解决办法是首先使用快捷键D+N+N，打开Netlist Manager，删除板子上的所有Net；接着使用快捷键D+C，打开Object Class Explorer，删除Component Classes中与项目有关的所有Class；最后选择重新从原理图中导入。</p></li><li><p>错误原因是没有给QFN封装中间焊盘的过孔添加DGND等网络属性，导致DRC误报。因此解决办法是在出错变绿的地方按下Shitf+V，调出Board Insight管理器，然后在里面逐一对过孔的网络属性进行修改。</p></li><li><p>错误原因是元件布局较为密集，导致没有将所有元件的焊盘都覆上铜。因此解决办法是拉大内部元件之间的空间，使其与外围的覆铜切面要尽可能的大，而对于那些实在无法与其它地层相连的覆铜，可以使用过孔的方式，将其划分到相应的电源分割层中去。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过三周左右的时间，我终于完成了Breeze微型四轴飞行器的硬件电路板设计工作。通过参考其他四轴飞行器爱好者所设计的PCB工程并成功解决硬件设计过程中所出现的一些问题，我感觉自己收获很多，当然我希望阅读本篇文章的四轴飞行器初学者或爱好者也能够从中了解到PCB设计的基本流程以及所需掌握的知识。</p><p>接下来，我会用几篇文章的篇幅来重点地讲解Breeze微型四轴飞行器的嵌入式开发工作，内容主要涉及Linux下STM32开发环境的搭建、编译和链接原理讲解、飞控算法详细剖析等，欢迎对此感兴趣的爱好者前来阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队机器人系列（0x01）：微风四轴飞行器-总纲</title>
      <link href="/zh-cn/2017/10/06/team_robot_1_breeze_quadcopter_superclass/"/>
      <url>/zh-cn/2017/10/06/team_robot_1_breeze_quadcopter_superclass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得自己第一次接触四轴飞行器是在大一，有一次我在<a href="https://www.ted.com">TED</a>上看了由瑞士苏黎世联邦理工大学的Raffaello D’Andrea教授所做的关于四轴飞行器的演讲，题目是<strong>“The astounding athletic power of quadcopters”</strong>，教授边用四轴飞行器进行演示并对其中所用到的数学理论进行讲解，对于当时什么理论都不懂的我来说，最令我惊讶的是在演示环节，那些四轴飞行器能够在高速移动的时候保证放在其顶部的细棍和酒杯不失去平衡，可以在桨叶受损的情况下依然可控，可以通过协作接住由人所抛出的小球并将其击回，可以判断人的手势来做不同的动作等。当时看完这段视频之后我的内心难以平静，脑海里萌生了自制四轴飞行器的想法，但由于后来我加入了舞蹈机器人基地并忙于组内的开发任务，所以这个想法就暂时被搁置了。</p><span id="more"></span><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/1_breeze_quadcopter_superclass/eth/eth_quadcopter_1.jpg" alt="eth_quadcopter_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/1_breeze_quadcopter_superclass/eth/eth_quadcopter_2.jpg" alt="eth_quadcopter_2"></p><p>一转眼到了大三下学期，我从舞蹈机器人机基地退役。一个偶然的机会，我从<a href="https://github.com/maksyuki">maksyuki</a>那里得知有一个叫做<a href="https://www.bitcraze.io">Crazyflie</a>的微型四轴飞行器，这一次我算是打从心底里被震撼到了，以下是几点原因：</p><ul><li><p><strong>硬件</strong><br>首先Crazyflie微型四轴飞行器的硬件设计得非常优秀，不管是PCB机械层的轮廓设计、信号层上元器件的布局还是整个电路板的走线都非常合理，而且最重要的是Bitcraze团队将模块化的理念带入到Crazyflie产品的设计之中，这使得Crazyflie微型四轴除了基本的飞行功能之外，还可以通过堆叠不同扩展坞的方式来实现不同功能的扩展。</p></li><li><p><strong>软件</strong><br>Crazyflie微型四轴飞行器的软件开发全部基于Linux开发环境，并使用已有开源且强大的软件工具（比如ARM-GCC，Make、PyQt等）进行开发。除此之外，Crazyflie微型四轴飞行器的软件源码还被托管在GitHub上，非常方便世界各地的爱好者、研究者对其进行二次开发。</p></li><li><p><strong>文档</strong><br>除了以上两点有关技术层面的优势，Crazyflie微型四轴飞行器项目还有一个最令我无法抗拒的因素——丰富的文档。说实话，我从来没有看到过一家不以盈利为主要目的团队可以将自己的开源项目文档写得如此详细，但是Bitcraze团队做到了，他们这种乐于分享的精神实在是值得我们学习。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/1_breeze_quadcopter_superclass/crazyflie/crazyflie.jpg" alt="crazyflie"></p></li></ul><p>总之，这次在看过Crazyflie微型四轴项目之后，我脑海中有关自制四轴飞行器的想法又被重新唤醒了，于是我们创建了MicroDynamics团队，而Breeze微型四轴项目也就因此顺利地诞生了。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有人曾经说过：<strong>当你有好的想法时，就要立即去实现它</strong>，特别是如果你从心底里热爱某种事物，你一定会迫不及待地想尽一切办法来完成它，尽管在实现的过程中会遇到很多困难，也会牺牲一些其它的东西，但是当你有朝一日能够看到自己的成果让更多的人受益时，我想没有什么比这更令人快乐的了。我们在组建团队之前也只是两个喜欢在大学里进行DIY的机器人爱好者，但我们希望可以通过自己的双手来为机器人社区做出自己的贡献，哪怕只要很少的一些。</p><p>MicroDynamics团队在组建过程中曾在一定程度上受到基地马文科等学长所创建<strong>Hands Free</strong>项目的影响，有关其项目更详细的介绍，请访问<a href="https://github.com/HANDS-FREE/HANDS-FREE.github.io/wiki">Hands Free项目官方Wiki</a>。</p><p>MicroDynamics，顾名思义微型动力，它的名字分别取自Microsoft和BostonDynamics这两家伟大的公司。我们想做的就如同名字所体现的那样——搭建一个小型或微型的开源机器人平台，它要足够的便宜、易于开发并且拥有较强的动力学特性，可以让更多的大学生等机器人爱好者真正地参与到实体机器人的开发过程中来，并从中学到一些有价值的知识。</p><p>MicroDynamics团队目前从四轴飞行器平台开始，从底层到顶层搭建一套完整的、面向未来的开源机器人开发框架，以便降低模块之间的耦合性，提高机器人整体开发效率。关于MicroDynamics更多详细的开发资料，请访问<a href="https://github.com/microdynamics">MicroDynamics团队GitHub</a>（包含开发规范、日志、工程模板）和<a href="https://github.com/microdynamics-quadcopter">MicroDynamics Quadcopter项目GitHub</a>（包含硬件设计、软件代码）。</p><h3 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h3><ul><li><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>MicroDynamics Quadcopter项目是一个面向微型四轴飞行器开发和研究的开源软硬件系统。它以硬件电路和嵌入式框架为核心，丰富的软件算法为支撑，可以完成不同的实验任务。除此之外，在硬件上它还预留有一些接口，可以与第三方定制模块进行连接，便于飞行器功能的扩展。未来在软件上它还将支持目前流行的ROS，使得更多的算法可以被应用其中。</p></li><li><h4 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h4><p>我们团队的理念是：<strong>开源、探索、创新</strong>。</p></li><li><h4 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h4><p>我们团队的宗旨是：以开源共享为基本准则，做到<strong>取之开源，回馈开源</strong>；其次要拥有探索未知技术领域的勇气和决心，遇到困难绝不退缩；最后强调技术至上，鼓励在掌握已有知识的基础之上，不断开拓创新，做出属于自己的成果。</p></li></ul><h3 id="开发现状"><a href="#开发现状" class="headerlink" title="开发现状"></a>开发现状</h3><ul><li><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>Breeze微型四轴飞行器硬件电路主要由五个部分组成，以下是硬件的架构图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/2_breeze_quadcopter_hardware_design/breeze_hardware_architecture.png" alt="breeze_hardware_architecture"></p><p><strong>电机驱动模块</strong><br>电机驱动模块主要负责接收主控制器发过来的PWM（脉冲宽度调制）信号来控制四轴飞行器每个有刷空心杯电机的转速。</p><p><strong>电源管理模块</strong><br>电源管理模块是四轴飞行器能量的来源，它的主要功能有：负责USB和锂电池电源的切换、管理锂电池的充放电以及对输入的电源进行降稳压操作。</p><p><strong>传感器模块</strong><br>传感器模块包括了陀螺仪、加速度计、磁力计和气压计。正是由以上这些传感器所构成的10自由度IMU（惯性测量单元）为四轴飞行器提供了绝对或相对的位置和姿态信息，使得四轴飞行器可以在运动过程中获知自身的运动状态，使其可以更好地预估自己的行为。</p><p><strong>无线通信模块</strong><br>无线通信模块根据预先制订的通信协议，在四轴飞行器和远程PC端之间建立起数据通信的桥梁，便于在PC端控制和监视飞行器的运动状态。</p><p><strong>主控制器模块</strong><br>主控制器模块是四轴飞行器的核心，它主要接收从上层传感器和无线通信模块发过来的数据，并根据不同的控制命令对姿态数据进行数学解算，最后将解算结果以PWM信号的形式发送给电机驱动模块。</p></li><li><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>Breeze微型四轴飞行器的嵌入式系统架构如下图所示，其中主要包含硬件设备、底层驱动、外设模块和飞控算法等四个部分。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/4_breeze_quadcopter_stm32_makefile/breeze_embedded_architecture.png" alt="breeze_embedded_architecture"></p><p><strong>硬件设备</strong><br>硬件设备部分包含上面第介绍过的电路模块：电机驱动、电源管理、传感器、无线通信以及主控制器。</p><p><strong>底层驱动</strong><br>底层驱动部分包含了常用的外设接口（如IIC、SPI、USART）和内部核心功能（如时钟、延时、中断、定时器、EEPROM、Flash）。它主要是根据STM32官方固件库（上图Libraries部分）中的内容，对系统外设接口或内部核心功能进行进一步的封装，以满足上层外设模块的使用需要。</p><p><strong>外设模块</strong><br>外设模块是对具体外设硬件进行操作的函数库，它使用底层驱动中的大量函数来实现对硬件的控制。外设模块包含了IMU、电机、电池、NRF24L01和CommLink通信协议栈等。本章将会在后面介绍其中比较重要的几个。</p><p><strong>飞控算法</strong><br>飞控算法处在整个嵌入式架构的最顶层，它的实现是要建立在以上三者的基础之上的，比如高度融合、数据滤波、控制算法等。由于整个四轴飞行器的核心功能都是由飞控算法决定的，所以飞控算法是该嵌入式系统的绝对核心，也是开发的重点。</p></li><li><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p>如下图所示，<a href="https://github.com/microdynamics">MicroDynamics团队GitHub</a>中主要包含了我们团队自己制定的代码规范，Linux下STM32开发的工程模板文件以及记录有我们在开发过程中所遇问题以及解决办法的日志文件。<a href="https://github.com/microdynamics-robot-quadcopter">MicroDynamics Quadcopter项目GitHub</a>中则主要包含了Breeze微型四轴飞行器的硬件电路设计、嵌入式代码以及图形化的上位机调试工具等。总之我们把所有能开源的资料都放到了以下两个GitHub组织里，方便交流学习。</p><div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p>由于我们MicroDynamics团队将正式着手开发新一代的微型四轴飞行器，所以Breeze微型四轴飞行器的代码不会再被开发和维护，目前已有内容仅供学习使用。</p></div><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/1_breeze_quadcopter_superclass/microdynamics/github_microdynamics.png" alt="github_microdynamics"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/team_robots/1_breeze_quadcopter_superclass/microdynamics/github_microdynamics_quadcopter.png" alt="github_microdynamics_quadcopter"></p></li></ul><h3 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h3><p>目前MicroDynamics团队的项目文档、开发模板以及Breeze微型四轴飞行器的硬件电路设计、嵌入式代码和上层调试软件均遵循<strong>GPL-3.0许可协议</strong>，使用者可以免费使用和修改代码，但修改和衍生后的代码不允许做为闭源商业软件进行发布和销售。</p><p>MicroDynamics团队拥有其所有项目的版权，而对于项目中所用到的其它开源代码，版权则归其原作者所有。在未经授权的情况下，任何个人、组织不得将MicroDynamics团队的代码用于商业行为，否则追究法律责任！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Breeze微型四轴飞行器既是我们MicroDynamics团队的第一个项目，也是我本科毕业设计研究的主要内容，虽然它是我们根据国内外开源四轴项目（Crazyflie和Crazepony）模仿制作而来，但是通过亲自动手完成整个四轴飞行器的开发工作，我从其中学到了很多东西，它让我从一个不会用Altium Designer做复杂PCB设计、不懂Linux环境下STM32嵌入式开发以及常用飞控算法原理的普通大四学生真正成长为一名具备基本开发能力的四轴飞行器爱好者。</p><p>如果你也是一个喜欢DIY四轴飞行器的大学生或爱好者，但却像当初的我一样没有任何知识基础的话，我希望该Breeze微型四轴系列文章能够让你理解开发四轴飞行器背后所需要的基本知识，并从中受益匪浅。</p><p>最后，我要阐明一下我的观点：<strong>虽然我们是站在巨人肩膀上的一代，但这并不意味着重复造轮子就没有意义，因为在这个过程中你能够掌握到绝大多数人都不会去学的知识，而这些知识最终将会成为你之后开发之路上最为宝贵的财富！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 团队机器人系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro Quadcopter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x04）：2015 RoboCup中国杯</title>
      <link href="/zh-cn/2017/10/01/tech_note_4_2015_robocup_china_cup/"/>
      <url>/zh-cn/2017/10/01/tech_note_4_2015_robocup_china_cup/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着RoboCup合肥国际赛的结束，我们晓萌队又开始紧锣密鼓地着手准备10月份的RoboCup中国赛。由于之前5月份我们在中国服务机器人大赛上发挥得不理想，再加上即将到来RoboCup中国赛是我们这一届晓萌队成员的最后一战，所以这一次我们根据比赛规则提前制定好了开发计划，每个队员也都尽全力来完成各自的任务，当然我们目标很明确：<strong>把握机会，不留遗憾</strong>。</p><p>2015年10月份的RobCup中国赛将会在贵阳举办，由于是一年一度的全国赛，所以国内研究服务机器人的高校队伍基本上都会参加，而最令我们感到意外的是刚刚参加完RoboCup合肥国际赛的中科大蓝鹰队也会携可佳机器人参赛，届时我们的晓萌可以和中科大的可佳同台较量，这绝对是我们向强队学习的绝佳机会。</p><span id="more"></span><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>由于之前本人电脑中存储的照片全部丢失，因此该博客中所显示的照片数量比较有限，希望读者可以理解。</p></div><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>我们吸取了之前比赛失利的教训，提高了赛前调试的次数和强度。由于9月份开学之后，我们的课业都比较繁重，所以那时我们基本上是白天学习专业课，晚上加班加点来舞蹈机器人基地调试机器人。晚上调试机器人最大的好处就是行动比较自由且不会受到外界的干扰，我们可以在楼道走廊里临时搭建好调试场地，并根据比赛内容进行专项联合调试，在联合调试过程中，各个机器人模块（这里的模块主要指的是软件方面，如机器人底盘、机械臂、语音、图像和策略）的负责人需要留在现场，以便出现问题可以大家一起讨论解决。</p><ul><li><h4 id="自主导航进门"><a href="#自主导航进门" class="headerlink" title="自主导航进门"></a>自主导航进门</h4><p>以下图片展示的是我们晓萌机器人在自主导航调试中有关进门环节的情况，由于门刚开始是处于关闭的状态，所以机器人需要通过激光传感器不断地检测门的开启或关闭状态来判断是否让自己进门。除此之外，门的宽度较窄，为了保证晓萌在进门的时候不会撞到两边的门框，我们在原有SLAM算法的基础之上进行了定制，融合了地图中的边缘信息，使得机器人能够顺利地过门。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_navigation.jpg" alt="debug_navigation"></p></li><li><h4 id="自主识别抓取物体"><a href="#自主识别抓取物体" class="headerlink" title="自主识别抓取物体"></a>自主识别抓取物体</h4><p>自主识别和抓取物体项目是我们这一次赛前调试的重点内容。早在暑假的时候，我就已经完成了大部分机械臂控制和规划算法的编写工作，不过为了追求整个抓取项目的鲁棒性，我和其他几名队友商量之后还是决定简化机械臂的控制，即只让机械臂负责末端夹持器Z轴高度的变化，而对于末端夹持器其余两个维度的位置调整则交给了更加成熟的底盘模块（使用底盘的前进、后退以及旋转功能来实现）。如下几个图所示，经过大量的调试，简化版的机械臂抓取策略还是相当稳定的，基本上只要图像模块能够识别到物体，机械臂就能将其抓取并放到柜子（由于当时经费紧张，所以我们用桌子和纸箱搭了一个简易的两层“柜子”）的下面一层中，不过缺点也很明显，那就是晓萌完成一次完整的抓取流程需要花费很多时间（主要浪费在底盘多次前进、后退以及缓慢的旋转上），这个问题我们会在比赛之后赛进行改进，以提高晓萌机械臂的抓取效率。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_object_manipulation_1.jpg" alt="debug_object_manipulation_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_object_manipulation_2.jpg" alt="debug_object_manipulation_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_object_manipulation_3.jpg" alt="debug_object_manipulation_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_object_manipulation_4.jpg" alt="debug_object_manipulation_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//debug/debug_object_manipulation_5.jpg" alt="debug_object_manipulation_5"></p></li></ul><h3 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h3><ul><li><h4 id="RoboZoo"><a href="#RoboZoo" class="headerlink" title="RoboZoo"></a>RoboZoo</h4><p>由于RoboZoo仅是一个展示项目，没有太多涉及技术方面的内容，而且其它几个重要的比赛项目占据了我们大部分的调试时间，所以我们算是在比赛开始前几天才想出一个比较有创意的比赛方案出来。如下图所示，晓萌机器人做静态展示，而其前面的大红机器人（我们基地的上古舞蹈机器人）则在海报上进行动态的舞蹈展示，可惜的是我们本来的设计方案是让晓萌机器人通过语音来命令大红来开始跳舞，但由于现场噪音太大，几次尝试都没有成果，所以我们索性直接通过人的语音来启动大红，不过最后结果还是不错的，我们在这个项目上拿了第一名。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/robozoo/robozoo.jpg" alt="robozoo"></p></li><li><h4 id="Speech-Recognition"><a href="#Speech-Recognition" class="headerlink" title="Speech Recognition"></a>Speech Recognition</h4><p>在语音识别这个项目上，技术裁判会根据电脑上安装有的<a href="https://github.com/kyordhel/GPSRCmdGen">GPSRCmdGen</a>软件所随机生成的问题序列来询问机器人，机器人需要通过语音重复识别到的问题然后再进行回答，问题总共有15个，每答对一个就加一定的分数，最后哪个队得分高则排在前面。我们晓萌队在语音识别这个单项上依然发挥得非常出色，我记得最后的成绩是正确答对13个问题，效果拔群。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/speech_recognition/speech_recognition.jpg" alt="speech_recognition"></p></li><li><h4 id="Face-Recognition"><a href="#Face-Recognition" class="headerlink" title="Face Recognition"></a>Face Recognition</h4><p>人脸识别项目考察机器人如何在人群中找到特定的目标人物。机器人首先需要在比赛开始之后向人群前进一段距离，到达指定的识别地点之后，机器人要通过摄像头来捕捉前排坐在椅子上和后排站立的人的脸部信息，等到机器人成功识别出目标之后，只需走向目标人物并用语音向裁判说明即可。不过由于该项难度较大，除了中科大的可佳能够轻松完成之外，没有队伍可以成功地执行完整个任务流程，当然我们晓萌队在这个项目上得分也不高，看来之后还要继续努力。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/face_recognition/face_recognition_1.jpg" alt="face_recognition_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/face_recognition/face_recognition_2.jpg" alt="face_recognition_2"></p></li><li><h4 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h4><p>自主导航项目要求机器人在室内能够准确到达几个目标位置点，并在整个移动过程中避开桌椅、墙壁等障碍物。那天的比赛中，我们晓萌机器人在前两轮表现不佳，机器人在裁判下令比赛开始之后并没有移动（当时我们都焦急得满头大汗），我们分析问题主要出在晓萌机器人在进门阶段时没有正常地检测到房门已被打开，所以底盘模块负责人壕神在第三轮比赛前的短暂准备时间内对代码进行了一些调整，还好最后一轮比赛我们的晓萌机器人能够正常地运行，并且完成了一部分比赛任务，总算之前的努力没有白费。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_1.jpg" alt="navigation_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_2.jpg" alt="navigation_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_3.jpg" alt="navigation_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_4.jpg" alt="navigation_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_5.jpg" alt="navigation_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/navigation/navigation_6.jpg" alt="navigation_6"></p></li><li><h4 id="Object-Recognition-amp-Manipulation"><a href="#Object-Recognition-amp-Manipulation" class="headerlink" title="Object Recognition &amp; Manipulation"></a>Object Recognition &amp; Manipulation</h4><p>由于物体识别和抓取项目是最后一个比赛项目，所以留给我们在现场进行调试的时间比较少，我的两个队友也在抓紧时间对裁判公布的每件物品进行拍照和训练。在本次比赛中，只有四个参赛队伍的机器人具有机械臂，它们分别是：中科大、上交大、上应技和西工大，我们在四个队伍中排在最后一个出场，在已经完赛的前三个队伍中，上应技没有实现抓取，上交大在第二轮中成功识别并抓取一个物品，而中科大则是在首轮就相当轻松地识别并抓取了两三个物品。</p><p>最后轮到我们出场了，我们在把晓萌机器人摆放在白线（比赛开始位置）上之后，由我来启动晓萌机器人的比赛程序（因为我是机械臂模块的负责人），虽然要启动的7条命令我早已烂熟于心，但是当全场所有人的目光都投向你的时候，未免还是有些紧张。在成功启动所有程序之后，比赛正式开始，第一轮比赛我们识别错了物体，问题可能出在策略模块对所抓物体的选择上，所以在第二轮前的准备时间里，耀神和芳姐讨论之后决定将要抓取的物体名称直接固化在状态机程序中，也就是说我们提前要在两个物品中选一个去抓。最后的事实证明，我们赌赢了但是非常遗憾的是我们离晓萌机器人在正式比赛中成功自主识别和抓取物品这一里程碑事件就差了几个厘米的距离。因为底盘从白线处前进到识别位置时差了几个厘米，导致Kinect没能识别到物体，后来在比赛结束之后，我们把晓萌机器人往前移动了几个厘米，果然程序都一切正常地执行下去了……</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_1.jpg" alt="object_manipulation_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_2.jpg" alt="object_manipulation_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_3.jpg" alt="object_manipulation_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_4.jpg" alt="object_manipulation_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_5.jpg" alt="object_manipulation_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//competition/object_manipulation/object_manipulation_6.jpg" alt="object_manipulation_6"></p></li></ul><h3 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h3><p>我们这一届晓萌团队在之前学长开发的基础上对机器人的整体架构进行全新的变革。机械部分：忧神设计了新的机械手爪并为晓萌机器人的显示屏、麦克风和摄像头等设备提供了结实的固定支架；电子部分：东神和派大星为嵌入式系统编写了新的机械臂位置控制算法；软件部分：壕神提高了底盘模块的自主导航能力，耀神根据比赛规则编写了基于状态机跳转的新策略模块，张凡让语音识别的准确度得到进一步的提高，芳姐和刘琪则实现了基于OpenCV和PCL等图像技术的物体和人脸识别算法，朋为我们翻译了英文的比赛规则并为复杂算法提供数学支持，而我负责编写了机械臂的控制和规划算法。总之，团队的阶段性成功离不开每一位成员的辛苦努力和付出，也希望之后的晓萌团队可以发展得越来越好。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//team/team_cloth_and_logo.jpg" alt="team_cloth_and_logo"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//team/team_group_photo.jpg" alt="team_group_photo"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们晓萌团队在本次RoboCup贵阳公开赛上的表现相较之前5月份的那次有了很大的提升，但是从过程来看依然暴露了一些问题：比如在物体识别和抓取项目中，我们离成功就差个很小的距离，表面来看问题出现的原因是我们晓萌的底盘离柜子的距离不够，导致Kinect没能识别到物体，而深层次的原因则在于我们在调试的时候没有把所有可能出现的情况都考虑在内，即测试用例理想化，极端或边界情况都没有被进行测试。因此，我们在做一个复杂的机器人系统时，不光要会写代码，还要会用开发规范来提高代码质量，会用Git等软件来做代码版本控制，会用所有可能出现的情况来全方面测试代码，最后要会用文档来记录开发或调试过程中出现的问题、解决方法、经验总结等。个人认为，只要未来的晓萌团队能用上述软件工程的方法来对自己进行严格管理，那我们就会在追逐终极目标——参加RoboCup@Home国际赛的道路上不断前进！</p><p>当然，本篇博客的结束也意味着我的RoboCup比赛之旅正式完结。回想短短一年之内的3次比赛，我们既经历过在基地熬夜调试到凌晨，用椅子拼床用书做枕头的艰苦（由于比赛前住基地的人比较多，行军床不够用了，所以只好简单凑活一下），也在紧张激烈的比赛之余体验过各座城市的风土人情，不过最重要的是我们能够像《速度与激情》系列里的赛车家族一样，可以共同面对未知的困难，并在解决困难的途中各尽所长，甚至在关键时刻能有所牺牲，我想哪怕最后比赛结果不理想，但这份曲折且宝贵的经历也足以配得上最终的胜利！</p><p>在基地的时候，我每次跟别的同学或老师讲我们基地或我们家政组所正在研究的内容时，内心就会自然而然地产生一种成就感，我们正在做的是可以在不久的将来能引领人工智能发展的服务机器人领域，虽然我们的研究还处于早期阶段，但有一点可以肯定：目前西工大还没有一支由本科生组成的团队可以达到我们的高度，光这一点就让我发自内心的自豪！</p><p>最后，以《速度与激情7》中的片尾经典台词和晓萌的照片来结束这篇文章，以纪念我们大学生活中这段最为宝贵的经历：</p><p>No matter where you are, whether it’s a quarter mile away or half way across the world. The most important thing in life will always be the people in this room, right here, right now. You’ll always be with me. And you’ll always be my brother.</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/9_guiyang//team/team_xmbot.jpg" alt="team_xmbot"></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> RoboCup </tag>
            
            <tag> RoboCup@Home </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x02）：2015 RoboCup世界杯</title>
      <link href="/zh-cn/2017/07/21/tech_note_2_2015_robocup_world_cup/"/>
      <url>/zh-cn/2017/07/21/tech_note_2_2015_robocup_world_cup/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RoboCup即机器人世界杯，是目前世界上级别规格最高、影响力最广的机器人赛事（当然，DARPA机器人挑战赛除外）。中国曾经在2008年的时候举办过一次RoboCup国际赛，地点是在苏州，而七年之后，RoboCup国际赛又一次降临中国，这次则是在拥有多年举办机器人赛事经验的合肥。非常幸运的是我们晓萌机器人团队能够被邀请参与本次比赛新增的BSR项目，并获得免费近距离观摩比赛的机会。</p><p>这篇文章主要讲述我们在RoboCup合肥国际赛所发生的一些事情，内容主要以亲身经历为主，其中也会涉及技术方面，但不是重点。</p><span id="more"></span><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><h3 id="前一天"><a href="#前一天" class="headerlink" title="前一天"></a>前一天</h3><p>我们在开始报到注册的前一天坐火车到达了合肥，之后又乘坐公交车来到了国际会展中心附近。因为长途奔波，大家都比较劳累了，所以在下午办理完入住宾馆的手续之后，大部分队员就在宾馆里休息或为接下来的比赛进行调试，而我则在晚饭之后决定先到比赛场馆附近转一转，一是可以熟悉周围的环境，二是能够满足自己内心对未知新事物的向往。</p><h4 id="比赛场馆"><a href="#比赛场馆" class="headerlink" title="比赛场馆"></a>比赛场馆</h4><p>我记得自己从宾馆出来之后，在路上走了一段时间，刚开始路边都是一些居民住宅区和自营小餐馆，可是随着道路一转，一个庞大且点缀有光点的建筑物突然映入我的眼帘，原来那就是胖胖学长所说的国际会展中心（因为之前学长们曾经在这个场馆参加过比赛，所以对场馆及其周围很熟悉）。我走近一看，感觉整个国际会展中心建的还是相当现代化，虽然我不是学建筑出身的，但是会展中心所呈现出来的那种庄严气势还是给我留下了非常深刻的印象。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/competition_venue_1.jpg" alt="competition_venue_1"></p><p>从上图中可以看到，国际会展中心的工作人员为了迎接RoboCup这一世界顶级的机器人赛事，正在紧锣密鼓地准备参赛队伍的调试区域、比赛的场地以及各大参展商的展台。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/competition_venue_2.jpg" alt="competition_venue_2"></p><p>国际会展中心的周围也是高楼林立，可以看到这个区域周边经济发展得应该还算不错。而且会展中心的外围也早就拉上条幅，升起气球，为赛事的成功举办烘托气氛。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/competition_venue_3.jpg" alt="competition_venue_3"></p><p>这张照片是我从会展中心旁边的玻璃环形人行天桥上所拍下来的，从图中可以看到，远处的会展中心坐落在茫茫的夜色之中，似乎预示着即将有重大的事情发生。</p><h4 id="宣传海报"><a href="#宣传海报" class="headerlink" title="宣传海报"></a>宣传海报</h4><p>以下照片均是我在会展中心周围所拍，内容以庆祝RoboCup机器人比赛举办和欢迎来自世界各地的参赛队伍为主要主题。虽然当时夜色已经很晚了，但是你依然能从这些宣传海报中感受到合肥这个城市对机器人的喜爱。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_1.jpg" alt="display_board_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_2.jpg" alt="display_board_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_3.jpg" alt="display_board_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_4.jpg" alt="display_board_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_5.jpg" alt="display_board_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_6.jpg" alt="display_board_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/display_board_7.jpg" alt="display_board_7"></p><h4 id="赛前调试"><a href="#赛前调试" class="headerlink" title="赛前调试"></a>赛前调试</h4><p>当我从外面超市买了一些零食回来的时候，发现下图中的两个大神正在探讨如何将ROS下的自主导航框架与刚从学长那里借来的Robopeak RPLIDAR低成本激光传感器（即图中发绿色光的物体，因为根据BSR项目的要求，价格昂贵的传感器一律不允许使用）进行融合。虽然RPLIDAR官方提供有ROS驱动包，但在实际调试过程还需对其源码进行一定的修改才能获得比较好的使用效果。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/2_hefei/competition_debug.jpg" alt="competition_debug"></p><p>在RoboCup合肥国际赛的前一天里，我感受到了合肥这座城市的风土人情，比如我们一起去吃了味道正宗的徽州黄焖鸡，领略到了大部分合肥商人在找钱时用硬币的特殊习惯，而最重要的是我们可以怀揣着对机器人的热爱，在接下来的几天中，亲身参与到RoboCup这一世界最高级别的机器人比赛之中。毫无疑问，我们内心的自豪和激动之情难以言表！</p><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><h4 id="报到注册"><a href="#报到注册" class="headerlink" title="报到注册"></a>报到注册</h4><p>RoboCup国际赛的第一天，我们都起得很早。在宾馆的餐厅里吃完早饭之后，我们立即携带机器人和相关设备直奔国际会展中心，可是等到达场馆之后，我们才发现那里已经有很多参赛队伍在排队等待报到注册（原来老外比我们起得还要早）。在等待的过程中，我发现很多国外的队伍都有自己的队服，而且运输机器人等装备的铝制箱子非常专业，所以就单在硬件这个方面上，个人感觉老外就已经甩我们好几条街了。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/registration/registration_1.jpg" alt="registration_1"></p><p>从上图中可以看到，当前排队等待报到注册的队伍已经有不少了，其中大部分队伍来自欧美机器人强国。除此之外，大部分国外队员们都显得很轻松，有说有笑，感觉他们是真的来享受这一年一度的机器人盛会，而不是带着某些硬性指标来的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/registration/registration_2.jpg" alt="registration_2"></p><p>上图的证件和手册是我们报到注册完之后，从工作人员那里领的。纸袋里面装有一本介绍合肥的中英手册、一本介绍中国科学技术大学USTC研究成果的全英文小册子、一本很薄的全英文参赛指南、一本介绍科大讯飞的中英手册以及最重要的参赛证件。</p><p>其中参赛证件比较特殊，我这里详细地讲解一下：因为RoboCup比赛本身参赛费较贵，我记得好像是一个队员100美元，一个领队300美元，一个机器人500美元，所以很多缺少经费的高校就没有办法参与。而此次RoboCup在中国举办，作为东道主，USTC希望能有更多的中国高校参与到比赛中来，所以特别创立了BSR项目，并在原有参赛队员数量的基础上增加了很多观摩团席位，而我现在手里拿着的就是观摩证（可能只限于新增的BSR项目）。不过观摩证和参赛证相比还是有一些限制的，比如除了在比赛之前两天的调试期间可以自由进出会展中心以及比赛区域之外，在正式比赛期间观摩证便无法发挥作用，即既不能进入会展中心，也不能进入参赛队伍的调试区域。不过，我们可以使用参赛证将没有或只持有观摩证的队员换进来，这样一来，证件的问题就解决了。</p><h4 id="参赛组别"><a href="#参赛组别" class="headerlink" title="参赛组别"></a>参赛组别</h4><ul><li><p><strong>RoboCup Soccer</strong><br><strong>Small Size</strong><br>RoboCup小型组是RoboCup足球比赛中历史最悠久的一个，它主要解决在混合集中/分布式系统的高动态环境下的智能多机器人/智能体协同和控制问题。每个参赛队伍需要派出六个机器人，每个机器人都必须符合规则中设定的尺寸：即机器人的大小要在180毫米直径的圆圈内，且不能高于15厘米。机器人将会在一个9米长6米宽的绿色地毯场上用橙色高尔夫球来进行比赛，场上所有物体均由位于比赛场地上方的视觉系统来进行跟踪，通过应用特定的视觉算法，便可以实现每个机器人的实时精准定位。除此之外，每个队伍与机器人之间是依靠无线通信来进行协调和控制的，为了保证通信的效果，比赛所使用的是专用商业无线电发射/接收单元。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/small_size/small_size_1.jpg" alt="small_size_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/small_size/small_size_2.jpg" alt="small_size_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/small_size/small_size_3.jpg" alt="small_size_3"></p><p><strong>Middle Size</strong><br>RoboCup中型组采用全自主机器人，其所使用的足球大小与FIFA的相同。该项组别主要考察各个队伍在机电一体化设计、控制和基于规划和感知层面的多智能体协同能力。虽然每个中型组队伍都可以自由设计自己的机器人，但所有的传感器必须全部是机载的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/middle_size/middle_size_1.jpg" alt="middle_size_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/middle_size/middle_size_2.jpg" alt="middle_size_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/middle_size/middle_size_3.jpg" alt="middle_size_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/middle_size/middle_size_4.jpg" alt="middle_size_4"></p><p><strong>Standard Platform</strong><br>RoboCup标准平台组采用软银机器人公司的NAO机器人，NAO机器人目前是在学术领域世界范围内运用最广泛的类人机器人，它配备有多种传感器，而且支持跨平台操作系统编程，功能非常强大。如果追溯历史的话，NAO机器人是于2007年7月被RoboCup组委会选定为标准平台，用来替换索尼机器狗AIBO。关于标准平台组比赛，由于各队使用统一的机器人进行比赛，所以参赛队伍只需比拼软件算法水平，虽然每个NAO机器人都必须完全自主地发挥作用，但是本方的几个NAO机器人之间可以联合在一起来共同完成踢球的任务。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_1.jpg" alt="standard_platform_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_2.jpg" alt="standard_platform_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_3.jpg" alt="standard_platform_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_4.jpg" alt="standard_platform_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_5.jpg" alt="standard_platform_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/standard_platform/standard_platform_6.jpg" alt="standard_platform_6"></p><p><strong>Humanoid</strong><br>RoboCup类人组的机器人是拥有类似人体规划和感知能力的全自主机器人，与类人组之外的人形机器人不同，RoboCup类人组机器人通过使用距离传感器并不会简化感知和建模任务。除了足球比赛之外，技术挑战也在发生，如动态行走和跑步、保持平衡的踢球、视觉感知足球、自我定位以及团队合作目前都是类人组的研究课题之一。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_1.jpg" alt="humanoid_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_2.jpg" alt="humanoid_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_3.jpg" alt="humanoid_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_4.jpg" alt="humanoid_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_5.jpg" alt="humanoid_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_6.jpg" alt="humanoid_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_soccer/humanoid/humanoid_7.jpg" alt="humanoid_7"></p></li><li><p><strong>RoboCup@Home</strong><br><strong>Open Platform</strong><br>RoboCup@Home开放平台组用于评估各个队伍在现实非标准化家庭环境中的能力和性能，重点考察人机交互与合作、动态环境中的导航和建图、自然光下的计算机视觉和物体识别、物体操作、自适应行为、行为整合、环境智能、标准化和系统集成。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_1.jpg" alt="open_platform_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_2.jpg" alt="open_platform_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_3.jpg" alt="open_platform_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_4.jpg" alt="open_platform_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_5.jpg" alt="open_platform_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_6.jpg" alt="open_platform_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_7.jpg" alt="open_platform_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_8.jpg" alt="open_platform_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_9.jpg" alt="open_platform_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_10.jpg" alt="open_platform_10"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_11.jpg" alt="open_platform_11"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_12.jpg" alt="open_platform_12"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_13.jpg" alt="open_platform_13"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/open_platform/open_platform_14.jpg" alt="open_platform_14"></p><p><strong>BSR</strong><br>RoboCup@Home服务机器人标准测试（Benchmark Service Robot）组并不是官方设立的正式比赛项目，它是由RoboCup合肥国际赛主办方中科大临时发起并创办的，旨在降低机器人平台的成本，让更多的中国高校队伍能够参与其中。由于对机器人的成本进行了限制，所以各个队伍的机器人大小都必须要在规则中所指定的范围之内，而且不允许使用价格昂贵的传感器（这也是为什么很多队伍使用Robopeak RPLIDAR的原因）。BSR项目主要以定量的方式考察机器人底盘移动的精准程度、自主导航以及避障和越障能力。</p><ul><li><p><strong>精准测试</strong><br>精准测试主要依靠基于摄像机的自动裁判系统来进行评判。具体比赛项目是让机器人在不负重以及负重不同重量的情况下直线前进一段距离和旋转一定的角度，并根据机器人实际完成值与给定目标值之间的偏差来计算出各队的分数，负重越重（不同的负重有不同的权重系数），偏差越小，得分越多。</p></li><li><p><strong>自主导航</strong><br>自主导航需要机器人事先根据激光或视觉传感器建立好比赛场地的地图，在比赛开始之前，由裁判在场地中随机指定机器人的启动和停止位置，机器人必须要从启动位置启动，并在途中避开障碍物之后才能到达终点。因为自主导航是服务机器人的基本能力，所以大部分队伍都做得不错。</p></li><li><p><strong>避障和越障</strong><br>因为比赛场地的特殊设置，机器人在自主导航的过程中肯定需要避开障碍物并至少穿过一次宽度较窄的金属小门。其中让机器人穿门而过是比较难的，因为金属门较窄，只比机器人底盘的宽度大一些，如果机器人在自主导航的时候移动得不够精确，就会很容易撞到门柱上；另外一点是比赛的金属小门带有一个门槛，这对使用普通轮的机器人来说可能不算什么，最多过门槛的时候颠簸几下，但是对于使用麦克纳姆轮的队伍来说（包括我们晓萌队），门槛就是一个致命的打击，原因很明显，麦轮因其特殊的构造本身就不适合翻越障碍物。不过还好，大部分队伍的机器人还没到门槛就由于各种问题被抬下场了，这也算是一种心理安慰吧。</p></li></ul><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/bsr/bsr_1.jpg" alt="bsr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/bsr/bsr_2.jpg" alt="bsr_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/bsr/bsr_3.jpg" alt="bsr_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup@home/bsr/bsr_4.jpg" alt="bsr_4"></p></li><li><p><strong>RoboCup Secure</strong><br><strong>Robot</strong><br>RoboCup救援组的目标是促进在恶劣环境下灾难救援领域机器人的研究和开发工作，在非结构化环境中搜索模拟的受害者时，需要机器人展示其在移动性、环境感知、规划、建图以及实际操作方面的能力。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_1.jpg" alt="robocup_secure_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_2.jpg" alt="robocup_secure_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_3.jpg" alt="robocup_secure_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_4.jpg" alt="robocup_secure_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_5.jpg" alt="robocup_secure_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_6.jpg" alt="robocup_secure_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_7.jpg" alt="robocup_secure_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_8.jpg" alt="robocup_secure_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_9.jpg" alt="robocup_secure_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_10.jpg" alt="robocup_secure_10"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_11.jpg" alt="robocup_secure_11"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_12.jpg" alt="robocup_secure_12"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_secure/robocup_secure_13.jpg" alt="robocup_secure_13"></p></li><li><p><strong>RoboCup Industrial</strong><br><strong>RoboCup@Work</strong><br>RoboCup@Work是RoboCup的最新比赛项目，其目标是在借鉴其他已有RoboCup比赛项目经验证的想法和概念基础之上，解决自主移动工业机器人对零件的识别、抓取和放置操作等任务难题。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_industrial/robocup@work/robocup@work_1.jpg" alt="robocup@work_1"></p><p><strong>RoboCup Logistics</strong><br>RoboCup物流组创办的想法来源于智能工厂中的工业场景，因为未来的智能工厂需要更灵活的物流运输能力，而机器人则是最佳的选择。本次RoboCup比赛物流组项目的机器人全部由FESTO公司提供，虽然我没太看懂那些机器人具体是如何运作的，但从外部蓝色的细管还是可以判断出FESTO的物流机器人应该采用的是气动原理。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_industrial/robocup_logistics/robocup_logistics_1.jpg" alt="robocup_logistics_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/robocup_industrial/robocup_logistics/robocup_logistics_2.jpg" alt="robocup_logistics_2"></p></li></ul><h4 id="参展企业"><a href="#参展企业" class="headerlink" title="参展企业"></a>参展企业</h4><ul><li><p><strong>KUKA</strong><br>KUKA公司来源于德国，是世界领先的四大工业机器人制造商之一。KUKA机器人种类齐全，几乎涵盖了所有负载范围和类型，并确立了人机协作领域的标准。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/kuka/kuka_1.jpg" alt="kuka_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/kuka/kuka_2.jpg" alt="kuka_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/kuka/kuka_3.jpg" alt="kuka_3"></p></li><li><p><strong>ROBOTIS</strong><br>ROBOTIS公司来自于韩国，是世界最为著名的机器人公司之一，该公司的标志性产品为Dynamixel系列舵机和ROBOTIS OP小型人型机器人。ROBOTIS公司的发展理念是：既为孩子们提供教具，让孩子们提升创新能力，也为专家们提供解决方案，让他们把富有创意的想法实现为实际机器人。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/robotis/robotis_1.jpg" alt="robotis_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/robotis/robotis_2.jpg" alt="robotis_2"></p></li><li><p><strong>IAMT</strong><br>中国科学院合肥物质科学研究院先进制造技术研究所（以下简称先进制造所）是中国科学院合肥物质科学研究院（以下简称合肥研究院）下属的研究单位之一，主要研究方向包括：机器人技术（仿生机器人、服务机器人、工业机器人等）和智能装备技术（创新设计、精密制造、智能材料、系统集成等）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/iamt/iamt_1.jpg" alt="iamt_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/iamt/iamt_2.jpg" alt="iamt_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/iamt/iamt_3.jpg" alt="iamt_3"></p></li><li><p><strong>GaiTech</strong><br>硅步科技是专业提供机器人整体解决方案的创新型公司，其主要业务是基于ROS的智能机器人集成、生产、销售和技术支持服务。目前，随着人工智能技术的不断发展，硅步科技也开始逐步致力于机器人电机控制系统、无人机飞行稳定系统、智能相机和高性能传感器等技术和产品的研究和开发工作。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/3_hefei/exhibitor/gaitech/gaitech_1.jpg" alt="gaitech_1"></p></li></ul><p>RoboCup合肥国际赛第一天的亲身经历让我们能近距离地且亲眼看到很多国内外顶尖参赛队伍的机器人以及相关调试过程，在开拓了视野的同时也让我们对RoboCup比赛有了进一步的认识。除此之外，给我留下印象最深的便是老外对于技术的那种严谨执着的态度。比如，在调试期间，你经常可以看到几个队员三五成群地在一起讨论解决问题的方法，并将每个解决方法记录下来并一一进行测试，而且甚至还有一些队伍在闭馆通知播报完之后依然不愿意离开。我们常常羡慕国外先进的机器人技术，但殊不知在排除资金投入等客观因素的影响之外，我们自己又做的如何呢？我们热爱机器人的人很多，但能以严谨认真的态度来将这份热爱付诸实现的人太少。未来如果我们能全身心地投入到机器人研究和开发工作中去，那总有一天我们能够到达成功的彼岸，我想这就是本次RoboCup国际赛在技术之外所教会给我的东西。</p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>由于我们晓萌队要准备接下来的BSR(Benchmark Service Robot)预赛，所以这一天我基本上都待在BSR比赛场地附近的调试区域。当然因为我们自己本身就是做RoboCup@Home项目的，所以每隔一段时间，我还是会来到旁边的RoboCup@Home场地，用自己的手机来记录现场所发生的一些事情。</p><h4 id="RoboCup-Home"><a href="#RoboCup-Home" class="headerlink" title="RoboCup@Home"></a>RoboCup@Home</h4><ul><li><p><strong>赛程</strong><br>RoboCup@Home裁判组终于公布了赛程安排。如下图所示，各队每天要进行的比赛项目多且时间安排紧凑，比如今天就要进行三个测试科目，时间从上午9点一直持续到晚上8点左右。虽然它们不属于正式比赛项目，不计得分和名次，但是却为之后的正赛提供了技术和安全方面的保障。</p><p><strong>Mapping Slots</strong><br>每个参赛队伍的机器人都可以使用自身携带的激光传感器来建立比赛场地的地图，这为之后机器人在比赛中的自主导航提供基本保障。</p><p><strong>Robot Inspection &amp; Introduction</strong><br>裁判组会对每个参赛的机器人进行详细的检查，以确保机器人的机械、电路等设计满足规则中的要求（比如急停开关的位置是否合适、机器人外部是否有裸露的电线等），防止因机器人在比赛中失控所导致危险情况的发生。</p><p><strong>Poster Session &amp; Reception</strong><br>该环节是RoboCup@Home项目的传统组成部分，它规定每个参赛队伍都必须事先准备好有关自己机器人的技术海报，并在现场向裁判和各队领队进行简要的讲解，其目的主要是为了加强各队之间的技术交流，以便促进RoboCup@Home项目的不断发展。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/schedule/schedule.jpg" alt="schedule"></p></li><li><p><strong>机器人</strong><br>从下图可以看到，每个队伍都在积极准备明天各自的比赛项目，其中有一部分队伍的队员正在用视觉传感器对物体进行训练，以便为之后的物体识别和抓取项目做好充足的准备。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_1.jpg" alt="robot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_2.jpg" alt="robot_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_3.jpg" alt="robot_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_4.jpg" alt="robot_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_5.jpg" alt="robot_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_6.jpg" alt="robot_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_7.jpg" alt="robot_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/robot/robot_8.jpg" alt="robot_8"></p></li><li><p><strong>技术海报</strong><br>以下海报是参赛队伍对各自机器人所用技术的概述。通过观察可以看到大部分队伍都将ROS(Robot Operating System)作为机器人的核心框架，并在其基础之上进行了更深入的研究工作。</p><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>因为当初我是竖着用手机对海报进行拍照的，所以照片显示在博客里也就横过来了。如果你用的是手机或平板电脑浏览本文章的话，请直接将屏幕顺时针旋转90度即可，但是如果你用的是电脑的话，那就只能请你向左歪脑袋或者直接下载照片进行查看了。</p></div><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_1.jpg" alt="poster_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_2.jpg" alt="poster_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_3.jpg" alt="poster_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_4.jpg" alt="poster_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_5.jpg" alt="poster_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_6.jpg" alt="poster_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_7.jpg" alt="poster_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_8.jpg" alt="poster_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_9.jpg" alt="poster_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_10.jpg" alt="poster_10"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_11.jpg" alt="poster_11"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_12.jpg" alt="poster_12"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_13.jpg" alt="poster_13"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_14.jpg" alt="poster_14"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_15.jpg" alt="poster_15"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/4_hefei/robocup@home/poster/poster_16.jpg" alt="poster_16"></p></li></ul><p>伴随着RoboCup合肥国际赛第二天的结束，所有参赛队伍的调试工作都接近了尾声。在这两天的现场调试过程当中，我们虽然遇到过一些问题（比如传感器安装位置的不合适所导致机器人避障不准、建立好的地图中存在杂点等），但是经过团队的一起努力，以上问题还是得到了比较好的解决。明天RoboCup合肥国际赛就要正式开幕了，希望所有参赛的队伍都能在正式比赛中竭尽全力，发挥出自己的应有水平，在争取名次的同时也能从互相的技术交流讨论之中受益匪浅！</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="开幕仪式"><a href="#开幕仪式" class="headerlink" title="开幕仪式"></a>开幕仪式</h4><p>在开幕式的整个过程中，除了RoboCup主席和相关领导的精彩发言之外，最吸引人的就是那个站在演讲台旁边的Alpha 2人形机器人（深圳<a href="https://www.ubtrobot.com/cn/">优必选</a>公司的产品），因其搭载了<a href="http://www.iflytek.com/">科大讯飞</a>最新的语音识别引擎，所以它能够实时且准确地进行同步翻译，这既方便了国内外与会者理解发言者的意图，也体现出科大讯飞在语音合成和识别领域的强大实力。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/ceremony/ceremony.jpg" alt="ceremony"></p><h4 id="比赛项目"><a href="#比赛项目" class="headerlink" title="比赛项目"></a>比赛项目</h4><ul><li><p><strong>RoboCup@Home</strong><br><strong>RoboZoo</strong><br>根据RoboCup@Home裁判委员会所制定的赛程安排，第一个要比的是RoboZoo项目，其规则比较简单，每支参赛队伍需要尽可能地表现自己机器人的能力，来吸引观众进行投票，成绩按照投票数进行排序，队伍的得票数越多，排名越靠前。通过实际观察，我发现该项目更看重各队的创意，而不是技术水平的高低。举个例子，比如像上交的服务机器人，它在现场表演了如何使用机械臂来对水杯进行抓取。尽管从技术层面上来讲上交的水平相当厉害，但是对于不懂技术的观众来说，机械臂不断重复执行抓取与放下的单调动作肯定比不上外表装饰得Kawaii，能与观众进行互动的机器人更讨人喜欢。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_1.jpg" alt="robocup@home_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_2.jpg" alt="robocup@home_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_3.jpg" alt="robocup@home_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_4.jpg" alt="robocup@home_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_5.jpg" alt="robocup@home_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_6.jpg" alt="robocup@home_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_7.jpg" alt="robocup@home_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_8.jpg" alt="robocup@home_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_9.jpg" alt="robocup@home_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_10.jpg" alt="robocup@home_10"></p><p><strong>Navigation</strong><br>以下是服务机器人在室内进行自主导航时的一些画面，因为自主导航是RoboCup@Home项目的基本能力，所以绝大部分参赛队伍都能够达到该项测试的基本要求，只是在如何让机器人避开突如其来的障碍物（突然被裁判扔到机器人行进路线上的杂志）这种技术细节方面上，强队与弱队之间的确存在一些差距。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_11.jpg" alt="robocup@home_11"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_12.jpg" alt="robocup@home_12"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_13.jpg" alt="robocup@home_13"></p><p><strong>Person Recognition</strong><br>以下是中科大的可佳机器人在进行人脸识别测试，从图中可以看到识别的精度还是相当不错的，基本上摄像头里出现的人物都被识别并用方框标了出来。说实话能够在现场环境如此恶劣的情况下，还能够较为精准地识别出多个目标人物，可见可佳的图像识别算法有多鲁棒。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_14.jpg" alt="robocup@home_14"></p><p><strong>Object Recognition &amp; Manipulation</strong><br>从以下的图片中可以看到，只有前四个参赛队伍的机器人能够成功地至少抓取一个物体，其它的机器人基本上在开始位置没有移动，我估计问题是出在了物体识别上。在四个已完成抓取任务的机器人中，中科大的可佳表现得最为出色，它在有限的比赛时间内总共连续成功地完成了两次自主抓取（本来是三次，很可惜可佳的机器爪在放置第三个物体的时候不小心把它碰到了地面上），毫无悬念地获得了该项测试的第一名。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_15.jpg" alt="robocup@home_15"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_16.jpg" alt="robocup@home_16"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_17.jpg" alt="robocup@home_17"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_18.jpg" alt="robocup@home_18"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_19.jpg" alt="robocup@home_19"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_20.jpg" alt="robocup@home_20"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_21.jpg" alt="robocup@home_21"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/robocup@home_22.jpg" alt="robocup@home_22"></p><p><strong>Paper</strong><br>以下是贴在比赛场地外围墙壁上的一些文件，主要是向各参赛队伍公示比赛场地中一些物品的摆放位置，机器人所要识别的物体种类和大小等参数信息，以及各队比赛的顺序安排，便于各队提前做好比赛准备。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/paper_1.jpg" alt="paper_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/paper_2.jpg" alt="paper_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/paper_3.jpg" alt="paper_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup@home/paper_4.jpg" alt="paper_4"></p></li><li><p><strong>RoboCup Secure</strong><br><strong>场地</strong><br>下图是RoboCup救援组的比赛场地，由于整个场地设计得非常复杂，所以在调试期间，赛事举办方曾邀请一些有经验的国外参赛队员与其一起进行搭建场地的工作。从图中可以看到，场地内部的不同障碍区域是根据颜色进行划分的，除此之外，配备有小型二氧化碳装置的几个仿真人偶也被裁判委员会分散布置到比赛场地的不同区域之中（有的被在墙壁之后的破洞里，有的被放到较高的平台上，还有的被放到图中的车辆中），为之后救援机器人寻找幸存者的比赛项目做好准备。最后，由于比赛中还有空中救援机器人的部分，所以场地四周全部拉上了白色的防撞网，防止四轴飞行器失控伤人。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_secure/robocup_secure_1.jpg" alt="robocup_secure_1"></p><p><strong>自主建图</strong><br>自主建图应该是RoboCup救援组的第一个比赛项目，大部分参赛队伍都选择下图中这样的小车来完成该项任务。原因也很明显，机器人需要在充满各种障碍物的狭小空间中自由移动，而且对于自主建图项目来说，机器人本身不需要承担搜索幸存者（用仿真人偶代替）的任务，即机器人不用携带机械臂等搜救设备，所以带有激光和视觉传感器的小型四驱车是最好的选择。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_secure/robocup_secure_2.jpg" alt="robocup_secure_2"></p><p>以下两个图片展示的是救援机器人的远程控制站，铝制箱中上面的两个电脑负责可视化机器人实时建图的整个过程，左下角的电脑负责对相关代码进行调试，而右下角的那台电脑则主要负责远程控制机器人的移动以及监视其自身的各种传感器的实时状态（不得不承认，老外真是有钱，连远程控制站也能做得如此专业，说实话这场面跟欧美大片里的某些桥段没什么两样）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_secure/robocup_secure_3.jpg" alt="robocup_secure_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_secure/robocup_secure_4.jpg" alt="robocup_secure_4"></p></li><li><p><strong>RoboCup Soccer</strong><br><strong>仿真组</strong><br>以下是RoboCup仿真2D和3D组的比赛画面，从图中可以看到仿真组的软件平台和裁判系统都是统一的，它们由RoboCup官方提供，而不同的地方在于各个参赛队伍需要根据比赛规则编写各自的程序算法来控制己方的机器人完成带球、传球、射门以及防守等操作。当然，除了基本的控制之外，整场比赛的策略也是非常重要的，因为足球毕竟不是单独个体的运动，它需要团队之间的协作配合。总之，个人感觉在多智能体协同算法方面，仿真组还是相当厉害的。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_soccer/robocup_soccer_1.jpg" alt="robocup_soccer_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_soccer/robocup_soccer_2.jpg" alt="robocup_soccer_2"></p><p><strong>实物组</strong><br>RoboCup足球实物组在仿真组软件算法的基础之上，加入了物理实体机器人之间的对抗，这使得足球比赛看起来更加真实，当然这也对各个队伍的技术水平提出了更高的要求（以下是小型组和标准组的比赛）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_soccer/robocup_soccer_3.jpg" alt="robocup_soccer_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_soccer/robocup_soccer_4.jpg" alt="robocup_soccer_4"></p></li><li><p><strong>RoboCup Logistics</strong><br><strong>概述</strong><br>RoboCup物流组是国际机器人竞赛RoboCup的一个组成部分，它专注于工厂物流应用。RoboCup物流组的目标是通过使用自主机器人来解决工业生产过程中物质和信息的灵活交换问题，并提供标准、成熟的软硬件平台来促进物流方面的科学研究力度。</p><p><strong>规则</strong><br>机器人需要先从存储箱中获取原材料，接着以动态的顺序在机器之间进行运输，然后在这些机器中处理生产，最后将它们运送到目标位置。一个参赛队伍由三台机器人组成，每个机器人都基于标准化的<a href="http://www.festo-didactic.com/de-de/service/robotino">Festo Robotino</a>开发平台，并且在其基础之上可以扩展一些传感器和计算设备。</p><p><strong>改革</strong><br>RoboCup物流组从2015合肥国际赛开始进行改革，引入了全新的挑战——机器人不再像前几届那样需要在地板上移动冰球，而是根据<a href="http://www.festo.com/">Festo</a>提供的模块化生产系统（MPS）来操作工作站。如下图所示，MPS是用于处理圆筒的小型生产机器，而圆筒代表工件，它由彩色的底座，零个或最多三个彩色的圆环组成。在实际的比赛中，产品顺序是随机确定并且动态发布的，因此由机器人车队所驱动的生产过程中的规划和调度是关键因素，同时各个参赛队伍也会面临一些典型的技术难题，比如具有碰撞检测的导航、自我定位、物体检测以及（受限的）操作等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_logistics/robocup_logistics_1.jpg" alt="robocup_logistics_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_logistics/robocup_logistics_2.jpg" alt="robocup_logistics_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_logistics/robocup_logistics_3.jpg" alt="robocup_logistics_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/robocup_logistics/robocup_logistics_4.jpg" alt="robocup_logistics_4"></p></li><li><p><strong>BSR</strong><br>随着RoboCup的正式开幕，我们的BSR项目也开始了第一天的比赛。如下图所示，比赛科目主要是测试在无载荷和有载荷这两种情况下，机器人走直线和旋转的误差，误差越小，负重载荷越大，分数越高。虽然我们的底盘看起来比较Low（由于经费紧张，我们直接拆掉晓萌机器人的底盘拿来用的），不过预赛的成绩我记得好像还不错，也算是有了一些心理安慰吧。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_1.jpg" alt="bsr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_2.jpg" alt="bsr_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_3.jpg" alt="bsr_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_4.jpg" alt="bsr_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_5.jpg" alt="bsr_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_6.jpg" alt="bsr_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_7.jpg" alt="bsr_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/5_hefei/bsr/bsr_8.jpg" alt="bsr_8"></p></li></ul><p>RoboCup合肥国际赛正式开幕了，每个项目组的比赛都进行得非常激烈，而我们自己作为参赛的队伍之一，也算是真正意义上体会到了赛前准备以及等待结果的那种紧张之情。总之，比赛虽然会有胜负之分，但是我们从失利和其它队伍中所学到的宝贵知识和经验则显得更为重要，希望每个参赛队伍都能在接下来的赛程当中有所收获，并享受其中！</p><h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><h4 id="Workshop"><a href="#Workshop" class="headerlink" title="Workshop"></a>Workshop</h4><p>作为BSR项目的参赛队伍，我们有幸参加了在会议室举办的专题研讨会。从下面的会议日程上可以看到很多在国内外从事机器人研究的专家、学者会来到研讨会现场，与大家一起分享他们的最新成果，当然，我们在Team Spotlight环节也会登上演讲台去介绍我们自己现有所使用的一些成熟技术（演讲内容要全英文）。总之，我们在研讨会中收获很多。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop.jpg" alt="workshop"></p><ul><li><p><strong>Team Xmbot</strong><br>以下是我们晓萌队的技术展示部分，演讲者是我们的前任队长狗哥，即<strong>西工大一小学生</strong>（佩服狗哥登台演讲的勇气和英语口语能力！）。PPT中首先介绍了项目发展情况和团队人员组成，接着按照从底到高的架构顺序，依次介绍了晓萌机器人的硬件和所使用的传感器、嵌入式控制系统以及基于ROS的导航软件框架等。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_xmbot_1.jpg" alt="workshop_xmbot_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_xmbot_2.jpg" alt="workshop_xmbot_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_xmbot_3.jpg" alt="workshop_xmbot_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_xmbot_4.jpg" alt="workshop_xmbot_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_xmbot_5.jpg" alt="workshop_xmbot_5"></p></li><li><p><strong>Team Kejia</strong></p><p>以下是可佳低成本移动平台团队的演讲内容，其中主要涉及了硬件设计、软件架构以及建图、定位和导航所使用的算法介绍。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_1.jpg" alt="workshop_kejia_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_2.jpg" alt="workshop_kejia_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_3.jpg" alt="workshop_kejia_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_4.jpg" alt="workshop_kejia_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_5.jpg" alt="workshop_kejia_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/workshop/workshop_kejia_6.jpg" alt="workshop_kejia_6"></p></li></ul><h4 id="RoboCup-Home-1"><a href="#RoboCup-Home-1" class="headerlink" title="RoboCup@Home"></a>RoboCup@Home</h4><p>RoboCup@Home项目组进行到第二天的争夺，尽管赛事紧凑、挑战性高、各支参赛队伍的水平有高有低，但就像下图所展示的那样，这些因素都妨碍不了RoboCup@Home这个大家庭各成员之间建立起牢固的友谊。在赛场上我们要为捍卫自己队伍的荣誉而战，而在场下我们则是愿意互相分享开发经验、共同为梦想而努力的好朋友，我想这就是RoboCup@Home以及RoboCup本身在赛事之外所教会给我的东西。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/robocup@home/robocup@home.jpg" alt="robocup@home"></p><h4 id="BSR"><a href="#BSR" class="headerlink" title="BSR"></a>BSR</h4><p>BSR项目预赛的第一阶段（测试机器人移动的精准程度）已经比完，接下的第二阶段比赛也会在明天拉开战幕。明天的比赛主要考查机器人的自主导航能力，即让机器人自主地从比赛场地的起始位置移动到目标位置，而且在移动的途中机器人不能碰到围墙和障碍物。为了完成比赛任务，如下图所示，我们使用了Robopeak RPLIDAR激光传感器和Kinect深度摄像机，并基于ROS平台进行二次开发。最后总体测试效果还不错，只是需要对算法中的某些参数进行进一步的调整。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_1.jpg" alt="bsr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_2.jpg" alt="bsr_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_3.jpg" alt="bsr_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_4.jpg" alt="bsr_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_5.jpg" alt="bsr_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_6.jpg" alt="bsr_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_7.jpg" alt="bsr_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_8.jpg" alt="bsr_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_9.jpg" alt="bsr_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/6_hefei/bsr/bsr_10.jpg" alt="bsr_10"></p><p>RoboCup第二个正式比赛日结束。在一天的时间中，我们既听了来自卡内基梅隆大学、东京大学、上海交通大学、中国科学技术大学等国内外顶尖研究机构专家学者的报告会，也观看了几场精彩机器人比赛。总之，这一天过得很充实，收获也很多，希望接下来我们团队可以在最后的比赛中取得好成绩！</p><h3 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h3><h4 id="BSR-1"><a href="#BSR-1" class="headerlink" title="BSR"></a>BSR</h4><p>BSR项目预赛进行到了第二阶段的争夺当中，我们团队的每个人也是竭尽所能来帮助晓萌机器人走得更远，还好功夫不负有心人，我们最后以预赛第四名的成绩进入到之后BSR项目的决赛阶段（第一名是中科大的可佳低成本移动平台，第二名是上交大的蛟龙机器人，第三名是来自洛阳理工的低成本机器人），算是惊险晋级。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_1.jpg" alt="bsr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_2.jpg" alt="bsr_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_3.jpg" alt="bsr_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_4.jpg" alt="bsr_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_5.jpg" alt="bsr_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_6.jpg" alt="bsr_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_7.jpg" alt="bsr_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_8.jpg" alt="bsr_8"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_9.jpg" alt="bsr_9"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/7_hefei/bsr/bsr_10.jpg" alt="bsr_10"></p><p>RoboCup合肥国际赛也即将进行到尾声阶段，而我们晓萌队也顺利地进入到明天的BSR决赛当中，不管<br>明天会遇到什么样的困难，我们都已经做好了充分的准备，力争取得优异的成绩！</p><h3 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h3><h4 id="BSR-2"><a href="#BSR-2" class="headerlink" title="BSR"></a>BSR</h4><p>BSR项目的决赛日终于到来，而我们晓萌队也是非常早地进入到了国际会展中心来进行赛前调试。关于决赛，每个参赛队伍共有两次机会，我们在第一轮的比赛过程中表现出色，如下图所示，晓萌机器人有惊无险地避开了放置在道路中间的垃圾桶，并成功地到达了几个由裁判所随机指定的位置点，而第二轮比赛我们的机器人出现了一些问题，基本上只能在原地或附近地方打转，没能继续完成比赛。总的来说，我们的决赛成绩还是相当不错的，但是很可惜，由于最终的成绩是由预赛和决赛两个阶段共同决定，即预赛成绩带入到决赛当中，所以受到预赛得分的影响，我们最后排名第四，没能实现奖项上的突破，不过我们还是对自己的付出和努力十分满意。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_1.jpg" alt="bsr_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_2.jpg" alt="bsr_2"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_3.jpg" alt="bsr_3"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_4.jpg" alt="bsr_4"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_5.jpg" alt="bsr_5"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_6.jpg" alt="bsr_6"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_7.jpg" alt="bsr_7"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/bsr/bsr_8.jpg" alt="bsr_8"></p><p>我们的比赛结束了，也是时候该与RoboCup合肥国际赛说再见了。在临走之前，我们晓萌团队在一起进行了合影留念，希望我们有朝一日可以真正地站在RoboCup国际赛的舞台上，并继续在追逐梦想的道路上不断前进！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/group_photo/group_photo_1.jpg" alt="group_photo_1"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/group_photo/group_photo_2.jpg" alt="group_photo_2"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在为期七天的RoboCup合肥国际赛当中，我们从其他国内外参赛队伍那里学习到了很多宝贵的经验，其中涉及机器人机械结构、软件架构设计以及团队管理方面的内容，除此之外更重要的是经过前期不懈的努力，我们取得了BSR项目第四的好成绩（虽然只有中国高校参加），当然通过比赛我们也认识到了自己和强队之间的实力差距，我们会在接下来的比赛准备期内对晓萌机器人的软硬件进行优化，提高系统整体的鲁棒性。</p><p>最后，我还是要非常感谢中科大能够给予我们这次机会，让我们在2015年7月的这个夏天能够亲身领略到世界级机器人大赛的魅力，并从中感受到无比的幸福与快乐！再见RoboCup，再见合肥，希望我们下次参赛的时候可以变得比现在更加强大！</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/8_hefei/group_photo/group_photo_3.jpg" alt="group_photo_3"></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> RoboCup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x01）：2015 服务机器人国赛</title>
      <link href="/zh-cn/2017/07/11/tech_note_1_2015_service_robot_china_cup/"/>
      <url>/zh-cn/2017/07/11/tech_note_1_2015_service_robot_china_cup/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在经过短时间的调试之后，我们新一届晓萌机器人团队终于迎来了检验自己成果的时候。因为晓萌机器人的新机械臂是在比赛出发之前才安装到位，所以本次五月份的比赛我们并没有使用。除此之外，学长在出发之前告诉我们：要放下包袱，尽力去完成比赛，注重与其他队伍的交流，把这次比赛作为自己开阔视野的好机会。赛后确实就像学长所说的那样，我们从本次比赛中学到了很多东西，这对于晓萌团队未来的发展起到了非常积极的作用。</p><p>本次中国服务机器人大赛在河南洛阳举办，基本上国内研究服务机器人的高校都悉数到场，比如北理、北信科、二炮、上应技、上大、西北师范等，其中比赛项目主要有RoboCup@Home、Follow、GPSR、WhoIsWho、Shopping等。</p><span id="more"></span><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>由于之前本人电脑中存储的照片全部丢失，因此该博客中所显示的照片数量比较有限，希望读者可以理解。</p></div><h3 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h3><ul><li><h4 id="锅贴"><a href="#锅贴" class="headerlink" title="锅贴"></a>锅贴</h4><p>经过五个多小时的路程，我们终于来到了牡丹之城——洛阳。在处理完宾馆的入住手续之后，我们就跟随着志愿者来到了当地非常有名的<strong>小街锅贴</strong>店进行用餐。话说这家店做的锅贴味道还真不错，虽然我在北京吃过几次<strong>褡裢火烧</strong>，但都不如这家店做得外皮香脆、肉馅多汁（直到后来才知道<strong>小街锅贴</strong>是河南的老字号和非物质文化遗产，怪不得做的那么好吃）。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/food/fired_dumpling.jpg" alt="fired_dumpling"></p><p>在饱餐一顿之后，我们回到宾馆开始了对机器人底盘的调试工作。尽管后来熬夜到了很晚，但是一想到明天就可以在比赛会场看到其他参赛队伍的服务机器人，所有的劳累就都被抛到了脑后。</p></li><li><h4 id="牛肉汤"><a href="#牛肉汤" class="headerlink" title="牛肉汤"></a>牛肉汤</h4><p>第二天一早，根据志愿者的热心介绍，我们来到了学校附近的<strong>龙鳞路第一家牛肉汤</strong>店铺喝汤。在洛阳，喝汤是人们挥之不去的习惯，所以我们也入乡随俗，跟随着志愿者一起买饼，然后边喝牛肉汤边吃自己手撕的饼丝，味道确实相当不错。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/food/beef_broth.jpg" alt="beef_broth"></p></li></ul><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/registration/registration.jpg" alt="registration"></p><p>在完成比赛的注册之后，我们终于来到了比赛场馆——河南科技大学西苑校区体育馆。在这里，我们遇到了几个国内技术水平较高的参赛队伍，接下来对他们进行简单的介绍。</p><h3 id="队伍"><a href="#队伍" class="headerlink" title="队伍"></a>队伍</h3><ul><li><h4 id="晓萌队"><a href="#晓萌队" class="headerlink" title="晓萌队"></a>晓萌队</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_xm.jpg" alt="team_xm"></p><p><strong>简介：</strong>晓萌队来自西北工业大学舞蹈机器人基地，由学长们于2010年所创建。经过五年时间的发展，我们的晓萌机器人已经发展到了第三代半（因为相比于第三代，只在原有的基础上添加了新机械臂，所以按照汪学长的意思，目前的晓萌机器人只能算是第三代半，而不是第四代），其中涉及的很多开发技术技术都已逐渐走向成熟。接下来我按照机械、电子和软件这三个层面来对当前晓萌机器人进行简要的介绍。</p><p><strong>机械：</strong>从图中可以看到，晓萌机器人的前面安装有一个新机械臂。它的机械结构主要由同步轮和同步带这两部分组成。只要发送命令让电机发生转动，在同步轮和同步带的联合作用下，相应的机械臂关节便会发生转动。当然，电机和关节旋转角度之间互相转换的数学关系是非常重要的，特别是对于像我们这样的机械臂，大臂、小臂和手腕关节彼此连接的连杆并不是刚体，所以在对关节数据进行转换的时候，需要通过计算对关节运动进行补偿。</p><p>晓萌机器人的底盘部分还是沿用之前的结构——由三个麦克纳姆轮所构成的全向移动平台。虽然整个底盘的移动精度还可以，不过由于新机械臂的升降部分相当重，使得其对底盘部分的压力比较大，所以在赛前调试中底盘移动会出现比较明显的偏差（不过好在可以通过算法来进行一定程度的补偿）。</p><p><strong>电子：</strong>电子部分基本上还是沿用了上一代学长所留下的成果。从图中可以看到，因为我们这次比赛之前的准备比较仓促，所以还是有很多电线暴露在外面，电机驱动盒和控制板也没有被固定在隔板上。不过，电子部分的运行效果还是相当鲁棒的，至少不像软件那样说跪就跪。</p><p><strong>软件：</strong>我们本次参赛的晓萌机器人软件部分也依旧继承了之前的架构。在Windows上，我们主要使用微软自带的Speech库来做语音合成和识别；在Ubuntu上，我们则使用ROS来做各模块的开发和集成工作，其中涉及有基于人脸检测的图像模块、基于运动规划和自主控制的底盘模块、以及基于机器人行为的策略模块等。</p></li><li><h4 id="东风队"><a href="#东风队" class="headerlink" title="东风队"></a>东风队</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_dongfeng.jpg" alt="team_dongfeng"></p><p><strong>简介：</strong>东风队来自第二炮兵工程大学（现火箭军工程大学）。</p></li><li><h4 id="侏罗纪队"><a href="#侏罗纪队" class="headerlink" title="侏罗纪队"></a><span id="jump">侏罗纪队</span></h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_zhuluoji.jpg" alt="team_zhuluoji"></p><p><strong>简介：</strong>侏罗纪队来自西北师范大学。</p></li><li><h4 id="Sun-Home"><a href="#Sun-Home" class="headerlink" title="Sun@Home"></a>Sun@Home</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_sun@home.jpg" alt="team_sun@home"></p><p><strong>简介：</strong>Sun@Home队来自于北京信息科技大学。</p></li><li><h4 id="BIT-Home"><a href="#BIT-Home" class="headerlink" title="BIT@Home"></a>BIT@Home</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_bit@home.jpg" alt="team_bit@home"></p><p><strong>简介：</strong>BIT@Home队来自北京理工大学。</p></li><li><h4 id="自强队"><a href="#自强队" class="headerlink" title="自强队"></a>自强队</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_ziqiang.jpg" alt="team_ziqiang"></p><p><strong>简介：</strong>自强队来自上海大学。</p></li><li><h4 id="创之风队"><a href="#创之风队" class="headerlink" title="创之风队"></a>创之风队</h4><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/robocup_competitions/1_luoyang/team/team_chuangzhifeng.jpg" alt="team_chuangzhifeng"></p><p><strong>简介：</strong>创之风队来自上海应用技术学院。</p></li></ul><h3 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h3><ul><li><h4 id="Follow"><a href="#Follow" class="headerlink" title="Follow"></a>Follow</h4><p><strong>简介：</strong>Follow项目测试机器人在陌生环境中多模式交互和安全导航。比赛在外部环境中进行，当比赛开始时，引导者走向机器人并向它发送跟随指令，机器人需要宣布校准完成并开始跟随引导着从起点走向终点。机器人在跟随的途中要经过四个预先指定的路径点。</p><ul><li><p><strong>路径点1（绕过干扰）：</strong>引导者发指令让机器人停止前进，当随机指定的陌生人从机器人和引导者之间缓缓穿过后，机器人能继续跟随引导着前进。</p></li><li><p><strong>路径点2（进入狭小空间）：</strong>引导者和机器人一起进入一个狭小的空间，由于没有足够的运动空间，所以机器人和引导者需要与进入的顺序相反的方式离开该空间。</p></li><li><p><strong>路径点3（绕过障碍物）：</strong>引导者走到障碍物跟前，并绕过障碍物后继续前进，要求机器人也要绕过障碍物继续跟随。</p></li><li><p><strong>路径点4（终点线）：</strong>机器人必须完全超过终点线。</p></li></ul><p><strong>总结：</strong>该项测试各个队伍完成的都不是非常好，我记得只有西北师范的机器人能勉强的到达终点线，其他的（当然也包括我们晓萌队）都在半途中出现了各种问题，其中大部分是由于图像识别错误导致机器人不移动或跟丢引导者。这个项目主要考察了机器人的图像识别（具体来说是人脸识别）和自主移动避障能力，测试的难点主要是在规则中的第二个路径点，即机器人和引导者需要共同进入狭小空间。因为机器人需要顺时针旋转90度才能进入，在这个过程中人就很容易被跟丢，而且最重要的是机器人进入的空间（<a href="#jump">以上侏罗纪队比赛图中的白色U型空间</a>）宽度比较小，这对机器人的自主移动避障能力是一个巨大的考验。</p></li><li><h4 id="GPSR"><a href="#GPSR" class="headerlink" title="GPSR"></a>GPSR</h4><p><strong>简介：</strong>GPSR(General Purpose Service Robot)，即服务机器人通用测试。该项目测试机器人的综合能力，包括跟随、定位、导航、抓取、人物检测和识别、物体检测和识别、自然语言理解和对话等。在这个测试中，没有预先定义的场景和可以由确定的基本动作序列完成的任务。</p><ul><li><p><strong>重点考察能力：</strong></p><ul><li><p>没有特定顺序的动作集，因此不能由预先定义好的状态机编程来实现。</p></li><li><p>增强的语音识别、处理能力。由于任务是不确定的，因此语音也是不确定的，命令不再是单纯的动作或物体，可能包含多个物体和动作，例如：“将杯子放在厨房的桌子上（put the mug on the kitchen table）”。</p></li></ul></li><li><p><strong>比赛要求：</strong></p><ul><li><p>所有机器人的能力形成行动集合A（例如寻找特定人、跟随、抓取和运动物体等），这项能力对所有的机器人都是必须要有的，不随着各自机器人能够实现的能力而变化。例如如果机器人只能完成自主行走，而不能进行寻找人、抓取等，则其行动集不会减少。</p></li><li><p>物体集合B，该集合由比赛过程中各个队伍选择的10个物体构成，在整个比赛中统一使用。</p></li><li><p>位置集合L，该集合由比赛前确定，如果涉及到抓取任务，则抓取的位置可以由机器人的可达高度来进行一定的取舍。</p></li></ul></li><li><p><strong>自主进场：</strong>机器人需要自主到达场内的指定位置。到达指定地点之后，机器人被给予一个英文句子或一个中文句子，该句子包含三个任务。每个任务包含一个动作a∈A和相应的依赖动作的物体b∈B或位置l∈L。动作集合和物体以及位置不同，动作集合不是事先给定的，而需要队伍自己去考虑或实现（包括对应动作的同义词）。即对于一个动作，在任务描述中可能有许多不同的说法，例如对于导航类的任务，等价的说法包括go to, move to, drive to或navigate to等。</p></li><li><p><strong>获取任务：</strong>任务由标准的软件生成器生成，并且需要由裁判将任务要求一字不漏的传达给机器人。</p></li><li><p><strong>过程：</strong>如果重负下达任务3次之后，机器人依然没有正确的理解，可以允许重启，重启之后会生成一个新的任务交给机器人去完成。机器人识别整个句子之后，应该完整的将其复述出来才能被认为是理解了命令。</p></li><li><p><strong>任务示例：</strong>“Move to the living room, get the cup and put it on the kitchen table.”，所有的动作都和位置或物体相联系。</p></li></ul><p><strong>总结：</strong>我记得这个测试由于难度太大（当然，这里得排除中科大WrightEagle队的可佳），技术委员会在征求各队意见并开会讨论之后，最后将规则进行了简化，只保留了命令理解和简单任务执行部分，不过依然没有一个机器人能够正确地执行完一个完整任务的。从该项测试中不难看出，目前国内高校在服务机器人综合能力的研究方面还存在很多的不足之处。</p><p>我个人认为GPSR不仅是整个服务机器人比赛中最具挑战性的项目，它更代表了服务机器人技术领域里的终极目标——能够像人一样理解命令并正确地执行任务。虽然现在让机器人连续完成语义理解、自主移动、识别物体、抓取物体等一系列动作很难，但只要每个模块（如底盘、图像等）都能被封装得足够鲁棒，假以时日，上述的问题都将会得到解决。</p></li><li><h4 id="WhoIsWho"><a href="#WhoIsWho" class="headerlink" title="WhoIsWho"></a>WhoIsWho</h4><p><strong>简介：</strong>机器人需要在陌生环境中自主地识别人。该项测试主要考察机器人的语音识别、人脸检测、人脸识别、自主导航、人机互动等功能。</p><ul><li><p><strong>场地准备：</strong>五个客人先进入场地，等比赛开始之后，机器人才能进入房间。</p></li><li><p><strong>介绍自己：</strong>机器人识别客人，并依次走向每个客人，在此过程中，客人需要面向机器人介绍自己，并向机器人提出自己希望其帮自己拿的物品。在学习阶段，客人绝对不能触碰机器人。在客人告诉机器人自己的名字和所需物品之后，机器人必须说出它所理解到的名字和物品。</p></li><li><p><strong>获取物品：</strong>机器人导航到指定位置获得客人所需物品，机器人得到所需的一个或几个物品后回到客人所在房间。</p></li><li><p><strong>识别人：</strong>机器人回到房间后找到相应的客人，给予他所需的物品，并询问是否满足要求。</p></li><li><p><strong>离开场地：</strong>当机器人已经为所有客人拿好物品后，或者决定停止寻找时，它需从另一扇门离开。</p></li></ul><p><strong>总结：</strong>WhoIsWho测试的结果跟上面的GPSR差不多，基本所有队伍在<strong>介绍自己</strong>阶段就跪了，究其原因主要是自主机器人所需的技术比较复杂，而且由于比赛现场环境比较嘈杂和混乱，导致了某些算法在识别精度上大打折扣，从而影响了机器人系统的整体发挥。</p></li><li><h4 id="Shopping"><a href="#Shopping" class="headerlink" title="Shopping"></a>Shopping</h4><p><strong>简介：</strong>该项测试关注机器人在真实环境中的移动操作。由于环境初始是未知的，所以该测试不仅考察机器人的自主抓取，还需要机器人拥有SLAM的能力。</p><ul><li><p><strong>引导阶段：</strong>比赛起点为一些固定的地点，引导者向机器人介绍四个地点。在每个地点，引导者需要引导机器人移动到一个特定的货架，并告诉它需要获取货架上的那一个物品。该物品取自机器人可操作的物品栏。在每个货架上只放有物品清单上的一种类型的物品，而且必须至少有一个物品是放在机器人能够操纵的地方。引导者需要使用某种姿势来指向可操作的物品，等所有四个地点都到达后，引导者引导机器人到预先指定的收银台。</p></li><li><p><strong>操作和导航阶段：</strong>在收银台，引导者命令机器人去货架拿取物品。机器人需要从相应的货架处取回四个物品中的三个，并且将它交给在收银台等候的引导者。三个物品都被取回后，机器人被命令回到开始位置。</p></li></ul><p><strong>总结：</strong>对于各个参赛队伍来说，Shopping测试依然很难完成。主要问题在于目前配备有机械臂的机器人很少，只有三个（包括我们那个还无法使用的机械臂），而且机械臂的控制均未达到理想中的水平。不过随着技术的不断成熟和需求的不断增长，机械臂肯定会得到应有的重视。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然这次比赛我们在服务机器人的几个主要项目中都没能发挥出应有的水平，但是失败也让我们懂得了只有辛勤的付出才会有好的结果。我不得不承认我们团队在赛前的准备阶段做得并不是很好，由于受考试等压力的影响，我们每周用于在基地调试机器人的时间不是很多，而且由于在团队管理上缺乏经验，我们在赛前不仅损失了重要模块的负责人，而且在调试的过程中每个成员之间缺少沟通交流，这直接导致了后期晓萌机器人在运行时出现一些比较严重的问题。当然，经历过本次比赛，我们在吸取教训的同时也算是真正地明白了自己与其他强队之间的差距，我相信我们在之后的开发过程中一定能够解决之前出现过的问题，并且绝对不辜负队友和学长的信任，尽全力做出属于我们这一届晓萌团队的成果！</p><p>尽管比赛结果我们不是非常满意，但是此行还是有着令人难以置信的好消息：那就是我们非常幸运地被时任RoboCup中国委员会主任、中国科学技术大学的陈小平教授邀请参加在合肥举办的RoboCup国际赛，比赛项目为赛会新创立的BSR(Benchmark Service Robot)，即服务机器人基准测试。届时我们会和来自其他中国高校的服务机器人团队进行比赛，并角逐出最终的名次。当然，对于我们来说，除了参加比赛之外，还能够免费亲眼目睹国内外顶尖高校的机器人以及世界最高水平的机器人比赛，这实在是我们团队的荣幸，我们一定会尽全力在国际赛上用优异的表现来证明自己的实力！</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> RoboCup </tag>
            
            <tag> RoboCup@Home </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术杂记系列（0x00）：总纲</title>
      <link href="/zh-cn/2017/07/01/tech_note_0_superclass/"/>
      <url>/zh-cn/2017/07/01/tech_note_0_superclass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得自己大二刚来基地的时候，狗哥（<strong>西工大一小学生</strong>）就曾告诉我们这一届新队员：</p><blockquote><p>我们参加机器人比赛重要的是经历和交流，而不是结果。最后获得的奖只能代表你参加过此次比赛，它无法全部证明你的能力。</p></blockquote><p>当时听完学长的话，我心里面也是非常认同的，直到后来我参加过三次机器人比赛之后，我才算是真正地体会到学长这番话的含义：对于需要好成绩才能从学校那里拿到足够资金的基地来说，结果是重要的。但对于个人来说，我们从比赛中所获得经验教训以及与其他的队伍进行的技术交流才是最重要的，而不是所谓的加分。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们团队参加的比赛类别为RoboCup@Home，即RoboCup服务机器人项目组。关于具体什么是<a href="http://www.robocup.org">RoboCup</a>和<a href="http://www.robocupathome.org">RoboCup@Home</a>，接下来我会对它们进行详细的介绍。</p><h3 id="RoboCup"><a href="#RoboCup" class="headerlink" title="RoboCup"></a>RoboCup</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/features/robocup.png" alt="robocup"></p><ul><li><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>RoboCup is an international scientific initiative with the goal to advance the state of the art of intelligent robots. When established in 1997, the original mission was to field a team of robots capable of winning against the human soccer World Cup champions by 2050.</p><p>RoboCup是一项旨在推进智能机器人技术水平的国际科学计划。在1997年成立的时候，其最初的任务是要在2050年之前组建一支能够赢得人类足球世界杯冠军的机器人队。</p></li><li><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>It is our intention to use RoboCup as a vehicle to promote robotics and AI research, by offering a publicly appealing, but formidable challenge. One of the effective ways to promote science and engineering research is to set a challenging long term goal. When the accomplishment of such a goal has significant social impact, it is called a grand challenge project. Building a robot that plays soccer will not by itself generate significant social and economic impact, but the accomplishment will certainly be considered a major achievement for the field. We call this kind of project a landmark project. RoboCup is a landmark project as well as a standard problem.</p><p>我们打算通过提供一个公开吸引人但艰巨的挑战，来把RoboCup作为推动机器人和AI研究的工具。促进科学和工程研究的有效途径之一是制定具有挑战性的长期目标。当这样一个目标的实现具有重大的社会影响时，它就被称为是一个伟大的挑战项目。建立踢足球的机器人本身不会产生重大的社会和经济影响，但成果肯定会被认为是该领域的重大成就。我们称这种项目是一个里程碑式的项目。RoboCup既是一个里程碑式的项目，也是一个标准的问题。</p></li><li><h4 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h4><p>We proposed that the ultimate goal of the RoboCup Initiative to be stated as follows:</p><blockquote><p>By the middle of the 21st century, a team of fully autonomous humanoid robot soccer players shall win a soccer game, complying with the official rules of FIFA, against the winner of the most recent World Cup.</p></blockquote><p>We propose that this goal will be one of the grand challenges shared by the robotics and AI communities for the next 50 years. This goal may sound overly ambitious given the state of the art of technology today.</p><p>Nevertheless, we believe it is important that such a long-range goal should be set and pursued. It took only 50 years from the Wright Brothers’ first aircraft to the Apollo mission, to send a man to the moon and safely return him to the earth. It also took only 50 years, from the invention of the digital computer to Deep Blue, which beat the human world champion in chess. Building a humanoid soccer player requires an equally long period and extensive efforts of a broad range of researchers, and the goal will not be met in the near future.</p><p>我们提出，RoboCup计划的终极目标如下：</p><blockquote><p>到二十一世纪中叶，一个完全自主的类人机器人足球运动员队伍在遵守国际足联的官方规则下与人类世界杯冠军队伍进行对抗，并取得最终的胜利。</p></blockquote><p>我们提议这个目标将是未来五十年机器人和AI社区所共同面临的巨大挑战之一。鉴于当今的技术水平，这个目标可能听起来过于雄心勃勃。</p><p>不过，我们相信如此长远的目标得到确定和追求是很重要的。从莱特兄弟的第一架飞机到派人登上月球上并将其安全送回地球的阿波罗任务仅花了五十年。从数字计算机的发明到在国际象棋比赛中击败人类世界冠军的深蓝也仅花了五十年的时间。构建类人足球运动员需要相当长的时间以及大量研究人员的广泛努力，所以短期内这一目标不会实现。</p></li><li><h4 id="里程碑"><a href="#里程碑" class="headerlink" title="里程碑"></a>里程碑</h4><p>In the case of RoboCup, the ultimate goal is to “develop a robot soccer team which beats the human world champion team.” (A more modest goal is “to develop a robot soccer team which plays like human players.”)</p><p>Needless to say, the accomplishment of the ultimate goal will take decades of effort. It is not feasible, with current technologies to accomplish this goal in the near future. However, this goal can easily lead to a series of well-directed subgoals. Such an approach is common in any ambitious, or overly ambitious project. In the case of the American space program, the Mercury project and the Gemini project, which manned an orbital mission, were two precursors to the Apollo mission. The first subgoal to be accomplished in RoboCup is “to build real and software robot soccer teams which play reasonably well with modified rules.” Even to accomplish this goal will undoubtedly generate technologies, which will impact a broad range of industries.</p><p>对于RoboCup来说，其终极目标是“开发一个击败人类世界冠军队伍的机器人足球队”（一个更为谦虚的目标是“开发一个表现与人类运动员类似的机器人足球队”）。</p><p>毫无疑问，完成这个终极目标需要几十年的努力，短期内使用当前技术实现该目标是不可行的。然而，该目标很容易催生一系列具有针对性的子目标，这种方法在任何有雄心或过于雄心勃勃的项目中都是常见的。在美国太空计划中，水星项目和配备轨道任务的双子星座项目是阿波罗任务的两个前身。在RoboCup中，第一个将要完成的子目标是“建立真实和基于软件的机器人足球队，它们能根据修改过的规则在比赛中表现得很合理”。即使实现这一目标，毫无疑问也会产生影响广泛行业的新技术。</p></li><li><h4 id="标准问题"><a href="#标准问题" class="headerlink" title="标准问题"></a>标准问题</h4><p>One other aspect of RoboCup is a view that RoboCup is a standard problem so that various theories, algorithms, and architectures can be evaluated. Computer chess is a typical example of such a standard problem. Various search algorithms were evaluated and developed using this domain. With the accomplishment by Deep Blue team, which beat Garry Kasparov, a human grand master, using the official rules, the computer chess challenge came close to its aim. One of the major reasons for the success of computer chess as a standard problem is that the evaluation of progress was clearly defined. The progress of the research can be evaluated as the strength of the system, which was indicated by its rating. However, as computer chess approached its goal, we needed a new challenge. The challenge needed to foster a set of technologies for the next generation of industries. We think that RoboCup will fulfill such a demand.</p><p>RoboCup的另一面可以被看做是一个标准问题，它可以评估各种理论、算法和架构。计算机象棋是这样一个标准问题的典型案例，各种搜索算法都可以使用该模式进行了评估和开发。随着深蓝团队使用官方规则打败人类象棋大师加里·卡斯帕罗夫的成就，计算机象棋挑战接近了它的目标。计算机象棋作为标准问题成功的主要原因之一是对其进度的评估是确定的。研究进展可以通过评估来表现系统的能力。然而，随着计算机象棋接近其目标，我们需要一个新的挑战，它需要为下一代产业培育出一系列新技术，我们认为RoboCup将会满足这样的需求。</p></li></ul><h3 id="RoboCup-Home"><a href="#RoboCup-Home" class="headerlink" title="RoboCup@Home"></a>RoboCup@Home</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/features/robocup@home.jpg" alt="robocup@home"></p><ul><li><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>The RoboCup@Home league aims to develop service and assistive robot technology with high relevance for future personal domestic applications. It is the largest international annual competition for autonomous service robots and is part of the RoboCup initiative. A set of benchmark tests is used to evaluate the robots’ abilities and performance in a realistic non-standardized home environment setting. Focus lies on the following domains but is not limited to: Human-Robot-Interaction and Cooperation, Navigation and Mapping in dynamic environments, Computer Vision and Object Recognition under natural light conditions, Object Manipulation, Adaptive Behaviors, Behavior Integration, Ambient Intelligence, Standardization and System Integration. It is colocated with the RoboCup symposium.</p><p>RoboCup@Home联盟旨在开发服务和辅助机器人技术，与未来个人家庭应用高度相关。它是自主服务机器人最大的国际年度大赛，是RoboCup计划的一部分。一套基准测试用于评估机器人在现实非标准化家庭环境中的能力和性能。研究的重点在于以下领域但不限于：人机交互与合作、动态环境中的导航和建图、自然光条件下的计算机视觉和物体识别、物体操作、自适应行为、行为集成、环境智能、标准化和系统集成。它与RoboCup研讨会共同进行。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时至今日，那些过往比赛的经历依然历历在目：我们一起装箱运送机器人、在宾馆里熬夜调试代码、在比赛会场紧张地敲击着命令行。我们既有为失败而留的泪水，也有因努力付出所获得的阶段性成功，无论最终的比赛结果如何，它们已经成为我大学最美好的回忆，同时也是我人生中最不可缺少的宝贵财富。</p><p>接下来，我会以系列文章的形式记录我大学所经历过的三次RoboCup比赛，其中重点突出比赛经历，而非技术开发要点。总之，希望自己从比赛中所获得的教训和经验都能始终铭记在心中，并为之后所用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RoboCup </tag>
            
            <tag> RoboCup@Home </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客教程系列（0x02）：Hexo主题配置</title>
      <link href="/zh-cn/2017/06/07/blog_tutorial_2_hexo_theme_config/"/>
      <url>/zh-cn/2017/06/07/blog_tutorial_2_hexo_theme_config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我之前在选择自己博客网站主题的时候曾浏览过<a href="https://hexo.io/themes/">Hexo主题</a>网站，发现Hexo官方提供了不少各具特色的主题。后来为了进一步确定到底使用哪个主题，我又仔细地参考了知乎上有关<a href="https://www.zhihu.com/question/24422335">Hexo主题推荐</a>的文章。总之，在一段长时间的纠结和考虑之后，我最终决定放弃参考别人的想法而是遵循自己内心的感觉，选择了一个叫Freemind的主题。</p><p>Freemind主题虽然不是Hexo里面排名前十或在推荐里面出现次数较多的主题，但它的那种简约而又专业的风格令我十分喜欢。接下来，我会简要地介绍Freemind主题的特点和安装步骤，并重点地讲解它的配置方法。当然了，Hexo主题的配置基本上大同小异，只要学会了其中一种主题的配置方法，其他的就可以触类旁通了。</p><span id="more"></span><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Freemind主题是由Joe所编写的，它拥有以下几个特点：</p><h3 id="双列布局"><a href="#双列布局" class="headerlink" title="双列布局"></a>双列布局</h3><p>使用最传统和舒适的博客布局。</p><h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><p>基于<a href="https://github.com/wzpan/hexo-tag-bootstrap">hexo-tag-bootstrap</a>编写了功能丰富的标签插件，可以最大程度地发挥Bootstrap的能力。其中包括：</p><ul><li>可以插入一段带有特殊颜色标记的文本。</li><li>可以插入一个按钮，并为其指定超链接、文本和颜色。</li><li>可以插入一个标签，并为其指定文本和形式。</li><li>可以插入一个徽章，并为其指定文本。</li><li>可以插入一段文本信息，并为其指定不同的样式。</li></ul><h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>Freemind主题内置了十几种颜色，可以通过配置进行修改。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>基于<a href="https://github.com/paichyperiondev/hexo-generator-search">hexo-generator-search</a>实现了一个支持实时预览的本地搜索引擎。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Freemind主题"><a href="#安装Freemind主题" class="headerlink" title="安装Freemind主题"></a>安装Freemind主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> your_blog</span><br><span class="line">$&gt; git <span class="built_in">clone</span> https://github.com/wzpan/hexo-theme-freemind.git themes/freemind</span><br></pre></td></tr></table></figure><h3 id="安装hexo-tag-bootstrap插件"><a href="#安装hexo-tag-bootstrap插件" class="headerlink" title="安装hexo-tag-bootstrap插件"></a>安装<a href="https://github.com/wzpan/hexo-tag-bootstrap">hexo-tag-bootstrap</a>插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install hexo-tag-bootstrap --save</span><br></pre></td></tr></table></figure><h3 id="安装hexo-generator-search插件"><a href="#安装hexo-generator-search插件" class="headerlink" title="安装hexo-generator-search插件"></a>安装<a href="https://github.com/paichyperiondev/hexo-generator-search">hexo-generator-search</a>插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Hexo目录"><a href="#Hexo目录" class="headerlink" title="Hexo目录"></a>Hexo目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|__ .deploy_git/</span><br><span class="line">|__ .git/</span><br><span class="line">|__ .gitignore</span><br><span class="line">|__ _config.yaml</span><br><span class="line">|__ LICENSE</span><br><span class="line">|__ node_modules/</span><br><span class="line">|__ package.json</span><br><span class="line">|__ public/</span><br><span class="line">|__ README.md</span><br><span class="line">|__ scaffolds</span><br><span class="line">|   |__ draft.md</span><br><span class="line">|   |__ freemind.md</span><br><span class="line">|   |__ page.md</span><br><span class="line">|   |__ post.md</span><br><span class="line">|__ setup.sh</span><br><span class="line">|__ <span class="built_in">source</span></span><br><span class="line">|   |__ _posts/</span><br><span class="line">|   |__ about/</span><br><span class="line">|   |__ categories/</span><br><span class="line">|   |__ images/</span><br><span class="line">|   |__ tags/</span><br><span class="line">|__ themes</span><br><span class="line">|   |__ freemind/</span><br><span class="line">|   |__ landscape/</span><br></pre></td></tr></table></figure><ul><li><p><strong>.deploy_git(不被Git管理):</strong><br>存放远程博客网站的全部内容。</p></li><li><p><strong>.git(不被Git管理):</strong><br>Git的核心功能目录。</p></li><li><p><strong>.gitignore:</strong><br>Git的忽略文件，用于忽略某些文件的版本管理。</p></li><li><p><strong>_config.yaml:</strong><br>博客网站的配置文件，里面包含了配置过程中的大部分参数。</p></li><li><p><strong>db.json(不被Git管理):</strong><br>在博客网站的中间数据库文件。</p></li><li><p><strong>LICENSE:</strong><br>仓库使用的开源版本协议。</p></li><li><p><strong>node_modules:</strong><br>博客网站开发所需要或依赖的Node.js模块。</p></li><li><p><strong>package.json:</strong><br>记录Hexo以及各种插件版本信息的文件。</p></li><li><p><strong>public(不被Git管理):</strong><br>存放生成的博客网站的全部内容。</p></li><li><p><strong>README.md:</strong><br>仓库的使用介绍。</p></li><li><p><strong>scaffolds:</strong><br>模板文件夹，用来创建不同风格的文章。</p></li><li><p><strong>setup.sh:</strong><br>安装Hexo插件的脚本文件。</p></li><li><p><strong>source:</strong><br>存放用户资源的文件夹，里面一般文章和图片等。</p></li><li><p><strong>themes:</strong><br>主题文件夹，Hexo会根据主题来生成相应的静态博客网站。</p></li></ul><h3 id="Freemind目录"><a href="#Freemind目录" class="headerlink" title="Freemind目录"></a>Freemind目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|__ .gitignore</span><br><span class="line">|__ _config.yaml</span><br><span class="line">|__ languages/</span><br><span class="line">|__ layout/</span><br><span class="line">|__ LICENSE</span><br><span class="line">|__ README.md</span><br><span class="line">|__ <span class="built_in">source</span>/</span><br></pre></td></tr></table></figure><ul><li><p><strong>.gitignore:</strong><br>Git的忽略文件，用于忽略某些文件的版本管理。</p></li><li><p><strong>_config.yaml:</strong><br>主题的配置文件，里面包含了配置过程中的大部分参数。</p></li><li><p><strong>languages:</strong><br>主题的语言文件夹。</p></li><li><p><strong>layout:</strong><br>主题的页面布局文件夹。</p></li><li><p><strong>LICENSE:</strong><br>主题使用的开源版本协议。</p></li><li><p><strong>README.md:</strong><br>主题的使用介绍。</p></li><li><p><strong>source:</strong><br>主题的核心功能文件夹。</p></li></ul><h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">freemind</span></span><br></pre></td></tr></table></figure><p>修改Hexo根目录下<code>_config.yaml</code>文件中的theme选项为freemind来启用该主题。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="首页摘要"><a href="#首页摘要" class="headerlink" title="首页摘要"></a>首页摘要</h3><p>在网站首页，文章中的内容默认是全部展开的。你可以通过在文章中添加如下标签，来显示该标签以前文章中的所有内容（通过在文章相应位置插入一个<strong>阅读全文</strong>的按钮来实现），这样做可以让网站首页看起来较为简洁并且突出了每个文章的重点。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h3 id="标题页面"><a href="#标题页面" class="headerlink" title="标题页面"></a>标题页面</h3><p>Freemind预先已经定义了<strong>分类</strong>、<strong>标签</strong>和<strong>关于</strong>页面的排版和布局，但是要想让它们显示出来，就需要自己手动在博客网站的<code>source</code>目录中添加相应的页面。</p><p>例如，为了能让<strong>分类</strong>页面可以在鼠标点击之后显示出来，你需要在<code>source/categories/</code>目录下创建一个<code>index.md</code>文件，其中的内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="section">layout: categories</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p><strong>标签</strong>页面的内容与上面类似，具体内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line"><span class="section">layout: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>最后<strong>关于</strong>页面中的内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line"><span class="section">layout: page</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>为了能使用Markdown语法来对关于页面中的内容进行编写，我将原本官方教程中需要创建的index.html文件修改为了index.md，经过测试，两者显示效果相同。</p></div><h3 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h3><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_layout:</span> <span class="string">freemind</span></span><br></pre></td></tr></table></figure><p>上面的配置（存在于<code>_config.yaml</code>文件中）修改了文章的默认布局，可以在终端里使用如下的命令来简化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo new <span class="string">&quot;article&quot;</span></span><br></pre></td></tr></table></figure><p>而不需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo new freemind <span class="string">&quot;article&quot;</span></span><br></pre></td></tr></table></figure><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>因为Freemind主题在Hexo的基础之上，额外提供了一些新的front-matter选项，所以我创建了这个freemind布局（<code>scaffolds/freemind.md</code>）来更好地装饰整篇文章。以下是其中的具体内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">description:</span><br><span class="line">feature: false</span><br><span class="line">toc: true</span><br><span class="line"><span class="section">comments: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>title:</strong><br>文章的标题，由创建文章命令中的title自动写入，可以手动修改。</p></li><li><p><strong>date:</strong><br>文章的创建日期，由创建文章命令时的系统时间自动写入，可以手动修改。</p></li><li><p><strong>tags:</strong><br>文章的标签，用于在博客网站首页的标签页里进行显示，可以添加多个。</p></li><li><p><strong>categories:</strong><br>文章的分类，用于在博客网站首页的分类页里进行显示。</p></li><li><p><strong>description:</strong>（新）<br>文章的描述，用于在文章顶部插入一段简短的摘要信息。</p></li><li><p><strong>feature:</strong>（新）<br>文章的特征图，用于在博客网站首页的文章列表中进行显示。</p></li><li><p><strong>toc:</strong>（新）<br>文章的目录，用于显示文章的目录层级。</p></li><li><p><strong>comments:</strong><br>文章的评论，用于留言和交流。</p></li></ul><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">myyerrol</span></span><br></pre></td></tr></table></figure><p>因为多说已经关闭，所以我使用Disqus来取代其做博客的评论系统，上面需要填写的是注册Disqus时所指定的ID。具体的操作步骤如下：</p><p><strong>1. 注册或登录Disqus</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/2_freemind_config/disqus_login_and_signup.png" alt="disqus_login_and_signup"></p><p>打开<a href="https://disqus.com/">Disqus</a>主页，可以看到，Disqus 支持 Facebook，Twitter以及 Google 登录，当然也可以用邮箱注册一个账号，如果是注册的账号，需要验证一下邮箱。</p><p><strong>2. 配置Disqus</strong></p><p>登陆后，在<a href="https://disqus.com/">Disqus</a>主页选择<strong>GET STARTED</strong>按钮，会出现如下界面：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/2_freemind_config/disqus_get_started.png" alt="disqus_get_started"></p><p>选择<strong>I want to install Disqus on my site</strong>选项后，接着会出现下面的界面：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/2_freemind_config/disqus_create_site.png" alt="disqus_create_site"></p><ul><li><p><strong>Website Name:</strong><br>你的网站名字，可以随便起，但最好和你的网站相关。</p></li><li><p><strong>Shortname:</strong><br>这个就是上面Hexo配置中的disqus_shortname，要求全网唯一，设定之后不可改变。推荐使用你的英文名来当做Shortname。</p></li><li><p><strong>Category:</strong><br>这个是站点的种类，你可以根据自己的实际情况来进行选择。</p></li></ul><p>在填写完上面的内容之后，点击<strong>Create Site</strong>，等待页面的跳转。接下来在页面的左侧点击<strong>Configure Disqus</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/2_freemind_config/disqus_configuration.png" alt="disqus_configuration"></p><ul><li><p><strong>Website Name:</strong><br>自动从上面创建站点的步骤中读取，不需要手填。</p></li><li><p><strong>Website URL:</strong><br>自己博客网站的地址，需要如实填写。</p></li><li><p><strong>Category:</strong><br>自动从上面创建站点的步骤中读取，不需要手填。</p></li><li><p><strong>Description:</strong><br>网站的描述，可以不写。</p></li><li><p><strong>Language:</strong><br>Disqus显示在网站中的语言，根据自己的实际情况来选择，一般选择Chinese或English。</p></li></ul><p>配置完以上内容后，点击<strong>Complete Setup</strong>完成Disqus的配置。</p><p><strong>3. 配置Hexo</strong></p><p>最后，在<code>_config.yaml</code>文件中将disqus_shortname填写为上面Disqus创建的Shortname就可以了。</p><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>Disqus评论系统需要翻墙才可以访问，而且在留言之前要先登录个人账户。</p></div><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>我的Hexo配置文件（<code>_config.yaml</code>）内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Home</span> <span class="string">|</span> <span class="string">myyerrol&#x27;s</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Home</span> <span class="string">|</span> <span class="string">myyerrol&#x27;s</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;This is my personal website, which uses the hexo system to build. Enter the following URL to access: https://myyerrol.github.io&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">myyerrol</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:year-:month-:day-:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">freemind</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">freemind</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:myyerrol/myyerrol.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">myyerrol</span></span><br></pre></td></tr></table></figure><h4 id="Freemind"><a href="#Freemind" class="headerlink" title="Freemind"></a>Freemind</h4><p>我的Freemind主题配置文件（<code>themes/freemind/_config.yaml</code>）如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">slogan:</span> <span class="string">&quot;Hacking means exploring the limits of what is possible, in a spirit of playful cleverness.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">bootstrap</span></span><br><span class="line"><span class="attr">inverse:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">归档</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">archives</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;所有的文章。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-archive&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">categories</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;所有的分类。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-folder&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">tags</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;所有的标签。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-tags&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">about</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;关于。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-user&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;myyerrol的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/myyerrol</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;我的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;maksyuki的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/maksyuki</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;maksyuki的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;mawenke的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/mawenke</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;mawenke的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;liao-zhihan的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/liao-zhihan</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;liao-zhihan的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;西工大RoboCup@Home的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/xm-project</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;西工大RoboCup@Home的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;西工大RoboCup@Rescue的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/team-explorer-rescue-robot</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;西工大RoboCup@Rescue的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;西工大篮球机器人项目的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/nwpu-basketball-robot</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;西工大篮球机器人项目的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;HeadsFree项目的GitHub&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.github.com/HANDS-FREE</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;HeadsFree项目的GitHub。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-github&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;maksyuki的博客&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.maksyuki.com</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;maksyuki的博客。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-globe&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;mawenke的博客&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://mawenke.github.io</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;mawenke的博客。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-globe&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;HandsFree项目的网站&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://www.hands-free.org.cn</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;HandsFree项目的网站。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-globe&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;HandsFree项目的维基&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/HANDS-FREE/HANDS-FREE.github.io/wiki</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">&quot;HandsFree项目的维基。&quot;</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-globe&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&quot;myyerrol的邮箱&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">mailto:myyerrol@126.com</span></span><br><span class="line">    <span class="attr">intro:</span> <span class="string">myyerrol的邮箱。</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">&quot;fa fa-envelope&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">search</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tagcloud</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">links</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rss:</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">images/favicon/favicon.ico</span></span><br><span class="line"><span class="attr">duoshuo_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">siteid:</span></span><br><span class="line"><span class="attr">baidu_tongji:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">siteid:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">swiftype_key:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># share widgets</span></span><br><span class="line"><span class="attr">bdshare:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jiathis:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>slogan:</strong><br>显示在博客网站首页的个性签名。</p></li><li><p><strong>theme:</strong><br>Freemind的颜色主题，具体可参看<a href="http://hahack.com/hexo-theme-freemind/2016/01/30/color-themes/">Freemind颜色主题配置</a>。</p></li><li><p><strong>inverse:</strong><br>Freemind颜色主题的反转，配合上面的theme选项一起使用。</p></li><li><p><strong>menu:</strong><br>显示在博客网站首页的导航菜单。</p></li><li><p><strong>links:</strong><br>显示在博客网站首页的推荐链接。</p></li><li><p><strong>widgets:</strong><br>显示在博客网站首页右侧的挂件列表。</p></li><li><p><strong>rss:</strong><br>显示博客网站的RSS链接。</p></li><li><p><strong>fancybox:</strong><br>是否开启<a href="http://fancyapps.com/fancybox/3/">fancyBox</a>功能。</p></li><li><p><strong>favicon:</strong><br>显示博客网站图标。</p></li><li><p><strong>duoshuo_shortname:</strong><br>多说ID，由于关闭，不再使用。</p></li><li><p><strong>google_analytics:</strong><br>Google分析，用于分析访问量。</p></li><li><p><strong>baidu_tongji:</strong><br>Baidu统计，用于统计访问量。</p></li><li><p><strong>swiftype_key:</strong><br>外部搜索的密钥，用于检索博客文章。</p></li><li><p><strong>bdshare:</strong><br>分享插件。</p></li><li><p><strong>jiathis:</strong><br>分享插件。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Freemind主题的基本配置方法，概括来说就是对Hexo根目录和Freemind目录下的两个_config.yaml文件进行配置。Hexo提供的主题有很多，大家可以去<a href="https://hexo.io/themes/">Hexo主题</a>网站选择适合自己的主题来进行配置。最后，在下一篇文章中，我会介绍关于Freemind主题优化方面的配置。</p>]]></content>
      
      
      <categories>
          
          <category> 博客教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人解读系列（0x02）：服务机器人机械臂</title>
      <link href="/zh-cn/2017/04/20/robot_analysis_2_xmbot_arm/"/>
      <url>/zh-cn/2017/04/20/robot_analysis_2_xmbot_arm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在大二的时候加入到了西北工业大学舞蹈机器人基地RoboCup@Home项目组，主要负责家政服务机器人晓萌机械臂的软件开发部分。在开发的过程中，我曾遇到并解决过一些问题，也算是积累了一些机械臂开发的经验，因此现在我打算将这些经验分享出来，希望能给那些正在使用ROS来开发机械臂的后来者们提供一些帮助。当然，写得不对的地方欢迎各位大神指正。</p><p>以下，我从技术介绍和学习流程两个方面来进行讲解。其中技术介绍方面又分为机械、电子和软件三个章节。由于我在项目组里做的是软件开发工作，对机械和电子了解得相对较少，因此机械和电子这两个章节的内容我会简略地介绍，而讲解的重点自然便是软件章节。最后关于学习流程方面，我从基础、进阶、高级以及资源这四个章节来分别进行叙述，力求将自己的学习方法完整地呈现出来。</p><span id="more"></span><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm.jpg" alt="xm_arm"></p><h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><p>机械臂作为机器人最为重要的执行器，赋予了机器人与外部世界环境进行物理交互的能力。这使得机器人的智能不仅仅停留在识别和规划层上，还能通过实际的操作将其真正的表达出来。目前国内外机械臂研究的热点主要集中在机械臂自主精确抓取、放置物体上，而根据本人之前的开发经历，要想让机械臂能完美地执行一系列复杂且精确的操作从而使末端执行器到达预定的位置是很难的，这需要我们理解并掌握很多与机械臂解算相关的数学知识。我相信这会让很多非专业开发者感到头疼，不过借助于第三方开源软件，比如<a href="http://www.ros.org/">ROS</a>和<a href="http://moveit.ros.org/">MoveIT!</a>机械臂的开发就会相对来说简单很多。下面，我分机械、电子和软件三个方面，详细地讲解一下自己在开发过程中所总结的一些技术要点。最后，你可以在<a href="https://github.com/myyerrol/xm-arm-workspace">开发代码</a>（在ROS Indigo下能成功编译并运行，不支持ROS Kinetic）和<a href="https://github.com/myyerrol/xm-developer-log/blob/master/log.md">问题汇总</a>中找到我之前整理的相关资料。</p><h3 id="机械"><a href="#机械" class="headerlink" title="机械"></a>机械</h3><p>我们机器人的机械臂在机械设计上有一些不一样的地方。相比于其他使用大扭矩舵机或电机作为关节的机械臂，我们使用了由同步轮和同步带所组成的机械结构，这种独特的结构使得我们的机械臂在一定程度上拥有了抓取更重物体的负载能力。除此之外，机械臂末端的手爪也由上一代的对称张开闭合的结构变成了平行夹紧的形式，即两个金属滑块可以通过在滑轨上对称平行的移动。这使得手爪可以适应不同粗细、形状的物体，为抓紧物体提供最基本的保障。当然，这个机械臂也曾经给我造成过一些小困扰，我会在下面的软件部分讲到，通过这个困扰的解决，你就可以理解为什么机械的设计在某种程度上会影响软件代码的编写。</p><h3 id="电子"><a href="#电子" class="headerlink" title="电子"></a>电子</h3><p>电子部分作为连接机械臂软硬件的重要组成部分，主要的任务是负责将软件组通过RS-485传过来的数据进行解析，并且以最快的速度传递给接有驱动盒的电机来实时地控制机械臂。同样的，通过电机编码器返回的数据可以用来记录每个机械臂关节的实时状态，经过一定的数学解算，就可以将其作为运动规划层的输入，为复杂运动的规划提供基本的保证。机械臂控制使用的是位置闭环算法，具体这方面我了解的并不是很多，不过之前用起来还是很稳定的。</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_software_architecture.png" alt="xm_arm_software_architecture"></p><p>从软件架构图中可以很清楚的看到，机械臂的软件层主要由三个部分组成，从下到上依次为：硬件接口层、运动规划层和任务决策层。</p><h4 id="硬件接口层"><a href="#硬件接口层" class="headerlink" title="硬件接口层"></a>硬件接口层</h4><p>机械臂硬件接口层的设计理念来源于<a href="http://wiki.ros.org/ros_control">ROS Control</a>。ROS Control是ROS提供的软件与硬件之间进行数据通信的中间件，它对硬件进行了抽象，统一了数据通信的接口，并通过插件的形式封装了一些常用的运动控制算法，为建立机器人软硬件模块之间的数据通路提供了便捷。</p><p>ROS Control提供的硬件抽象层主要负责管理机器人的硬件资源，而控制器从抽象层请求资源即可，并不直接接触硬件。这提高了代码的复用率和可移植性。</p><p>首先，让我们先看一下ROS Control官方提供的数据流图是什么样子的：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/ros_control.png" alt="ROS Control"></p><p>细心的读者可能会发现这两个架构图在硬件接口层部分有一些不一样的地方。接下来我就讲解一下硬件接口层部分各子模块的功能，并解释彼此不同的原因。</p><ul><li><p>实体机械臂：<br>这一部分指的就是真实客观存在的机械臂。STM32嵌入式控制器使用位置PID闭环算法来计算由硬件抽象层通过串口通信方式发过来的关节数据，并将计算好的数据直接发送给电机对其进行控制。同时，电机的编码器也将电机实时的位置数据经串口通信返回给上面的硬件抽象层。</p></li><li><p>硬件抽象层：<br>硬件抽象层和硬件直接打交道，通过<strong>write</strong>和<strong>read</strong>方法来完成对硬件的相关操作。硬件抽象层跟上面官方提供（红色的部分）的有一些不太一样的地方在于我并没有使用ROS Control提供的<strong>Transmissions</strong>（数据转换）和<strong>Joint Limits</strong>(关节限位）的API。原因的话，我在下面会讲到。这首先简要的介绍一下什么是Transmissions和Joint Limits。</p><ul><li><p>Transmissions：<br>Transmissions就是机器人每个运动关节和电机之间的数学映射。因为机械臂关节结构的不同，会导致机器人上层规划所使用的Joint与Actuator数据之间存在明显的偏差。比如说有简单齿轮和同步带驱动的，有锥齿轮差动机构，四连杆机构等。Transmissions提供的接口中包含有解决上面这些结构进行数据转换的映射公式。</p></li><li><p>Joint Limits：<br>Joint Limits主要是维护了一个关节限位的数据结构，里面可以包含的数据种类不仅仅是常用的关节位置、速度、力矩、加速度等方面的限位，还可以储存具有安全作用的位置软限位、<a href="http://wiki.ros.org/pr2_controller_manager/safety_limits">位置边界</a>和<a href="http://wiki.ros.org/pr2_controller_manager/safety_limits">速度边界</a>等。</p></li></ul><p>至于我为什么没有使用以上两个模块的原因，主要是参考了<strong>西工大一小学生</strong>曾经在<a href="http://exbot.net">Exbot</a>上发表的有关ROS Control的<a href="http://blog.exbot.net/archives/2337">文章</a>。下面就截取其中的一小部分：</p><blockquote><p>以上两个模块是因为URDF中有相应的标签，写了一堆可以直接Load的，但是实际用处并不是很大。它的设计思想是想在URDF中表示更多的信息，这些信息在Gazebo中可以给出更多的细节。但是解析URDF的程序使得RobotHW体量很大，而且这些细节会因为机器人本体通讯暴露给ROS的细节量而不尽相同，而且还会显著提高编程复杂度，所以这些信息显得冗余，而应用这些信息的库也就显得冗余。</p></blockquote><p>之前，我是有尝试过在RobotHW中加载URDF中的相关标签，不过用起来确实就如同<strong>小学生</strong>所说的那样，比较麻烦，而且还很冗余。因此，我根据机械组队员提供的有关机械臂关节电机转换的数学公式封装了相应的函数，至于Joint Limits，我是在规划层的地方进行了指定。</p></li><li><p>控制器管理器：<br>控制器管理器提供一种通用的接口来管理不同的<a href="http://wiki.ros.org/ros_controllers">ROS Controllers</a>，它可以加载、开始运行、停止运行、卸载不同的Controller，并且提供了多种工具来完成这些操作。<a href="http://wiki.ros.org/controller_manager">Controller Manager</a>的输入就是ROS上层应用的输出。在这里面，我用到了Joint Command Controller和Joint State Controller，它们分别可以完成对每个关节的控制以及读取硬件接口中关节的状态。</p></li></ul><hr><p>好的。前面讲了很多新的概念，这里我们还是找个案例来具体的分析一下。这里，以我之前整理的<a href="https://github.com/myyerrol/xm-arm-workspace">源码</a>作为参考，分析一下机械臂分别在<a href="http://www.gazebosim.org">Gazebo</a>仿真和物理物理环境中是如何体现上面那些概念的。</p><p>首先看一张来自Gazebo官网的ROS Control架构图：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/gazebo_ros_control.png" alt="Gazebo ROS Control"></p><p>从图中可以看到，<strong>Simulation</strong>和<strong>Hardware</strong>之上的Hardware Resource和Controller Manager是一样的，这很清晰地体现了ROS Control的底层无关性，即无论使用的是抽象的仿真还是具体的硬件，只要程序能继承RobotHW硬件抽象层的基类来做到数据接口的统一，Controller Manager就可以对相应的资源进行管理。</p><p>对于<strong>Simulation</strong>和<strong>Hardware</strong>来说，它们内部架构相似，但配置以及使用方式是不一样的。<strong>Simulation</strong>的RobotHW部分，Gazebo官方已经将其实现，并且提供了相应的ROS Control插件来从机械臂的URDF文件中载入所需的数据。用户只需写好URDF和YAML文件，并使用ROS Launch将其整合到一起就万事大吉了。</p><p>而对于<strong>Hardware</strong>这部分来说，除了上面说到的配置之外，我们还需要自己编写C++代码来继承RobotHW基类，并在里面分别使用命令和状态硬件接口句柄对相应的关节数据进行<strong>注册</strong>，然后再将不同的硬件接口注册到RobotHW上。最后，我们还要自己编写函数完成对关节和电机数据的相互转换，并且根据指定的通信协议，实现<strong>read</strong>和<strong>write</strong>函数。</p><ul><li>仿真部分：</li></ul><blockquote><p>xm_arm_description/gazebo/xm_arm_gazebo_transmission.xacro</p></blockquote><p>每个关节都添加了Hardware Interface，并且在具有父子关系的两个关节之间添加了对应的Transmission。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;lift_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_lift&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;lift_motor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;waist_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_waist&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;waist_motor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;big_arm_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_big_arm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;big_arm_motor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;forearm_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_forearm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;forearm_motor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitching_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_pitching&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;wrist_motor_1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;wrist_rotation_simp_tran&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_rotation&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;wrist_motor_2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_description/gazebo/xm_gazebo_ros_control.xacro</p></blockquote><p>为了让Gazebo可以识别Transmission标签，需要添加Gazebo的ROS Control插件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/xm_arm<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">robotSimType</span>&gt;</span>gazebo_ros_control/DefaultRobotHWSim<span class="tag">&lt;/<span class="name">robotSimType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_gazebo_controller_config/xm_arm_gazebo_joint_position.yaml</p></blockquote><p>使用YAML格式的文件来声明我们所需要使用的Controller，以及对应的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="comment"># Position Controllers</span></span><br><span class="line">  <span class="attr">joint_lift_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_lift</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_waist_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_waist</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_big_arm_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_big_arm</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_forearm_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_forearm</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_wrist_pitching_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_wrist_pitching</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_wrist_rotation_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_wrist_rotation</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_finger_left_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_finger_left</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint_finger_right_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">joint_finger_right</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_gazebo_controller_config/xm_arm_gazebo_joint_states.yaml</p></blockquote><p>使用Joint State Controller来发布每个关节的实时状态。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="comment"># Publish all joint states</span></span><br><span class="line">  <span class="attr">joint_state_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">    <span class="attr">publish_rate:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_bringup/launch/xm_arm_bringup_gazebo_joint_control.launch</p></blockquote><p>最后编写Launch文件来启动Controller Manager中的Spawner，加载上述插件。并启动Gazebo和Rviz载入相关的机械臂模型。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Launch Gazebo  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_gazebo)/launch/xm_arm_empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load joint controller configurations from YAML file to parameter server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_gazebo_controller_config)/launch/xm_arm_gazebo_joint_position.launch&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_gazebo_controller_config)/launch/xm_arm_gazebo_joint_states.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find xm_arm_bringup)/rviz/xm_arm_bringup_gazebo.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在终端中输入以下命令启动Motion Control测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; roslaunch xm_arm_bringup xm_arm_bringup_gazebo_joint_control.launch</span><br><span class="line">$&gt; rosrun xm_arm_teleop xm_arm_teleop_position_keyboard</span><br></pre></td></tr></table></figure><p>你可以使用键盘上的按键来控制机械臂每个关节的移动位置。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_control_gazebo.png" alt="xm_arm_control_gazebo"></p><ul><li>硬件部分：</li></ul><blockquote><p>xm_arm_robot_hardware/include/xm_arm_robot_hardware/xm_arm_robot_hardware.h</p></blockquote><p>创建子类继承RobotHW父类，并且声明了一些函数和变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArmRobotHardware</span> :</span> <span class="keyword">public</span> hardware_interface::RobotHW</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ArmRobotHardware</span>(ros::NodeHandle nh);</span><br><span class="line">    ~<span class="built_in">ArmRobotHardware</span>();</span><br><span class="line">    <span class="function">ros::Time <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ros::Duration <span class="title">getPeriod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ros::CallbackQueue* <span class="title">getCallbackQueue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">const</span> ros::Time, <span class="keyword">const</span> ros::Duration period)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> ros::Time, <span class="keyword">const</span> ros::Duration period)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getFreq</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">publishArmCommand</span><span class="params">(<span class="keyword">const</span> <span class="keyword">u_int8_t</span> func, <span class="keyword">const</span> <span class="keyword">u_int8_t</span> jnt_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="keyword">const</span> <span class="keyword">float</span> jnt_pos)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">publishArmJState</span><span class="params">(<span class="keyword">const</span> <span class="keyword">u_int8_t</span> func, <span class="keyword">const</span> <span class="keyword">u_int8_t</span> jnt_id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getArmStateCallback</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> xm_arm_msgs::xm_ArmSerialDatagram::ConstPtr&amp; msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getArmStatusCallback</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> xm_arm_msgs::xm_ArmSerialDatagram::ConstPtr&amp; msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkArmStatus</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transPositionJointToActuator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transPositionActuatorToJoint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ros::NodeHandle    nh_;</span><br><span class="line">    ros::CallbackQueue callback_queue_;</span><br><span class="line">    ros::Publisher     arm_serial_pub_;</span><br><span class="line">    ros::Subscriber    arm_state_sub_;</span><br><span class="line">    ros::Subscriber    arm_status_sub_;</span><br><span class="line">    <span class="keyword">int</span>                arm_command_id_;</span><br><span class="line">    <span class="keyword">int</span>                arm_state_id_;</span><br><span class="line">    <span class="keyword">double</span>             freq_;</span><br><span class="line">    hardware_interface::JointStateInterface    jnt_state_interfece_;</span><br><span class="line">    hardware_interface::PositionJointInterface jnt_position_interface_;</span><br><span class="line">    hardware_interface::VelocityJointInterface jnt_velocity_interface_;</span><br><span class="line">    std::vector&lt;std::string&gt;      jnt_name_;</span><br><span class="line">    std::vector&lt;std::string&gt;      act_name_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; jnt_pos_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; jnt_vel_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; jnt_eff_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; act_pos_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; jnt_cmd_;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">double</span>&gt; act_cmd_;</span><br><span class="line">    std::vector&lt;ros::Time&gt;        jnt_stamp_;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">HARDWARE_STATUS</span> &#123;</span>UNKNOWN, READY, RUNNING, ERROR&#125;;</span><br><span class="line">    std::vector&lt;HARDWARE_STATUS&gt;  jnt_status_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_robot_hardware/src/xm_arm_robot_hardware.cpp</p></blockquote><p>初始化关节和电机数据，并使用Hardware Interface对相应的数据进行注册，最后初始化与串口通信有关的Topic。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">ArmRobotHardware::<span class="built_in">ArmRobotHardware</span>(ros::NodeHandle nh)</span><br><span class="line">    : <span class="built_in">nh_</span>(nh),</span><br><span class="line">      <span class="built_in">freq_</span>(<span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">    nh_.<span class="built_in">setCallbackQueue</span>(&amp;callback_queue_);</span><br><span class="line"></span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_lift&quot;</span>);</span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_waist&quot;</span>);</span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_big_arm&quot;</span>);</span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_forearm&quot;</span>);</span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_wrist_pitching&quot;</span>);</span><br><span class="line">    jnt_name_.<span class="built_in">push_back</span>(<span class="string">&quot;joint_wrist_rotation&quot;</span>);</span><br><span class="line"></span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_lift&quot;</span>);</span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_waist&quot;</span>);</span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_big_arm&quot;</span>);</span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_forearm&quot;</span>);</span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_wrist_left&quot;</span>);</span><br><span class="line">    act_name_.<span class="built_in">push_back</span>(<span class="string">&quot;actuator_wrist_right&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jnt_name_.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jnt_pos_[jnt_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line">        jnt_vel_[jnt_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line">        jnt_eff_[jnt_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line">        jnt_cmd_[jnt_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line">        act_cmd_[act_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line">        act_pos_[act_name_[i]] = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">hardware_interface::JointStateHandle <span class="title">jnt_state_handle</span><span class="params">(jnt_name_[i],</span></span></span><br><span class="line"><span class="params"><span class="function">            &amp;jnt_pos_[jnt_name_[i]], &amp;jnt_vel_[jnt_name_[i]],</span></span></span><br><span class="line"><span class="params"><span class="function">            &amp;jnt_eff_[jnt_name_[i]])</span></span>;</span><br><span class="line">        jnt_state_interfece_.<span class="built_in">registerHandle</span>(jnt_state_handle);</span><br><span class="line">        <span class="function">hardware_interface::JointHandle <span class="title">jnt_position_handle</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            jnt_state_interfece_.getHandle(jnt_name_[i]),</span></span></span><br><span class="line"><span class="params"><span class="function">            &amp;jnt_cmd_[jnt_name_[i]])</span></span>;</span><br><span class="line">        jnt_position_interface_.<span class="built_in">registerHandle</span>(jnt_position_handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">registerInterface</span>(&amp;jnt_state_interfece_);</span><br><span class="line">    <span class="built_in">registerInterface</span>(&amp;jnt_position_interface_);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jnt_stamp_.<span class="built_in">push_back</span>(ros::Time::<span class="built_in">now</span>());</span><br><span class="line">        jnt_status_.<span class="built_in">push_back</span>(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arm_command_id_ = <span class="number">3</span>;</span><br><span class="line">    arm_state_id_   = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    arm_serial_pub_ = nh_.advertise&lt;xm_arm_msgs::xm_ArmSerialDatagram&gt;(</span><br><span class="line">        <span class="string">&quot;xm_arm_serial/send_arm_command&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    arm_state_sub_ = nh_.<span class="built_in">subscribe</span>(<span class="string">&quot;xm_arm_serial/receive_arm_state&quot;</span>, <span class="number">1000</span>,</span><br><span class="line">        &amp;ArmRobotHardware::getArmStateCallback, <span class="keyword">this</span>);</span><br><span class="line">    arm_status_sub_ = nh_.<span class="built_in">subscribe</span>(<span class="string">&quot;xm_arm_serial/receive_arm_status&quot;</span>, <span class="number">1000</span>,</span><br><span class="line">        &amp;ArmRobotHardware::getArmStatusCallback, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据机械臂公式，实现关节和电机数据之间的互相转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArmRobotHardware::transPositionJointToActuator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_lift&quot;</span>]        = -jnt_cmd_[<span class="string">&quot;joint_lift&quot;</span>] * <span class="number">100</span>;</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_waist&quot;</span>]       =  jnt_cmd_[<span class="string">&quot;joint_waist&quot;</span>];</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_big_arm&quot;</span>]     = -jnt_cmd_[<span class="string">&quot;joint_big_arm&quot;</span>] * <span class="number">1.6667</span>;</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_forearm&quot;</span>]     = -jnt_cmd_[<span class="string">&quot;joint_forearm&quot;</span>] +</span><br><span class="line">        jnt_cmd_[<span class="string">&quot;joint_big_arm&quot;</span>] * <span class="number">1.6667</span>;</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_wrist_left&quot;</span>]  = -(-jnt_cmd_[<span class="string">&quot;joint_big_arm&quot;</span>] * <span class="number">1.6667</span> +</span><br><span class="line">        jnt_cmd_[<span class="string">&quot;joint_forearm&quot;</span>] * <span class="number">1.6000</span> + jnt_cmd_[<span class="string">&quot;joint_wrist_pitching&quot;</span>]) *</span><br><span class="line">        <span class="number">0.6250</span> + jnt_cmd_[<span class="string">&quot;joint_wrist_rotation&quot;</span>] * <span class="number">0.7917</span>;</span><br><span class="line">    act_cmd_[<span class="string">&quot;actuator_wrist_right&quot;</span>] = -(-jnt_cmd_[<span class="string">&quot;joint_big_arm&quot;</span>] * <span class="number">1.6667</span> +</span><br><span class="line">        jnt_cmd_[<span class="string">&quot;joint_forearm&quot;</span>] * <span class="number">1.6000</span> + jnt_cmd_[<span class="string">&quot;joint_wrist_pitching&quot;</span>]) *</span><br><span class="line">        <span class="number">0.6250</span> - jnt_cmd_[<span class="string">&quot;joint_wrist_rotation&quot;</span>] * <span class="number">0.7917</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Because autuator&#x27;s direction is not unified, the signs of positive and</span></span><br><span class="line"><span class="comment">// negative may have problem in the following formula.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArmRobotHardware::transPositionActuatorToJoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_lift&quot;</span>]    = -act_pos_[<span class="string">&quot;actuator_lift&quot;</span>] * <span class="number">0.010</span>;</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_waist&quot;</span>]   =  act_pos_[<span class="string">&quot;actuator_waist&quot;</span>];</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_big_arm&quot;</span>] = -act_pos_[<span class="string">&quot;actuator_big_arm&quot;</span>] * <span class="number">0.600</span>;</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_forearm&quot;</span>] = -(act_pos_[<span class="string">&quot;actuator_forearm&quot;</span>] +</span><br><span class="line">        act_pos_[<span class="string">&quot;actuator_big_arm&quot;</span>]);</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_wrist_pitching&quot;</span>] = -(-act_pos_[<span class="string">&quot;actuator_big_arm&quot;</span>] * <span class="number">0.6400</span></span><br><span class="line">        - act_pos_[<span class="string">&quot;actuator_forearm&quot;</span>] * <span class="number">1.6000</span> +</span><br><span class="line">        (act_pos_[<span class="string">&quot;actuator_wrist_left&quot;</span>] + act_pos_[<span class="string">&quot;actuator_wrist_right&quot;</span>]) *</span><br><span class="line">        <span class="number">0.8000</span>);</span><br><span class="line">    jnt_pos_[<span class="string">&quot;joint_wrist_rotation&quot;</span>] = (act_pos_[<span class="string">&quot;actuator_wrist_left&quot;</span>] -</span><br><span class="line">        act_pos_[<span class="string">&quot;actuator_wrist_right&quot;</span>]) * <span class="number">0.6316</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现定制的read和write函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArmRobotHardware::read</span><span class="params">(<span class="keyword">const</span> ros::Time, <span class="keyword">const</span> ros::Duration period)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        <span class="built_in">publishArmJState</span>(<span class="number">0x01</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">transPositionActuatorToJoint</span>();</span><br><span class="line"></span><br><span class="line">    callback_queue_.<span class="built_in">callAvailable</span>(ros::<span class="built_in">WallDuration</span>(<span class="number">1</span> / freq_ / <span class="number">3</span>));</span><br><span class="line">    ros::Time current_time = ros::Time::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((current_time - jnt_stamp_[i]).<span class="built_in">toSec</span>() &gt; <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ROS_WARN_STREAM</span>(<span class="string">&quot;Reading timeout!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArmRobotHardware::write</span><span class="params">(<span class="keyword">const</span> ros::Time, <span class="keyword">const</span> ros::Duration period)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">transPositionJointToActuator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        <span class="built_in">publishArmCommand</span>(<span class="number">0x01</span>, i, act_cmd_[act_name_[i]]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;joint_command&quot;</span>);</span><br><span class="line">    <span class="built_in">ROS_INFO_STREAM</span>(</span><br><span class="line">        <span class="string">&quot;lift: &quot;</span>    &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_lift&quot;</span>]    &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot;waist: &quot;</span>   &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_waist&quot;</span>]   &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot;big_arm: &quot;</span> &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_big_arm&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot;forearm: &quot;</span> &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_forearm&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot;wrist_pitching: &quot;</span> &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_wrist_pitching&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot;wrist_rotation: &quot;</span> &lt;&lt; jnt_cmd_[<span class="string">&quot;joint_wrist_rotation&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    callback_queue_.<span class="built_in">callAvailable</span>(ros::<span class="built_in">WallDuration</span>(<span class="number">1</span> / freq_ / <span class="number">3</span>));</span><br><span class="line">    ros::Time current_time = ros::Time::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((current_time - jnt_stamp_[i]).<span class="built_in">toSec</span>() &gt; <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ROS_WARN_STREAM</span>(<span class="string">&quot;Writing timeout!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_hardware_controller_config/config/xm_arm_hardware_joint_trajectory.yaml</p></blockquote><p>Joint Trajectory Controller可以提供经过时间差值的连续关节轨迹，是MoveIT!中默认的数据接口。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="attr">arm_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;position_controllers/JointTrajectoryController&quot;</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_lift</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_waist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_big_arm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_forearm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_wrist_pitching</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_wrist_rotation</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_hardware_controller_config/config/xm_arm_hardware_joint_states.yaml</p></blockquote><p>这个与上面所仿真使用的Controller是一样的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="attr">joint_state_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">    <span class="attr">publish_rate:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_hardware_controller_config/config/xm_arm_hardware_joint_names.yaml</p></blockquote><p>加载关节名字到ROS的参数服务器中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="attr">joint_names:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_lift</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_waist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_big_arm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_forearm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_wrist_pitching</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">joint_wrist_rotation</span></span><br></pre></td></tr></table></figure><p>以上就是硬件接口层的全部内容了。作为整个机械臂软件架构最底层的部分，它的重要性不言而喻。根据我之前开发机械臂的经验，只有编写出稳定且鲁棒的的硬件接口层，才能为之上的运动规划提供强有力的保证。否则，等到机械臂出现暴走失控的情况的时候就麻烦了（我之前就曾入过这样的坑！）。</p><h4 id="运动规划层"><a href="#运动规划层" class="headerlink" title="运动规划层"></a>运动规划层</h4><p>运动规划层在机械臂的自主抓取中扮演了非常重要的角色。而对于运动规划本身来说，里面涉及了非常多的专业知识，比如运动学正逆解算、碰撞检测算法、3D环境感知、动作规划算法等，以上任何一个方面都需要我们长时间的积累才能理解清楚，而对于那些想立马上手机械臂的初学者来说，这简直就是一个灾难。</p><p>而幸运的是，ROS提供了强大且易用的<a href="http://moveit.ros.org">MoveIt!</a>包，它可以让你在较短的时间内实现仿真乃至实体机械臂的运动学规划演示。</p><p>首先，简要地介绍一下什么是MoveIt!。以下是MoveIt官网给出的定义：</p><blockquote><p>MoveIt! is state of the art software for mobile manipulation, incorporating the latest advances in motion planning, manipulation, 3D perception, kinematics, control and navigation. It provides an easy-to-use platform for developing advanced robotics applications, evaluating new robot designs and building integrated robotics products for industrial, commercial, R&amp;D and other domains.</p></blockquote><p>概括来说，MoveIt!是ROS中与移动操作相关的组件包的集合。它包含了运动规划、操作控制、3D感知，运动学，碰撞检测等。当然，最重要的是MoveIt!提供了非常友好的配置和调试界面。</p><p>下图是MoveIt的总体框架：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/move_group.png" alt="MoveIt! Architecture"></p><p>这张图我在学习MoveIt!的时候看过很多遍，理解这个架构图对于学习MoveIt!非常重要。从图中可以看到，<strong>move_group</strong>是MoveIt!最核心的部分。它将其他独立的组件集成到一起，为使用者提供了一系列可以使用的命令和服务。</p><ul><li><p>用户接口：<br>用户可以使用C++、Python或者GUI来访问<strong>move_group</strong>。一般对于初学者来说，GUI和Python的使用会更多一些。</p></li><li><p>配置：<br><strong>move_group</strong>本质上还是一个ROS的节点，它需要使用ROS的参数服务器来获取以下三种信息。</p><ul><li><p>URDF：<br><strong>move_group</strong>需要机械臂的URDF文件来进行运动规划。</p></li><li><p>SRDF：<br><strong>move_group</strong>在启动时会寻找机械臂的SRDF文件，它可以通过使用MoveIt! Setup Assistant自动生成。</p></li><li><p>MoveIt!配置：<br><strong>move_group</strong>在启动时会加载机械臂的关节限位、动力学、运动规划、感知以及其他相关信息。所有以上的配置信息都可以通过使用MoveIt! Setup Assistant自动生成。</p></li></ul></li><li><p>机器人接口：<br><strong>move_group</strong>使用ROS中的Topic和Action两种机制来与机械臂进行数据通信。它可以获取当前机械臂的位置信息，点云数据以及其他传感器数据，并且发送命令给机械臂的Controller。</p><ul><li><p>关节状态信息：<br><strong>move_group</strong>会监听机械臂的/joint_states主题来获取当前的状态信息。注意：<strong>move_group</strong>只管监听，你需要自己给机械臂配置好<a href="http://wiki.ros.org/joint_state_controller">Joint State Controller</a>。</p></li><li><p>坐标转换信息：<br><strong>move_group</strong>可以订阅机械臂的TF主题来确定机械臂内部各关节之间的位置变换关系。跟上面一样，你需要自己运行<a href="http://wiki.ros.org/robot_state_publisher">Robot State Publier</a>节点来发布坐标转换。</p></li><li><p>控制器接口：<br><strong>move_group</strong>使用<a href="http://docs.ros.org/kinetic/api/control_msgs/html/action/FollowJointTrajectory.html">Follow Joint Trajectory</a>类型的Action接口来与Controller进行数据通信。<strong>move_group</strong>自己是不带Action接口的，它是使用了一个特殊的插件来发布上述Follow Joint Trajectory类型的Action，而对于机械臂来说，你依然需要自己配置上述类型的Controller来订阅机械臂的数据。</p></li><li><p>规划场景：<br>Planning Scene指的是机械臂本身以及其周围环境的表示。</p></li><li><p>扩展能力：<br><strong>move_group</strong>的所有组件都是以独立插件的形式实现的，而且这些插件可以通过使用ROS的参数文件或插件库来进行配置，这使得<strong>move_group</strong>拥有了强大的定制以及可扩展能力。</p></li></ul></li></ul><p>接下来，我们介绍一下<strong>Motion Planning</strong>。</p><p>这里我引用古月居前辈对运动规划的解释：</p><blockquote><p>假设我们已知机器人的初始姿态和目标姿态，以及机器人和环境的模型参数，那么我们就可以通过一定的算法，在躲避环境障碍物和放置自身碰撞的同时，找到一条到达目标姿态的较优路径，这种算法就称为机器人的运动规划。机器人和环境的模型静态参数由URDF文件提供，在默写场景下还需要加入3D摄像头、激光雷达来动态检测环境变化，避免与动态障碍物发生碰撞。</p></blockquote><p>在MoveIt!中，运动规划算法是由运动规划器算出来的。当然，运动规划算法有很多，每一个运动规划器都是MoveIt的一个插件，可以根据需求选用不同的规划算法。MoveIt!默认使用的是<a href="http://ompl.kavrakilab.org">OMPL</a>。OMPL(Open Motion Planning Library)是开源运动规划库的简写，它提供基于随机化的运动规划器。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/motion_planner.png" alt="Motion Planning Pipeline"></p><ul><li><p>运动规划请求：<br>在让运动规划器进行运动规划之前，我们要先发送一个运动规划的请求。这个请求可以是新的机械臂或末端执行器的位置。为了让运动规划器规划出来的轨迹符合要求，我们需要指定一些约束条件：</p><ul><li><p>位置约束：<br>约束机械臂Link的位置。</p></li><li><p>方向约束：<br>约束机械臂Link的方向。</p></li><li><p>可见性约束：<br>约束Link上的某点在某些区域的可见性。</p></li><li><p>关节约束：<br>约束Joint的运动范围。</p></li><li><p>自定义约束：<br>使用自定义的回调函数来指定约束条件。</p></li></ul></li><li><p>运动规划结果：<br><strong>move_group</strong>节点最终将会根据上面的运动规划请求，生成一条运动轨迹。这条轨迹可以使机械臂移动到预想的目标位置。请注意：<strong>move_group</strong>输出的是一条轨迹，而不是路径。对于机械臂来说，路径是使末端执行器移动到目标位置的过程中，中间所经历的一系列独立的位置点。而轨迹则是在路径的基础上，通过加入速度、加速度约束以及时间参数来使机械臂运动的更加平滑。</p></li><li><p>规划请求适配器：<br>在运动规划器的输入输出端分别有两个规划请求适配器。它们的作用分别是对规划请求和规划结果进行预处理和后期处理。MoveIt!提供了几种默认的适配器来完成一些特定的功能。</p><ul><li><p>FixStartStateBounds:<br>当机械臂的一个或多个关节的初始状态<strong>稍微</strong>超出了URDF文件中所定义的Joint Limits后，为了能让运动规划器可以运行，FixStartStateBounds适配器会通过将关节状态移动到Joint Limits处来解决这个问题。不过，如果机械臂关节的偏差很大的话，这种靠软件方式修正的方式就不适用了。</p></li><li><p>FixWorkspaceBounds:<br>这个适配器会默认地生成一个10x10x10立方米的机械臂规划空间。</p></li><li><p>FixStartStateCollision:<br>如果已有的关节配置文件会导致碰撞，这个适配器可以采样新的配置文件，并根据摇摆因子来修改已有的配置文件，从而保证新的机械臂不会发生碰撞。</p></li><li><p>FixStartStatePathConstraints:<br>如果机械臂的初始姿态不满足路径约束，这个适配器可以找到附近满足约束的姿态作为机械臂的初始姿态。</p></li><li><p>AddTimeParameterization:<br>这个适配器非常重要。它把从运动规划器中输出的空间路径按等距离进行划分，并在其中添加加速度、加速度约束，以及时间戳等必要信息。</p></li></ul></li></ul><p><strong>Planning Scene</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/planning_scene.png" alt="Planning Scene"></p><p>Planning Scene用来表示机械臂周围的外部世界并且保存机械臂自己本身的状态。它通过监听对应的Topic来获取关节状态信息、传感器信息。并可以根据传感器信息和用户的输入，生成机器人周围3D世界空间的表示。</p><p><strong>3D Perception</strong></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/world_geometry.png" alt="3D Perception"></p><p>简单来说，3D Perception使用插件来获取点云和深度图像数据，并据此生成<a href="http://octomap.github.io">OctoMap</a>，为之后机械臂的碰撞检测提供基础。</p><p><strong>Kinematics</strong></p><p>运动学算法是机械臂各种算法中的核心，尤其是反向运动学算法IK(Inverse Kinematics)。MoveIt!使用插件的形式可以让用户灵活的选择需要使用的反向运动学算法，也可以选择自己的算法。</p><p><strong>Collision Checking</strong></p><p>MoveIt!使用CollisionWorld对象进行碰撞检测，采用<a href="http://gamma.cs.unc.edu/FCL/fcl_docs/webpage/generated/index.html">FCL</a>(Flexible Collision Library)功能包。碰撞检测是运动规划中最耗时的运算，往往会占用90%左右的时间，为了减少计算量，可以通过设置ACM(Allowed Collision Matrix)来进行优化。</p><hr><p>好的，讲了这么多抽象的概念，就让我们像上一节讲ROS Control一样，用具体的例子来实践一下。</p><p>首先，你需要机械臂的URDF文件，而且保证里面所包含的Link(连杆)、Joint(关节)、运动学参数、动力学参数、可视化和碰撞模型没有问题。这里要注意一下，通过<a href="http://wiki.ros.org/sw_urdf_exporter">SolidWorks插件</a>导出的URDF文件，它默认使用的碰撞检测模型和可视化模型是一样的。为了提高运动规划的执行速度，你可以使用<a href="http://www.meshlab.net">MeshLab</a>来简化模型（.stl或.dae零件）的点和面。</p><blockquote><p>xm_arm_description/urdf/xmbot_with_arm.urdf.xacro</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;xmbot&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The following xacro:include files set up definitions of parts of the robot body --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/materials.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_wheel.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_arm.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_gripper.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_kinect.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xm_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Attach the base --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">name</span>=<span class="string">&quot;base&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Add the drive wheels --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wheel</span> <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;1&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">origin_xyz</span>=<span class="string">&quot;0.19419 0.00022708 -0.042&quot;</span> <span class="attr">origin_rpy</span>=<span class="string">&quot;-1.5708 0 -1.5708&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_origin_xyz</span>=<span class="string">&quot;8.0491E-16 -1.3878E-17 -0.0042221&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_ixx</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_ixy</span>=<span class="string">&quot;-3.4634E-22&quot;</span> <span class="attr">inert_ixz</span>=<span class="string">&quot;-7.3136E-19&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_iyy</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_iyz</span>=<span class="string">&quot;8.9342E-21&quot;</span> <span class="attr">inert_izz</span>=<span class="string">&quot;0.00029643&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wheel</span> <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;2&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">origin_xyz</span>=<span class="string">&quot;-0.096968 -0.16833 -0.042&quot;</span> <span class="attr">origin_rpy</span>=<span class="string">&quot;-1.5708 0 2.618&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_origin_xyz</span>=<span class="string">&quot;-1.3878E-17 1.3878E-17 -0.0042221&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_ixx</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_ixy</span>=<span class="string">&quot;1.0391E-20&quot;</span> <span class="attr">inert_ixz</span>=<span class="string">&quot;1.3553E-20&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_iyy</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_iyz</span>=<span class="string">&quot;4.616E-21&quot;</span> <span class="attr">inert_izz</span>=<span class="string">&quot;0.00029643&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wheel</span> <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;3&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">origin_xyz</span>=<span class="string">&quot;-0.097362 0.1681 -0.042&quot;</span>   <span class="attr">origin_rpy</span>=<span class="string">&quot;-1.5708 0 0.5236&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_origin_xyz</span>=<span class="string">&quot;1.4572E-15 0 -0.0042221&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_ixx</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_ixy</span>=<span class="string">&quot;-3.3256E-21&quot;</span> <span class="attr">inert_ixz</span>=<span class="string">&quot;2.7105E-20&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">inert_iyy</span>=<span class="string">&quot;0.00030696&quot;</span> <span class="attr">inert_iyz</span>=<span class="string">&quot;-1.1933E-20&quot;</span> <span class="attr">inert_izz</span>=<span class="string">&quot;0.00029643&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Attach the arm --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lift</span>  <span class="attr">name</span>=<span class="string">&quot;lift&quot;</span>  <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">color</span>=<span class="string">&quot;OffWhite&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">waist</span> <span class="attr">name</span>=<span class="string">&quot;waist&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;lift&quot;</span> <span class="attr">color</span>=<span class="string">&quot;Orange&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">big_arm</span> <span class="attr">name</span>=<span class="string">&quot;big_arm&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;waist&quot;</span> <span class="attr">color</span>=<span class="string">&quot;OffWhite&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">forearm</span> <span class="attr">name</span>=<span class="string">&quot;forearm&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;big_arm&quot;</span> <span class="attr">color</span>=<span class="string">&quot;Orange&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wrist_pitching</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitching&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;forearm&quot;</span> <span class="attr">color</span>=<span class="string">&quot;OffWhite&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wrist_rotation</span> <span class="attr">name</span>=<span class="string">&quot;wrist_rotation&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;wrist_pitching&quot;</span> <span class="attr">color</span>=<span class="string">&quot;OffWhite&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Attach the gripper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finger_left</span>  <span class="attr">name</span>=<span class="string">&quot;finger_left&quot;</span>  <span class="attr">parent</span>=<span class="string">&quot;wrist_rotation&quot;</span> <span class="attr">color</span>=<span class="string">&quot;Orange&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finger_right</span> <span class="attr">name</span>=<span class="string">&quot;finger_right&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;wrist_rotation&quot;</span> <span class="attr">color</span>=<span class="string">&quot;Orange&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gripper_frame</span> <span class="attr">name</span>=<span class="string">&quot;gripper_frame&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;wrist_rotation&quot;</span> <span class="attr">color</span>=<span class="string">&quot;OffWhite&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Attach the kinect --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head_kinect</span> <span class="attr">name</span>=<span class="string">&quot;kinect&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Attach the laser --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">laser</span> <span class="attr">name</span>=<span class="string">&quot;laser&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;base&quot;</span> <span class="attr">color</span>=<span class="string">&quot;DarkGrey&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后，运行下面命令来启动MoveIt! Setup Assistant。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; rosrun moveit_setup_assistant moveit_setup_assistant</span><br></pre></td></tr></table></figure><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/2_xmbot_arm/setup_assistant_start.png" alt="MoveIt! Setup Assistant"></p><p>之后你可以根据<a href="http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/setup_assistant/setup_assistant_tutorial.html">MoveIt! Setaup Assistant官网教程</a>完成机械臂的配置。虽然这里我没有详细讲解配置的每一步（其实是我忘了截图），但这一步是非常重要的。我之前就配置过很多次，但总有问题。所以说配置机械臂MoveIt!参数是需要一定经验的。这里，我主要讲两个我在配置过程中遇到的问题，希望对你有所帮助。</p><ul><li><p>交互式Marker没有在末端执行器上生成：<br>这个问题曾经困扰了我很久，后来我在Google上搜索了一段时间，终于找到问题的原因和解决办法。出现这个问题的原因是我在配置末端执行器的时候，<strong>parent_link</strong>没有选择<strong>arm</strong>组中的link，而是选了<strong>gripper</strong>组中的。因此，解决办法就是选择<strong>arm</strong>组中的最顶端的link填入到<strong>parent_link</strong>中就没问题了。</p></li><li><p>MoveIt!根据点云数据生成的OctoMap在Rviz中的位置、方向与实际不符：<br>这个问题的原因，你可以通过可视化Rviz中的TF插件来看到。每个Link都有自己的XYZ方向，如果你机器人的Camera Link的XYZ方向恰好与Rviz所使用的XYZ方向不符，就会出现上述问题。我的解决办法是在URDF中再添加一个或两个虚拟的Link来修正方向上的偏差。</p></li></ul><p>打开用MoveIt! Setup Assistant生成的包，我们可以发现里面有config和launch两个文件夹。这里简要介绍下每个文件的功能。</p><blockquote><p>xm_arm_moveit_config/config/controllers.yaml</p></blockquote><p>这个文件指定了MoveIt!向Controller发布数据的接口。注意：这个配置文件不是用MoveIt! Setup Assistant自动生成的，你需要自己添加。而且<strong>name</strong>要与<a href="https://github.com/myyerrol/xm-arm-workspace/blob/master/xm_arm_hardware_controller_config/config/xm_arm_hardware_joint_trajectory.yaml">Controller配置文件</a>的<strong>namespace</strong>保持一致。否则，MoveIt!输出的轨迹是没法传送给物理机械臂的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">controller_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xm_arm/arm_controller</span></span><br><span class="line">    <span class="attr">action_ns:</span> <span class="string">follow_joint_trajectory</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">FollowJointTrajectory</span></span><br><span class="line">    <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_lift</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_waist</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_big_arm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_forearm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_wrist_pitching</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_wrist_rotation</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/fake_controllers.yaml</p></blockquote><p>这是虚拟控制器配置文件，方便我们在没有实体机械臂，甚至没有任何模拟器开启的情况下也能运行MoveIt!。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">controller_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fake_xm_arm_controller</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_lift</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_waist</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_big_arm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_forearm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_wrist_pitching</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_wrist_rotation</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fake_xm_gripper_controller</span></span><br><span class="line">    <span class="attr">joints:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_finger_left</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">joint_finger_right</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/joint_limits.yaml</p></blockquote><p>这里记录了机械臂各关节的位置、速度、加速度的极限。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># joint_limits.yaml allows the dynamics properties specified in the URDF to be overwritten or augmented as needed</span></span><br><span class="line"><span class="comment"># Specific joint properties can be changed with the keys [max_position, min_position, max_velocity, max_acceleration]</span></span><br><span class="line"><span class="comment"># Joint limits can be turned off with [has_velocity_limits, has_acceleration_limits]</span></span><br><span class="line"><span class="attr">joint_limits:</span></span><br><span class="line">  <span class="attr">joint_big_arm:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_finger_left:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_finger_right:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_forearm:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_lift:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_waist:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_wrist_pitching:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">joint_wrist_rotation:</span></span><br><span class="line">    <span class="attr">has_velocity_limits:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_velocity:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">has_acceleration_limits:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_acceleration:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/kinematics.yaml</p></blockquote><p>记录运动规划的配置参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="attr">kinematics_solver:</span> <span class="string">kdl_kinematics_plugin/KDLKinematicsPlugin</span></span><br><span class="line">  <span class="attr">kinematics_solver_search_resolution:</span> <span class="number">0.005</span></span><br><span class="line">  <span class="attr">kinematics_solver_timeout:</span> <span class="number">0.05</span></span><br><span class="line">  <span class="attr">kinematics_solver_attempts:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/ompl_planning.yaml</p></blockquote><p>记录了OMPL算法的各种配置参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">planner_configs:</span></span><br><span class="line">  <span class="attr">SBLkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::SBL</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">  <span class="attr">ESTkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::EST</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0 setup()</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span>  <span class="comment"># When close to goal select goal, with this probability. default: 0.05</span></span><br><span class="line">  <span class="attr">LBKPIECEkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::LBKPIECE</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">border_fraction:</span> <span class="number">0.9</span>  <span class="comment"># Fraction of time focused on boarder default: 0.9</span></span><br><span class="line">    <span class="attr">min_valid_path_fraction:</span> <span class="number">0.5</span>  <span class="comment"># Accept partially valid moves above fraction. default: 0.5</span></span><br><span class="line">  <span class="attr">BKPIECEkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::BKPIECE</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">border_fraction:</span> <span class="number">0.9</span>  <span class="comment"># Fraction of time focused on boarder default: 0.9</span></span><br><span class="line">    <span class="attr">failed_expansion_score_factor:</span> <span class="number">0.5</span>  <span class="comment"># When extending motion fails, scale score by factor. default: 0.5</span></span><br><span class="line">    <span class="attr">min_valid_path_fraction:</span> <span class="number">0.5</span>  <span class="comment"># Accept partially valid moves above fraction. default: 0.5</span></span><br><span class="line">  <span class="attr">KPIECEkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::KPIECE</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span>  <span class="comment"># When close to goal select goal, with this probability. default: 0.05</span></span><br><span class="line">    <span class="attr">border_fraction:</span> <span class="number">0.9</span>  <span class="comment"># Fraction of time focused on boarder default: 0.9 (0.0,1.]</span></span><br><span class="line">    <span class="attr">failed_expansion_score_factor:</span> <span class="number">0.5</span>  <span class="comment"># When extending motion fails, scale score by factor. default: 0.5</span></span><br><span class="line">    <span class="attr">min_valid_path_fraction:</span> <span class="number">0.5</span>  <span class="comment"># Accept partially valid moves above fraction. default: 0.5</span></span><br><span class="line">  <span class="attr">RRTkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::RRT</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span>  <span class="comment"># When close to goal select goal, with this probability? default: 0.05</span></span><br><span class="line">  <span class="attr">RRTConnectkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::RRTConnect</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">  <span class="attr">RRTstarkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::RRTstar</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span>  <span class="comment"># When close to goal select goal, with this probability? default: 0.05</span></span><br><span class="line">    <span class="attr">delay_collision_checking:</span> <span class="number">1</span>  <span class="comment"># Stop collision checking as soon as C-free parent found. default 1</span></span><br><span class="line">  <span class="attr">TRRTkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::TRRT</span></span><br><span class="line">    <span class="attr">range:</span> <span class="number">0.0</span>  <span class="comment"># Max motion added to tree. ==&gt; maxDistance_ default: 0.0, if 0.0, set on setup()</span></span><br><span class="line">    <span class="attr">goal_bias:</span> <span class="number">0.05</span>  <span class="comment"># When close to goal select goal, with this probability? default: 0.05</span></span><br><span class="line">    <span class="attr">max_states_failed:</span> <span class="number">10</span>  <span class="comment"># when to start increasing temp. default: 10</span></span><br><span class="line">    <span class="attr">temp_change_factor:</span> <span class="number">2.0</span>  <span class="comment"># how much to increase or decrease temp. default: 2.0</span></span><br><span class="line">    <span class="attr">min_temperature:</span> <span class="number">10e-10</span>  <span class="comment"># lower limit of temp change. default: 10e-10</span></span><br><span class="line">    <span class="attr">init_temperature:</span> <span class="number">10e-6</span>  <span class="comment"># initial temperature. default: 10e-6</span></span><br><span class="line">    <span class="attr">frountier_threshold:</span> <span class="number">0.0</span>  <span class="comment"># dist new state to nearest neighbor to disqualify as frontier. default: 0.0 set in setup()</span></span><br><span class="line">    <span class="attr">frountierNodeRatio:</span> <span class="number">0.1</span>  <span class="comment"># 1/10, or 1 nonfrontier for every 10 frontier. default: 0.1</span></span><br><span class="line">    <span class="attr">k_constant:</span> <span class="number">0.0</span>  <span class="comment"># value used to normalize expresssion. default: 0.0 set in setup()</span></span><br><span class="line">  <span class="attr">PRMkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::PRM</span></span><br><span class="line">    <span class="attr">max_nearest_neighbors:</span> <span class="number">10</span>  <span class="comment"># use k nearest neighbors. default: 10</span></span><br><span class="line">  <span class="attr">PRMstarkConfigDefault:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">geometric::PRMstar</span></span><br><span class="line"><span class="attr">xm_arm:</span></span><br><span class="line">  <span class="attr">planner_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SBLkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ESTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LBKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">BKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">KPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTConnectkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTstarkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TRRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMstarkConfigDefault</span></span><br><span class="line">  <span class="attr">projection_evaluator:</span> <span class="string">joints(joint_lift,joint_waist)</span></span><br><span class="line">  <span class="attr">longest_valid_segment_fraction:</span> <span class="number">0.05</span></span><br><span class="line"><span class="attr">xm_gripper:</span></span><br><span class="line">  <span class="attr">planner_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SBLkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ESTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LBKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">BKPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">KPIECEkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTConnectkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RRTstarkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TRRTkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMkConfigDefault</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PRMstarkConfigDefault</span></span><br><span class="line">  <span class="attr">projection_evaluator:</span> <span class="string">joints(joint_finger_left,joint_finger_right)</span></span><br><span class="line">  <span class="attr">longest_valid_segment_fraction:</span> <span class="number">0.05</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/sensors_rgbd.yaml</p></blockquote><p>这个文件用来配置MoveIt!的传感器插件，它可以使MoveIt!订阅点云数据来生成机械臂避障用的OctoMap。注意：这个配置文件不是用MoveIt! Setup Assistant自动生成的，你需要自己添加。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sensors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">sensor_plugin:</span> <span class="string">occupancy_map_monitor/PointCloudOctomapUpdater</span></span><br><span class="line">  <span class="attr">point_cloud_topic:</span> <span class="string">/head_kinect/depth/points</span></span><br><span class="line">  <span class="attr">max_range:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">padding_offset:</span> <span class="number">0.01</span></span><br><span class="line">  <span class="attr">padding_scale:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">point_subsample:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">filtered_cloud_topic:</span> <span class="string">output_cloud</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/config/xmbot.srdf</p></blockquote><p>这是MoveIt!的主配置文件。这里面记录了我们使用MoveIt! Setup Assistant配置时的参数，里面包含了组群、位姿、末端执行器、虚拟关节，以及碰撞免测矩阵的定义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--This does not replace URDF, and is not an extension of URDF.</span></span><br><span class="line"><span class="comment">    This is a format for representing semantic information about the robot structure.</span></span><br><span class="line"><span class="comment">    A URDF file must exist for this robot as well, where the joints and the links that are referenced are defined</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;xmbot&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--GROUPS: Representation of a set of joints and links. This can be useful for specifying DOF to plan for, defining arms, end effectors, etc--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--LINKS: When a link is specified, the parent joint of that link (if it exists) is automatically included--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JOINTS: When a joint is specified, the child link of that joint (which will always exist) is automatically included--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--CHAINS: When a chain is specified, all the links along the chain (including endpoints) are included in the group. Additionally, all the joints that are parents to included links are also included. This means that joints along the chain and the parent joint of the base link are included in the group--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SUBGROUPS: Groups can also be formed by referencing to already defined group names--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;xm_arm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_lift&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_waist&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_big_arm&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_forearm&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_pitching&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_rotation&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">chain</span> <span class="attr">base_link</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">tip_link</span>=<span class="string">&quot;link_gripper_frame&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;xm_gripper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;link_finger_left&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;link_finger_right&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_finger_left&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_finger_right&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--GROUP STATES: Purpose: Define a named state for a particular group, in terms of joint values. This is useful to define states like &#x27;folded arms&#x27;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group_state</span> <span class="attr">name</span>=<span class="string">&quot;initial&quot;</span> <span class="attr">group</span>=<span class="string">&quot;xm_arm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_big_arm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.309&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_forearm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.182&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_lift&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_waist&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-0.96&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_pitching&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_rotation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group_state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group_state</span> <span class="attr">name</span>=<span class="string">&quot;prepare&quot;</span> <span class="attr">group</span>=<span class="string">&quot;xm_arm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_big_arm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.309&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_forearm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.182&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_lift&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_waist&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_pitching&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_rotation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group_state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group_state</span> <span class="attr">name</span>=<span class="string">&quot;straight&quot;</span> <span class="attr">group</span>=<span class="string">&quot;xm_arm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_big_arm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_forearm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_lift&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_waist&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_pitching&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint_wrist_rotation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group_state</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--END EFFECTOR: Purpose: Represent information about an end effector.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">end_effector</span> <span class="attr">name</span>=<span class="string">&quot;xm_effector&quot;</span> <span class="attr">parent_link</span>=<span class="string">&quot;link_gripper_frame&quot;</span> <span class="attr">group</span>=<span class="string">&quot;xm_gripper&quot;</span> <span class="attr">parent_group</span>=<span class="string">&quot;xm_arm&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--VIRTUAL JOINT: Purpose: this element defines a virtual joint between a robot link and an external frame of reference (considered fixed with respect to the robot)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">virtual_joint</span> <span class="attr">name</span>=<span class="string">&quot;base_odom&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span> <span class="attr">parent_frame</span>=<span class="string">&quot;odom&quot;</span> <span class="attr">child_link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DISABLE COLLISIONS: By default it is assumed that any link of the robot could potentially come into collision with any other link in the robot. This tag disables collision checking between a specified pair of links. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_footprint&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_finger_left&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_finger_right&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_big_arm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_finger_left&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_finger_right&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_finger_left&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_finger_left&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_finger_right&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_finger_right&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_forearm&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_kinect&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_laser&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_lift&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_waist&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_1&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_2&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wheel_3&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Never&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disable_collisions</span> <span class="attr">link1</span>=<span class="string">&quot;link_wrist_pitching&quot;</span> <span class="attr">link2</span>=<span class="string">&quot;link_wrist_rotation&quot;</span> <span class="attr">reason</span>=<span class="string">&quot;Adjacent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面，我们打开launch文件夹，你会发现里面有很多launch和xml文件。这时候不要慌，因为MoveIt!的模块化设计思想，它将不同的功能进行拆分并放到不同的文件中，所以文件看起来很多，但每一个都不是很长。这里，我只介绍其中几个重要的文件。</p><blockquote><p>xm_arm_moveit_config/launch/demo.launch</p></blockquote><p>这个launch文件是运行MoveIt!的根节点，它里面还包含了其他的launch文件。包括最为重要的move_group.launch。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- By default, we do not start a database (it can be large) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;db&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- By default, we are not in debug mode --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load the URDF, SRDF and other .yaml configuration files on the param server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/planning_context.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;load_robot_description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- If needed, broadcast static tf for robot root --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- We do not have a robot connected, so publish fake joint states --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;/use_gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">param</span>=<span class="string">&quot;/source_list&quot;</span>&gt;</span>[/move_group/fake_controller_joint_states]<span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Given the published joint states, publish tf for the robot links --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;true&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/move_group.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;allow_trajectory_execution&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;fake_execution&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg debug)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Run Rviz and load the default config to see the state of the move_group node --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/moveit_rviz.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;config&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg debug)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- If database loading was enabled, start mongodb as well --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/default_warehouse_db.launch&quot;</span> <span class="attr">if</span>=<span class="string">&quot;$(arg db)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/launch/move_group.launch</p></blockquote><p>这个launch文件里面设置了很多运动规划时的参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/planning_context.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- GDB Debug Option --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg debug)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;launch_prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span>     <span class="attr">if</span>=<span class="string">&quot;$(arg debug)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;launch_prefix&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;gdb -x $(find xm_arm_moveit_config)/launch/gdb_settings.gdb --ex run --args&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Verbose Mode Option --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">default</span>=<span class="string">&quot;$(arg debug)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg info)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;command_args&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span>     <span class="attr">if</span>=<span class="string">&quot;$(arg info)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;command_args&quot;</span> <span class="attr">value</span>=<span class="string">&quot;--debug&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- move_group settings --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;allow_trajectory_execution&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;fake_execution&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;max_safe_path_cost&quot;</span> <span class="attr">default</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;jiggle_fraction&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;publish_monitored_planning_scene&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Planning Functionality --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">ns</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/planning_pipeline.launch.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;pipeline&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ompl&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Trajectory Execution Functionality --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">ns</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/trajectory_execution.launch.xml&quot;</span> <span class="attr">if</span>=<span class="string">&quot;$(arg allow_trajectory_execution)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_manage_controllers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xmbot&quot;</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg fake_execution)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fake&quot;</span> <span class="attr">if</span>=<span class="string">&quot;$(arg fake_execution)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Sensors Functionality --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">ns</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/launch/sensor_manager.launch.xml&quot;</span> <span class="attr">if</span>=<span class="string">&quot;$(arg allow_trajectory_execution)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_sensor_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xmbot&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Start the actual move_group node/action server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">launch-prefix</span>=<span class="string">&quot;$(arg launch_prefix)&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;moveit_ros_move_group&quot;</span> <span class="attr">type</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;$(arg command_args)&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Set the display variable, in case OpenGL code is used internally --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;DISPLAY&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(optenv DISPLAY :0)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;allow_trajectory_execution&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg allow_trajectory_execution)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max_safe_path_cost&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg max_safe_path_cost)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;jiggle_fraction&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg jiggle_fraction)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MoveGroup capabilities to load --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;capabilities&quot;</span> <span class="attr">value</span>=<span class="string">&quot;move_group/MoveGroupCartesianPathService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupExecuteService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupKinematicsService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupMoveAction</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupPickPlaceAction</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupPlanService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupQueryPlannersService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupStateValidationService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/MoveGroupGetPlanningSceneService</span></span></span><br><span class="line"><span class="string"><span class="tag">      move_group/ClearOctomapService</span></span></span><br><span class="line"><span class="string"><span class="tag">      &quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planning_scene_monitor/publish_planning_scene&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg publish_monitored_planning_scene)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planning_scene_monitor/publish_geometry_updates&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg publish_monitored_planning_scene)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planning_scene_monitor/publish_state_updates&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg publish_monitored_planning_scene)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planning_scene_monitor/publish_transforms_updates&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg publish_monitored_planning_scene)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/launch/planning_context.launch</p></blockquote><p>这里面使用了机械臂的URDF和SRDF文件，以及运动学解算库。不建议修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;load_robot_description&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The name of the parameter under which the URDF is loaded --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">default</span>=<span class="string">&quot;robot_description&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load universal robot description format (URDF) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">if</span>=<span class="string">&quot;$(arg load_robot_description)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$(arg robot_description)&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find xm_arm_description)/urdf/xmbot_with_arm.urdf&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The semantic description that corresponds to the URDF --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;$(arg robot_description)_semantic&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/config/xmbot.srdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load updated joint limits (override information from URDF) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;$(arg robot_description)_planning&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/config/joint_limits.yaml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load default settings for kinematics; these settings are overridden by settings in a node&#x27;s namespace --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;$(arg robot_description)_kinematics&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/config/kinematics.yaml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/launch/xmbot_moveit_controller_manager.launch.xml</p></blockquote><p>这个文件用来指定Controller配置文件的位置。注意：这个文件是MoveIt! Setup Assistant自动生成的，但我记得里面什么也没写。你需要下面例子中的那样进行配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Set the param that trajectory_execution_manager needs to find the controller plugin --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">default</span>=<span class="string">&quot;moveit_simple_controller_manager/MoveItSimpleControllerManager&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;moveit_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg moveit_controller_manager)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load controller_list --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_controller_manager&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_controller_manager&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg use_controller_manager)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load joint controller configurations from YAML file to parameter server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/config/controllers.yaml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>xm_arm_moveit_config/launch/xmbot_moveit_sensor_manager.launch.xml</p></blockquote><p>这个文件用来指定Sensor配置文件的位置。同上，你也需要自己编辑这个文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load rgbd sensor configurations from YAML file --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find xm_arm_moveit_config)/config/sensors_rgbd.yaml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，让我们运行两个例子来测试一下MoveIt!。</p><p>首先，我们测试一下MoveIt!的Motion Planning。请在终端中输入下列命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; roslaunch xm_arm_bringup xm_arm_bringup_moveit_and_gazebo.launch</span><br></pre></td></tr></table></figure><p>在Rviz中，你可以使用末端执行器上的交互式Marker来移动机械臂到目标位置。接着，你可以在Planning Library的下拉式菜单中选择OMPL库中的某个特定规划算法。然后，点击Plan按钮，Rviz窗口中就会出现一条从初始位置到目标位置的运动轨迹并循环不断地播放。最后，点击Execute按钮，MoveIt!会将上一步规划出来的机械臂关节轨迹通过FollowJointTrajectoryAction接口发送给Gazebo中对应类型的Controller，使得Gazebo中的机械臂可以移动到目标位置，以下是测试的截图。注意：不同的规划算法所用的时间是不一样的。请尝试每一种算法，并记住最优算法的名字，这是为了之后方便在代码中对其进行调用做准备。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_motion_planning_rviz.png" alt="xm_arm_motion_planning_rviz"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_motion_planning_gazebo.png" alt="xm_arm_motion_planning_gazebo"></p><p>第二个例子，我们来测试一下带有Avoid Collision的Motion Planning。同样的，请在终端中输入下列命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; roslaunch xm_arm_bringup xm_arm_bringup_moveit_and_gazebo.launch</span><br></pre></td></tr></table></figure><p>因为我在Gazebo中给机器人的头部添加了深度传感器的插件，所以当你把桌子放到机器人前方的时候，MoveIt!可以立马从点云Topic中获取物体的信息，并在Rviz中生成可视化的OctoMap。在下一次做运动规划的时候，MoveIt!会将由正方体组成的OctoMap看成障碍物并考虑在内。图中，机械臂的初始位置为伸直形态，我将其从桌子的下方移动到了桌子的正上方，规划的效果如下图所示。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_avoide_collision_rviz.png" alt="xm_arm_avoide_collision_rviz"></p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_avoide_collision_gazebo.png" alt="xm_arm_avoide_collision_gazebo"></p><p>当然，在使用MoveIt!对机械臂进行运动规划的时候并不是每一次都能成功，有些时候会出现超时报错的情况。遇到这种问题的时候，你可以尝试尝试其他OMPL算法，因为不同的OMPL算法可能对不同的情况有各自的优化。</p><p>最后，由于时间的缘故，我没能将MoveIt!的C++和Python的使用代码给整理出来，这对于我来说非常遗憾。不过，我相信随着MoveIt!学习教程的越来越丰富，有关如何用代码来做MoveIt!的运动规划会更加容易。</p><h4 id="任务决策层"><a href="#任务决策层" class="headerlink" title="任务决策层"></a>任务决策层</h4><p>任务决策层处于整个架构图最顶端，是控制整个机械臂的大脑所在。首先，我要阐明的一点是：这一部分在我那一届机械臂软件代码中并没有实现，这是我后来总结机械臂开发经验的时候重新设计的。</p><p>至于我为什么要选择重新设计新的任务决策层，原因其实很明显，就是我们之前的那个存在着很多的不足的地方。我们之前的那个任务决策层架构比较松散，特别是机械臂的Action接口，我们定义了好几种，但是其中有几种的功能比较相近，显得比较冗余。而且状态机可以直接发送Action的Goal到机械臂模块中，换句话说就是没有经过封装的数据是一直暴露在整个任务决策的各个时间段，这会影响数据通信的稳定性，而且这样的代码也是不容易维护和重构的。</p><p>当然，除了上面存在的历史问题，还有一个影响我做出改进的因素就是：中科大蓝鹰队可佳服务机器人早期的<a href="http://ai.ustc.edu.cn/cn/demo/SolveNewProblems.php">抓取视频</a>。视频中，可佳机器人的机械臂可以非常精准地操作微波炉，并抓取桌子上三种不同的容器。其中最难的是那个盛有牛奶的碗，整个碗只有一个地方向外伸出了一个手柄，能让机械臂末端手爪精准地抓住碗并且在移动其的过程中不让碗中的牛奶洒出来，这是非常厉害的。当时看完视频之后，我就被深深地震撼了，原来机械臂的自主抓取可以做到这样的程度！后来，<strong>西工大一小学生</strong>跟我们讲：</p><blockquote><p>这个视频里最厉害的还不是机械臂的抓取，而是可佳机器人的任务决策部分。可佳可以通过对人语义的理解来自动生成相应的任务序列，而且这个任务序列是能被实时的修改和更新的。</p></blockquote><p>因此，我决定对之前的机械臂任务决策模块进行封装，把所有与机械臂相关的软件细节都隐藏起来，最后暴露给外面的只有数据和任务接口。这样可以大大降低模块与模块之间的耦合性，并减少了不必要的进程通信开销，提高了程序运行时的效率。下面，我简要地讲解一下这个部分的原理。</p><p>任务决策层的核心简单来说是在其内部定义了一个小型的状态机，它可以根据不同的任务类型、物体位置以及物体的类型来选择不同的数据发给下面的运动规划层。这里我举一个具体的例子来说明其工作的整个流程：首先，机器人决策模块给机械臂的任务决策层发送了一个<strong>抓取</strong>的状态，任务决策层接收到之后就会在自己事先存储好的状态表中进行查找，如果匹配<strong>抓取</strong>状态成功，就把表中的状态链取出并放到状态队列中去。每次状态控制器会根据当前状态队列中的子动作来分析其所需要的数据。比如说，<strong>抓取</strong>状态可以拆分成很多子动作：初始、准备、抓取、手爪张开、手爪夹紧、手握物体等。此时，如果队列中第一个动作是初始，那控制器便会从预先设定好的机械臂位置池中取出相应的位置，并从MoveIt!参数表中取出其所需要的数据，最后通过MoveIt!接口把初始动作发送给运动规划层进行规范和执行。当机械臂完成这个动作后，任务决策层会比较机械臂实际运动的位置和预想位置之间的差值，如果误差小于某个值，其便会返回执行成果给控制器，控制器则会继续地执行下一个状态，直到整个状态队列中的动作都被执行完。如果误差过大，则报错退出，以防止机械臂出现任何不可控的意外情况。</p><p>最后，鉴于这一部分只停留在我的设想阶段，目前只供参考。至于最终能不能实现出来，还有待日后的验证。</p><h2 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><h4 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h4><p>首先，我承认我对规范有一种近似疯狂的恪守。很多人都觉得学习开发规范对项目开发没有意义，简直就是在浪费时间。可是我一直坚信着：只有好的开发规范，才能产生成功的项目。我把学习开发规范作为基础中的基础，是因为我曾经在项目开发的过程中吃过这样的亏。因此，我希望每个开发者都能在为项目开始贡献之前耐下心来好好学习本团队的开发规范，并严格地执行规范中的内容。这里，我推荐<a href="https://google.github.io/styleguide">Google开发规范</a>和<a href="http://wiki.ros.org/StyleGuide">ROS开发规范</a>。当然，如果你感兴趣的话，你可以看一下我曾经自己整理编写的<a href="https://github.com/xm-project/xm_developer_guide">晓萌团队开发规范</a>。</p></li><li><h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h4><p>我认为掌握版本管理可以说是软件开发的必备技能之一，也是提高代码开发效率的绝对利器，希望大家好好地学习一下。版本管理主要涉及Git和GitHub的使用，这方面的学习资料很多，上网搜一下，花一段时间就能入门。</p></li><li><h4 id="文档写作"><a href="#文档写作" class="headerlink" title="文档写作"></a>文档写作</h4><p>这方面也有很多的开发者不是很重视。但个人认为如果你想成为真正的强者，只会编代码是远远不够的，你还需要优秀的文档写作能力。比如说你在开发的过程中遇到了一些问题，并成功地解决了。这个时候，你应该及时地将遇到的问题和解决办法以项目日志的形式记录下来，这样伴随着项目开发进度的不断向前，日志的内容也会越来越多。我敢保证，若干年之后，你一定会拥有别人绝对没有的宝贵财富！当然，除了开发日志外，你也要学会如何使用Markdown来编写项目文档。Markdown是你与开源世界交流的最重要的工具，一定要学会，况且它也并不是很难学。</p></li><li><h4 id="编程能力"><a href="#编程能力" class="headerlink" title="编程能力"></a>编程能力</h4><p>这个我就不用讲太多了，我相信如何学习编程，大家可能知道的比我还多。我这里主要想强调一下，一定要重点理解、学习C++。毕竟编译型语言要比解释性语言Python在执行效率上要高，而且对于机械臂开发来说，MoveIt!中的C++ API也要比Python的要多。</p></li><li><h4 id="ROS基础"><a href="#ROS基础" class="headerlink" title="ROS基础"></a>ROS基础</h4><p>关于如何学习ROS，我推荐跟我曾经同在西工大舞蹈机器人基地的盛盛在易科上发表过的一篇文章：<a href="http://blog.exbot.net/archives/2667">如何学习ROS——盛盛经验谈</a>。这里，我想补充一下，对于机械臂开发来说，除了盛盛在文章里讲到的那些内容之外，各位还要重点理解以下几个部分：</p><ul><li><a href="http://wiki.ros.org/actionlib">Action</a></li><li><a href="http://wiki.ros.org/ros_control">ROS Control</a></li><li><a href="http://wiki.ros.org/joint_state_publisher">Joint State Publisher</a></li><li><a href="http://wiki.ros.org/robot_state_publisher">Robot State Publisher</a></li><li><a href="http://wiki.ros.org/joint_trajectory_controller">Joint Trajectory Controller</a></li><li><a href="http://wiki.ros.org/urdf">URDF</a></li><li><a href="http://wiki.ros.org/xacro">Xacro</a></li><li><a href="http://wiki.ros.org/roslaunch/XML">Launch XML</a></li><li><a href="http://gazebosim.org/tutorials?cat=connect_ros">Gazebo Connect to ROS</a></li></ul></li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>等你学习完以上的内容之后，我相信你已经打下了坚实的基础。这个时候，你可以开始入门MoveIt!了。学习MoveIt!的时候，一定要多实践，遇到问题多在<a href="http://answers.ros.org/questions">ROS Answers</a>上搜一搜，我相信大部分问题的解决办法你都能找到。有关机械臂的URDF模型，我推荐刚开始入门的时候先从简单的机械臂模型入手，不要一上来就整个PR2的，一是机械臂关节比较多，二是我估计你的电脑不一定能带的动。</p><ul><li><h4 id="Gazebo"><a href="#Gazebo" class="headerlink" title="Gazebo"></a>Gazebo</h4><p>要熟练地掌握Gazebo仿真软件，因为我觉得并不是每个人都有机械臂，机械臂的成本确实比较高，这个时候如果你学会了如何在仿真环境下搭建机械臂模型并将其与MoveIt!连接在一起，你就能在一定程度上节约时间、资金成本。当然，仿真是永远无法替代实物的，这个我之前在开发机械臂的时候就深刻地体会过，不过，把Gazebo当做算法的前期验证平台还是非常好的。</p></li><li><h4 id="MoveIt"><a href="#MoveIt" class="headerlink" title="MoveIt!"></a>MoveIt!</h4><p>多看看别人的MoveIt!配置是什么样的，然后你自己再重新地配置几遍，主要是熟悉其中的一些概念。最后，在Rviz里试着拖动机械臂到新的位置，点击<strong>Plan</strong>按钮看看MoveIt!是怎么通过IK来输出一条平滑的轨迹的。当然，如果你配置好了深度传感器接口的话，可以试一试MoveIt!是如何在有障碍物的情况下进行运动规划的。</p><p>总之，想要开发好机械臂，MoveIt!+Gazebo是必不可少的。</p></li></ul><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><p>至此，如果你能按照我说的完成前两步的话，你应该已经会用MoveIt!，并能用其做简单的运动规划了。当然，如果你想成为机械臂开发大神的话，你还需要重点学习MoveIt!的代码API。MoveIt!的API不少，你需要多尝试，找到最适合你们机械臂使用的API（推荐C++的API）。</p><ul><li><h4 id="FCL"><a href="#FCL" class="headerlink" title="FCL"></a>FCL</h4><p>在MoveIt!中，碰撞检测使用的是FCL库。你需要了解和学习FCL的API，并将其融入到机械臂的运动规划中去。</p></li><li><h4 id="OMPL"><a href="#OMPL" class="headerlink" title="OMPL"></a>OMPL</h4><p>MoveIt!默认使用OMPL库来做运动规划，你可以去OMPL的<a href="http://ompl.kavrakilab.org">官网</a>仔细地学习一下它的使用方法。如果你有时间的话，也可以研究一下其他几种规划器的效果如何，比如<a href="http://wiki.ros.org/stomp_motion_planner">STOMP</a>、<a href="http://wiki.ros.org/sbpl">SBPL</a>、<a href="http://www.nathanratliff.com/thesis-research/chomp">CHOMP</a>等。</p></li><li><h4 id="IK解算"><a href="#IK解算" class="headerlink" title="IK解算"></a>IK解算</h4><p>如果你认为你已经对MoveIt!的使用了如指掌，你可以尝试挑战一下难度——根据你们自己机械臂的实际情况，手写IK解算插件并将其集成到OMPL中去。</p></li><li><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>完成以上之后，你如果发现自己还想在机械臂领域有更多的提升空间，那工程开发显然已经不能满足你的需求了，你需要阅读机械臂方面的论文以及专业书籍。这里我推荐《Robotics - Modelling, Planning and Control》这本书，里面深入地讲解了机器人的建模、轨迹规划以及运动控制等相关内容。</p></li></ul><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>以下是我认为学习机械臂比较好的资源，推荐给大家。</p><ul><li><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p><a href="http://moveit.ros.org/documentation">MoveIt!官方文档</a></p></li><li><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>《Effective_Robotics_Programming_with_ROS_Third_Edition》<br>《Learning_ROS_for_Robotics_Programming_Second_Edition》<br>《Mastering_ROS_for_Robotics_Programming》<br>《Programming_Robots_with_ROS》<br>《Robot_Operating_System(ROS)_The_Complete_Reference》<br>《ROS_By_Example_2_Indigo》<br>《ROS_Robotics_By_Example》</p></li><li><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><p><strong>西工大一小学生：</strong><br><a href="http://blog.exbot.net/archives/2337">ros_control攻略</a></p><p><strong>古月居：</strong><br><a href="http://www.guyuehome.com/435">ROS探索总结（二十五）——MoveIt!基础</a><br><a href="http://www.guyuehome.com/455">ROS探索总结（二十六）——MoveIt!编程</a><br><a href="http://www.guyuehome.com/890">ROS探索总结（三十一）——ros_control</a></p><p><strong>redefine：</strong><br><a href="http://www.roswiki.com/read.php?tid=402&amp;fid=9&amp;page=1">运动规划 (Motion Planning): MoveIt! 与 OMPL</a><br><a href="http://www.roswiki.com/read.php?tid=535&amp;fid=9">基于OMPL的采样运动规划算法(Sampling-based Motion Planning)</a></p><p><strong>yaked：</strong><br><a href="http://blog.csdn.net/yaked/article/details/42265325">在qt下编写基于KUKA youbot API的程序</a><br><a href="http://blog.csdn.net/yaked/article/details/45022047">用ROS控制KUKA youbot的5自由度机械臂和夹子</a><br><a href="http://blog.csdn.net/yaked/article/details/45061889">给KUKA youbot机械臂添加dynamic reconfig</a><br><a href="http://blog.csdn.net/yaked/article/details/45098549">Actionlib与KUKA youbot机械臂</a><br><a href="http://blog.csdn.net/yaked/article/details/45534381">利用rqt_plot与matlab分析KUKA youbot的joint_states信息</a><br><a href="http://blog.csdn.net/yaked/article/details/45618877">KUKA youbot机械臂与Moveit工具包（1）</a><br><a href="http://blog.csdn.net/yaked/article/details/45621517">KUKA youbot机械臂与Moveit工具包（2）</a><br><a href="http://blog.csdn.net/yaked/article/details/46840763">KUKA youbot机械臂与Moveit工具包（3）</a><br><a href="http://blog.csdn.net/yaked/article/details/51412781">Gazebo与ros_control（1）：让模型动起来</a><br><a href="http://blog.csdn.net/yaked/article/details/51417742">Gazebo与ros_control（2）：七自由度机械臂和两轮差速运动小车</a><br><a href="http://blog.csdn.net/yaked/article/details/51436262">Gazebo与ros_control（3）：Moveit输出规划轨迹到Gazebo</a><br><a href="http://blog.csdn.net/yaked/article/details/51483531">Gazebo与ros_control（4）：举一反三，实战youBot</a></p><p><strong>邱博士：</strong><br><a href="http://blog.exbot.net/archives/2908">使用MoveIt进行运动规划</a><br><a href="http://www.leiphone.com/news/201703/0JJyEB2eqdRe9XS8.html">实例介绍机械臂运动规划及前沿研究方向</a><br><a href="https://www.zhihu.com/people/fly_qq/answers">邱博士知乎问题回答</a></p><p><strong>创客智造：</strong><br><a href="http://www.ncnynl.com/archives/201610/947.html">MoveIt!入门教程系列</a></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我在大二的时候了加入西工大舞蹈机器人基地家政组，负责机械臂的软件开发工作。那个时候ROS的版本还是Indigo，MoveIt!用的人还不是很多，RoboCup@Home比赛队伍中用机械臂的还很少。如今接近两年的时间过去了，当我再次打开MoveIt!官网的时候，教程的数量和质量已经不可同日而语了。我相信现在的机器人爱好者或研究者们要比我当初那会儿更容易地学习并掌握机械臂的开发，并能将其应用到解决当今人们所遇到的问题中去。我们正处在人工智能的伟大时代，而机器人作为人工智能技术最为重要的技术载体，需要我们为此付出努力并勇于探索前方未知的道路。最后，我希望这篇文章可以让更多的开发者迈入机械臂开发的大门，并为机械臂的研究发展贡献你们自己的一份力量！</p>]]></content>
      
      
      <categories>
          
          <category> 机器人解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> ROS </tag>
            
            <tag> MoveIt! </tag>
            
            <tag> Gazebo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人解读系列（0x01）：服务机器人系统</title>
      <link href="/zh-cn/2017/04/18/robot_analysis_1_xmbot_system/"/>
      <url>/zh-cn/2017/04/18/robot_analysis_1_xmbot_system/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在大二的时候加入到了西北工业大学舞蹈机器人基地RoboCup@Home项目组，在接近一年半的学习与开发过程中，我与负责其他模块的成员一起在原有晓萌机器人的基础上，对其整个系统架构进行了全面的升级，以便满足实际比赛的需要。同时在这个过程中，我也对新一代晓萌机器人系统有了更深的认识与理解。这里，我把自己对晓萌机器人系统的见解总结下来，一方面算是对我们这一届成员开发成果的总结，另一方面也希望这些经验总结可以留给未来的继任者，能给他们一些开发上的指导和借鉴。</p><p>本篇文章重点介绍晓萌机器人的系统架构，其中主要分为硬件层、嵌入式层、驱动层和软件层。除了技术方面的内容之外，我还会介绍其他有关开发的内容。不过由于这些内容都是来源于自己的个人见解，所以有些地方可能会讲得不够准确，欢迎各位成员在留言处进行指正。</p><span id="more"></span><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_system_architecture.png" alt="xm_system_architecture"></p><p>如上图所示，晓萌机器人的架构主要分为四层，分别为硬件层、嵌入式层、驱动层和软件层。</p><h3 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h3><ul><li><h4 id="机械平台"><a href="#机械平台" class="headerlink" title="机械平台"></a>机械平台</h4><p><strong>底盘：</strong>机械平台分为底盘和机械臂两个部分。根据《自主移动机器人导论》书中的相关内容，底盘采用三角布局的全向轮结构，经过一定的运动学解算，可以实现底盘的全向移动。</p><p><strong>机械臂：</strong>机械臂由我们上一届学长设计，整个机械结构由复合的同步轮和与之匹配的同步带组成。由于没有采用传统的舵机关节结构，因此该机械臂可以抓取更重的载荷，并且在末端精度上也表现得很出色。</p></li><li><h4 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h4><p><strong>音频：</strong>晓萌机器人安装有话筒和音响两种音频设备。话筒用于接收人所发出的语音信息，不过由于比赛现场声音过于嘈杂，所以人与话筒的距离要保持得比较近才能使语音命令能够被采集到。</p><p>音响主要用来播放晓萌机器人的语音信息。根据比赛规则，晓萌机器人需要在某些比赛项目中通过播放语音的方式来表明机器人已经理解裁判所下达的命令或完成了某个阶段的任务。</p><p><strong>激光：</strong>晓萌机器人装配有Hokuyo公司的廉价激光传感器，它主要被用于建立未知环境的地图，为机器人的自主导航提供坚实的基础。同时，它也能检测到机器人周围的障碍物，使得机器人能避免与其相撞。</p><p><strong>Kinect：</strong>Kinect是微软公司推出的一款RGB-D相机，我们将其安装在机械臂的升降台上，主要用于获取点云数据并使用相关图像算法来识别放置在架子上的不同物体。</p><p><strong>Xtion Pro Live：</strong>Xtion Pro Live是华硕公司推出的一款RGB-D相机，我们将其应用于人脸识别。该相机位于晓萌机器人的顶部云台上，云台则由两个Dynamixel舵机组成。当比赛中需要机器人跟随人一起移动时，晓萌机器人可以通过改变两个舵机的角度来确保人脸始终存在于相机的有效视野内，从而降低跟丢情况的发生。</p></li><li><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>执行器是机器人重要的运动部件，如图所示，晓萌机器人的执行器包含有舵机和电机两个部分。舵机主要用于相机云台的旋转以及机械臂末端手爪的开合，电机则负责底盘和机械臂部分的移动和控制。</p></li><li><h4 id="反馈器"><a href="#反馈器" class="headerlink" title="反馈器"></a>反馈器</h4><p>反馈器可以实时地获取机器人的运动状态，为实现机器人自主闭环控制提供基本的保障。这里，晓萌机器人采用电机编码器来向上层返回电机的实测数据，以便对原有数据进行一定的修正，减少误差对机器人自主运动或控制的影响。</p></li></ul><h3 id="嵌入式层"><a href="#嵌入式层" class="headerlink" title="嵌入式层"></a>嵌入式层</h3><ul><li><h4 id="底层控制"><a href="#底层控制" class="headerlink" title="底层控制"></a>底层控制</h4><p>嵌入式层的核心是底层控制。我们使用基于ARM Cortex-M3架构的STM32芯片作为下位机的主控，它的主要任务是对通信数据进行解析，并根据一定的解算，将最终的控制命令发送给连接有底盘和机械臂电机的驱动盒进行相应的控制。同样的，通过电机编码器返回的数据可以用来计算底盘的里程和机械臂关节的实时状态，为机器人的上层规划提供基础。</p></li><li><h4 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h4><p>主控与上位机之间采用串口通信，而主控与电机驱动盒之间则使用CAN网络进行连接。经过实测，该机器人通信架构可以满足需求。</p></li></ul><h3 id="驱动层"><a href="#驱动层" class="headerlink" title="驱动层"></a>驱动层</h3><ul><li><h4 id="内核设备驱动"><a href="#内核设备驱动" class="headerlink" title="内核设备驱动"></a>内核设备驱动</h4><p>内核设备驱动是驱动层最基本的组成部分，它们由硬件设备开发商提供，并嵌入在操作系统中，为访问设备提供最基本的保障。</p></li><li><h4 id="传感器驱动"><a href="#传感器驱动" class="headerlink" title="传感器驱动"></a>传感器驱动</h4><p>传感器驱动则由软件开发者所编写，它们主要负责封装底层细节并向上暴露出特定的数据接口，方便开发者进行使用或二次开发。</p></li><li><h4 id="控制器驱动"><a href="#控制器驱动" class="headerlink" title="控制器驱动"></a>控制器驱动</h4><p>从图中可以清楚地看到，控制器驱动和传感器驱动处于同一层，所以它们的功能类似，不同点在于控制器驱动服务的对象不是传感器而是舵机和电机。</p></li></ul><h3 id="软件层"><a href="#软件层" class="headerlink" title="软件层"></a>软件层</h3><ul><li><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>在Windows上，我们主要使用微软自带的Speech库来做语音合成和识别。其实在赛前的开发过程中，我们也曾在Ubuntu下使用过各种语音库，但测试出来的效果都不如Speech库。</p></li><li><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>在Ubuntu上，我们全部使用ROS来做各模块的开发和集成工作，其中涉及有负责物体识别和人脸检测的图像模块、负责运动规划和控制的底盘和机械臂模块、以及负责机器人行为决定的策略模块等。因为在软件组中，我主要负责机械臂软件部分，所以我对晓萌机械臂模块的开发还是有着比较深的理解和总结的。由于篇幅的缘故，我不在这里展开进行讲解。对于那些想了解如何开发机械臂的初学者来说，我会在下一篇系列博客中对此进行详细地总结。以下是机械臂的软件架构图，各位可以先睹为快：</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/ros_experiences/others/xm_arm_software_architecture.png" alt="xm_arm_software_architecture"></p></li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><h3 id="机械"><a href="#机械" class="headerlink" title="机械"></a>机械</h3><ul><li><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>底盘的四周用隔板做了简单的封装，并使用束线带对杂乱的线缆进行了整理，从而降低调试过程中因线缆互相缠绕而导致的一些问题（之前由于电机线缆被缠绕在机械臂的底座上，导致机械臂在升起的过程中，出现线缆被扯断的严重问题）。</p></li><li><h4 id="手爪"><a href="#手爪" class="headerlink" title="手爪"></a>手爪</h4><p>前一代手爪是那种可以对称张开闭合的结构，而现在使用的是平行结构，即两个金属滑块通过在滑轨上完成对称平行的移动来实现抓取操作。除此之外，手爪的内侧还特别加装有塑料海绵，可以保证在不失舵机扭矩的前提下，尽可能地夹紧物体。</p></li></ul><h3 id="电子"><a href="#电子" class="headerlink" title="电子"></a>电子</h3><ul><li><h4 id="机械臂控制"><a href="#机械臂控制" class="headerlink" title="机械臂控制"></a>机械臂控制</h4><p>相比底盘电机的速度闭环控制，机械臂控制使用的是位置闭环。抛开机械上的误差，电子组在控制机械臂的位置精度上做得还是很不错的。</p></li><li><h4 id="主控制板"><a href="#主控制板" class="headerlink" title="主控制板"></a>主控制板</h4><p>我们也拥有自行设计的基于STM32芯片的控制板，虽然稳定性还需改进，但相比于直接使用战舰等学习板，我们设计的控制板可以最大程度地满足自身嵌入式开发的需要，并精简冗余的部分，提高整个硬件的运行效率。</p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><h4 id="语音模块"><a href="#语音模块" class="headerlink" title="语音模块"></a>语音模块</h4><p>语音模块的主体虽然还是之前Windows上开发的那一套，但在软件界面和识别精度上都有了很大程度的提高。在2015年的RoboCup贵阳赛中，我们在语音测试环节中识别出了几乎全部的测试用例。虽然有的队全部识别正确，但是对于我们来说能在那样的环境下做到这样已经很不错了。</p></li><li><h4 id="图像模块"><a href="#图像模块" class="headerlink" title="图像模块"></a>图像模块</h4><p>图像模块的改进主要体现在物体识别上。因为我们之前想用的是和MoveIt!集成在一起的ork，但经过上一届搞图像的学长的研究发现，ork很难配置起来，而且也不是很好用。所以，这一届我的两个队友非常给力地完成了晓萌机器人第一代的物体识别算法，经过测试，识别的效果还是非常不错的。</p></li><li><h4 id="底盘模块"><a href="#底盘模块" class="headerlink" title="底盘模块"></a>底盘模块</h4><p>底盘模块的成果主要是添加了机器人自主进门以及更加鲁棒的SLAM。当然，对于BSR（Benchmark Service Robot，即服务机器人基准测试）项目来说，基于Kinect定制的视觉SLAM也是不错的成果。</p></li><li><h4 id="机械臂模块"><a href="#机械臂模块" class="headerlink" title="机械臂模块"></a>机械臂模块</h4><p>机械臂模块的成果是显而易见的，我们做到了晓萌机器人团队自创立以来第一次的机械臂自主抓取。尽管在运动控制以及策略的制订上还存在明显的不足，但可以肯定的是，机械臂是服务机器人不可或缺的重要组成部分，未来我们仍需要不断地努力，让机械臂的控制变得更加精准。</p></li><li><h4 id="策略模块"><a href="#策略模块" class="headerlink" title="策略模块"></a>策略模块</h4><p>最后是整个晓萌机器人的策略模块。放到最后才讲是因为它的确很重要，它可以说是机器人的大脑，也是整个机器人核心智能的体现（虽然我们还远远没有达到）。策略模块的成果主要是根据所要测试的项目添加了对应的状态机控制，这样就可以通过调用以上不同的模块来让机器人自主完成不同状态下的任务。</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><p>我们基于GitHub搭建了晓萌机器人团队的代码管理系统，并根据开发角色和分配任务的不同，将代码仓库的管理权限分配给各自需要进行维护的成员，这提高了团队协作开发的效率，也减少了因代码版本不同而导致的问题。</p></li><li><h4 id="开发指南"><a href="#开发指南" class="headerlink" title="开发指南"></a>开发指南</h4><p>我们编写了一套比较完整的软件开发指南，其中包含常用编程语言以及代码版本管理方面的内容，这些指南主要被用于统一各团队成员的编码风格，使得各成员所编写的模块可以无缝地对接，提高开发效率并降低代码出错的可能。</p></li><li><h4 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h4><p>我们设计了自己团队的标志、海报和队服，我们以此希望未来的成员能以自己是晓萌机器人团队的一份子而感到自豪，并努力地为晓萌机器人的发展贡献自己的力量！</p></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="机械-1"><a href="#机械-1" class="headerlink" title="机械"></a>机械</h3><ul><li><h4 id="机械臂"><a href="#机械臂" class="headerlink" title="机械臂"></a>机械臂</h4><p>现在，机械臂每次初始化都需要在断电的情况下由人手动地将沉重的机械臂掰成水平，然后才能上电复位。虽然这比于之前使用的限位开关要精准的多，但使用起来依然不是很方便。造成这个问题的原因是我们的机械臂构造比较特殊，由同步轮和同步带组成的关节很难保证在限位开关被触发的时候能够及时停下，所以希望新成员能找到方法来解决这个问题。</p></li><li><h4 id="机械手爪"><a href="#机械手爪" class="headerlink" title="机械手爪"></a>机械手爪</h4><p>现在，控制手爪舵机的方法是由软件组直接通过串口发送舵机旋转所需要的角度，而角度的计算则是根据物体的宽度通过解算得到的。虽然我们可以对误差进行一定的修正，以使得舵机能多次做到抓紧物体而又不会过载，但是本身这种方式就不是很科学。因为，我们不能绝对保证手爪每次都能到达物体的相同高度，对于那些是等宽圆柱体的物体来说，我们现在使用的这种纯通过计算的方式没有问题，但对于不等宽的圆柱体来说，这么做很有可能会导致手爪要么太松，抓不住。要么手爪抓得太紧，舵机过载失去扭矩。我认为解决的最好办法就是在手爪上装个压力传感器，并预先根据舵机可以承受的最大过载设定一个安全的压力阈值，这样每当抓一个物体的时候，不管它是什么形状，手爪都能根据压力的变化来尽可能地抓紧物体。</p></li></ul><h3 id="电子-1"><a href="#电子-1" class="headerlink" title="电子"></a>电子</h3><ul><li><h4 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h4><p>主要是有太多裸露的电线，这样既不美观，也很影响机器人的调试工作。之前，我们在调试机械臂的时候就曾出现过升降电机的线被底盘缠住，在升降复位上升的过程中直接将其扯断的悲惨经历。希望之后的电子组成员可以在布线这个问题上多考虑考虑，多参考其他队伍是如何把线布的既方便使用又能简洁美观的。</p></li><li><h4 id="机械臂-1"><a href="#机械臂-1" class="headerlink" title="机械臂"></a>机械臂</h4><p>机械臂关节移动的正方向比较混乱，希望电子组之后统一方向为：向上为正、向右为正。即软件组发送关节数据为正时，机械臂关节要向上或向右动才行。</p></li></ul><h3 id="软件-1"><a href="#软件-1" class="headerlink" title="软件"></a>软件</h3><ul><li><h4 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h4><p>在启动底盘和机械臂的robot_hardware，并打开串口给下位机发送数据的时候，串口总是会出现莫名其妙的崩溃问题。当时我和负责底盘的队友商量之后，决定写一个ROS Service来切换底盘和机械臂的模式，这样做虽然可以保证每次只有底盘或机械臂在给串口发数据，暂时地解决了问题，但它并不是一个很好的解决方案，因为它使得底盘和机械臂无法同时工作。我个人认为问题的原因应该和串口发送接收队列有关。RS-485串口的波特率已经达到了我们所能使用的极限了，所以要修改的话，应该在软件组代码中对发送或接收队列进行适当的延迟，以抵消大量的数据对数据线路的冲击。</p></li><li><h4 id="MoveIt"><a href="#MoveIt" class="headerlink" title="MoveIt!"></a>MoveIt!</h4><p>我之前在研究机械臂控制的时候，发现在调用MoveIt!做机械臂逆解时，总会出现解算不成功的问题。后来我们简化了机械臂的控制，并没有在机械臂中用到MoveIt!。希望新成员能够解决这个问题，使晓萌的机械臂控制更上一层楼。</p></li></ul><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><h3 id="机械-2"><a href="#机械-2" class="headerlink" title="机械"></a>机械</h3><p>希望机械上可以减轻机械臂升降台的重量，因为负责底盘的队友曾经抱怨沉重的升降使得他的底盘在导航的时候跑得不稳定。还有就是对于BSR项目底盘的设计，希望可以向中科大和上交学习，尝试地使用两轮驱动，因为两轮驱动的话，底盘过门槛是没有问题的，而且底盘电机可以承受的重量也要在设计的时候好好考虑，毕竟负重越重，得分所乘的权值越大。</p><h3 id="软件-2"><a href="#软件-2" class="headerlink" title="软件"></a>软件</h3><p>希望软件组各个模块的负责人可以在已有学长学姐的技术积累之上，让模块本身做得足够稳定。我知道虽然我在这里讲的很容易，但真要实现起来，对于我们本科生来说，确实也不容易。但我们不相信自己还能相信谁呢？就像之前我们的学长告诉我们的那样：如果各位不做，西工大就再也没有人去做了。时代把任务交给你们，你们就必须肩负起这个使命。所以为了晓萌机器人项目的发展，希望每届项目组的成员都要做出自己应有的贡献。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>最后，我的个人愿望就是希望我能在大四本科毕业之前，看到晓萌机器人能自主完成GPSR项目，或者至少可以去大学生超市秀一把机械臂的自主抓取。虽然愿望很美好，但到底能不能完成，还要看未来的新成员给不给力了。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>我知道有很多人喜欢编程，不喜欢花时间来写文档（首先阐明一下，这里的文档指的是广义上的文档，即包括图片、视频、文字、架构图等）。但我不得不说，文档对于一个项目的发展是至关重要的。在我们2015年贵阳赛比完之后，我们组的ROS大牛学长就曾告诉过我：只要晓萌的技术方向没有问题，经过一段时间的发展，我们超越除中科大之外的其他队是没有问题的。我想，相比于代码来说，整个晓萌团队的技术架构、需求设计才最为重要。而往往新架构的设计要花费很多时间，而且还可能需要组内各个模块负责人之间要相互讨论和统一意见。</p><p>总之，我真的很不希望看到在若干年之后：我们拿不出曾经调试或比赛的照片来告诉新成员过去几代的晓萌机器人长什么样子；我们拿不出合适的视频资料来证明我们曾经在调试或比赛的时候也完成过某项测试；我们拿不出曾经设计严谨的架构图或技术文档来指导学弟学妹未来晓萌该如何前进和发展。所以为了下一代的发展，我觉得我们应该把我们已有的技术、经验、成果、和对未来的规划以纸质文档、照片、视频等方式永久地记录下来，这样在过了几代发展之后，晓萌机器人才能以一种增量式开发的成果展现在人们的面前。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先我很幸运自己能有机会在本科阶段就加入到这样一支强大的团队中来，而且还能做我自己喜欢做的东西。当然，我觉得最重要的是我体会到了什么才叫真正的团队。回顾以往的开发经历，我们也曾遇到过人员流失等种种困难，但团结一心使我们最终坚持到了现在。多少个周末、寒暑假，别人在放松休息的时候，我们在埋头为晓萌团队的发展贡献自己的力量。我也记不清赛前我们到底熬了多少个昼夜，为比赛项目测试了多少次，但有一点是值得肯定的，我们能够彼此不懈努力并为此拼命的最大动力只来源于学长曾经教导过我们的一句话：绝对不能坑自己的队友。</p><p>其实有很多人都不理解我们，说我们比赛名次不是很好，拿的奖也不是国际奖，为什么还要牺牲那么多的时间或者有时还要冒着挂科的巨大风险来去做这些东西。其实我想说的是，奖这个东西往往不代表能力，或者说奖不能完全体现出我们的真实水平。就像学长曾说过的，奖只能证明你曾经经历过，只有你自己知道你配得上还是配不上这个奖。总之，在经历过三次比赛之后，我开始慢慢意识到也许奖真的不那么重要，重要的是我们可以用我们的能力来陪伴并见证晓萌的不断成长。有收获，就不遗憾了。</p><p>未来，我觉得有必要多花一些时间来研究理论，因为如果你只会调别人的API，你是很难有非常大的进步的。只有掌握了最核心、最基础的理论知识，才可能在未来创造出令别人刮目相看的东西。</p><p>最后，我想说的是：<strong>做你最想做的事情，并且为之奋斗下去，永不后悔！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器人解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人解读系列（0x00）：总纲</title>
      <link href="/zh-cn/2017/04/15/robot_analysis_0_superclass/"/>
      <url>/zh-cn/2017/04/15/robot_analysis_0_superclass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我最早开始接触ROS是在大一的下半学期，那时因为自己对电子制作以及机器人等非常感兴趣，所以经常每周跑去图书馆阅读相关方面的杂志（推荐《无线电》）和书籍。有一次，我跟往常一样来到机器人书架前，无意中发现了一本叫《开源机器人操作系统》的红书。当时我心里面有些疑惑：机器人还可以有操作系统？于是抱着好奇的心态，我翻了翻这本书的前几页，其中乌龟外形的标志当时给我留下了非常深刻的印象。</p><p>后来没过多长时间，我便加入了西工大舞蹈机器人基地RoboCup@Home项目组，开始正式地学习ROS并逐渐体会到它的强大之处，以下我简要地介绍一下ROS。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>近年来，随着人工智能技术的飞速发展，机器人领域也同样取得了举世瞩目的成就。性价比较高的机器人平台，包括地面移动机器人、旋翼无人机和类人机器人等，得到了广泛应用。更令人感到振奋的是，越来越多的高级智能算法让机器人的自主等级逐步提高。</p><p>面对日新月异的技术发展，显然传统的机器人开发框架已不能满足广大机器人软件开发者的需求，因此斯坦福大学联合柳树车库公司（Willow Garage）共同开发了ROS（Robot Operting System），它有效地解决机器人开发中的问题并提高了软件编写的效率，以下是ROS的官方定义：</p><blockquote><p>ROS是面向机器人的开源元操作系统。它能够提供类似传统操作系统的诸多功能，如硬件抽象、底层设备控制、常用功能实现、进程间消息传递和程序包管理等。此外，它还提供相关工具和库，用于获取、编译、编辑代码以及在多个计算机之间运行程序完成分布式计算。</p></blockquote><p>总之，ROS大幅度地降低了开发和应用机器人的难度，方便了全世界的机器人爱好者和研究者分享各自的研究成果，从而为机器人的通用化、模块化、智能化发展提供了良好的基础。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也许从我接触ROS的那一刻起，我就与ROS结下了不解之缘，并在学习、开发ROS的过程中受益匪浅。所以，我也希望有更多的机器人爱好者能够参与到ROS的学习之中来，因为它不仅可以教会你机器人的开发方法，而且更重要的是它可以让你掌握更多与之相关的开发知识，让你的能力得到更快的提升。</p><p>接下来，我就自己曾经在西北工业大学舞蹈机器人基地RoboCup@Home项目组的实战开发经历，总结了两篇文章，欢迎各位阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 机器人解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robot </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客教程系列（0x01）：Hexo安装配置</title>
      <link href="/zh-cn/2017/03/31/blog_tutorial_1_hexo_install_config/"/>
      <url>/zh-cn/2017/03/31/blog_tutorial_1_hexo_install_config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo的安装和配置内容主要由四个部分组成，它们分别是：</p><ul><li><p><strong>Node.js:</strong><br>因为Hexo是基于Node.js框架进行开发的，所以Node.js为Hexo提供了必需的运行基础。</p></li><li><p><strong>Git:</strong><br>Git是著名的分布式版本控制软件，它可以对博客网站的仓库进行管理和远程部署。</p></li><li><p><strong>GitHub Pages:</strong><br>GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，博客站点可以被免费托管在GitHub上。</p></li></ul><span id="more"></span><ul><li><strong>Hexo:</strong><br>Hexo是一个简洁且强大的博客框架。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>首先需要安装以下程序：</p><ul><li><a href="https://nodejs.org/en">Node.js</a></li><li><a href="https://git-scm.com">Git</a></li></ul><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h4 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h4><p>直接从<a href="https://nodejs.org">Node.js</a>官网上下载相应（32或64位）的Node.js软件安装包，一路Next即可。</p><h4 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h4><p>安装Node.js的最佳方式是使用nvm。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>执行完命令之后，可使用以下命令来安装最新长期支持版本的Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; nvm install --lts</span><br></pre></td></tr></table></figure><p>或安装最新稳定版本的Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; nvm install stable</span><br></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><h4 id="Windows系统-1"><a href="#Windows系统-1" class="headerlink" title="Windows系统"></a>Windows系统</h4><p>直接从<a href="https://git-scm.com">Git</a>官网上下载相应（32或64位）的软件安装包进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。安装时强烈建议勾选<strong>Git Bash</strong>，<strong>Git Bash</strong>提供了一组Linux风格的Shell环境。在该环境下，你可以直接通过命令行的方式来安装Node.js以及之后的Hexo。因为Hexo的很多操作都涉及命令行的操作，所以<strong>Git Bash</strong>很重要！</p><h4 id="Ubuntu系统-1"><a href="#Ubuntu系统-1" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h4><p>直接通过命令行来安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-get update</span><br><span class="line">$&gt; sudo apt-get install git-core</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在国内，npm下载安装包的速度会很慢（除了已翻墙的用户），推荐使用淘宝源或镜像，速度会比较快。</p><h4 id="安装Hexo-cli"><a href="#安装Hexo-cli" class="headerlink" title="安装Hexo-cli"></a>安装Hexo-cli</h4><p><strong>方法一：</strong>使用淘宝源来替换官方软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后跟官方教程一样安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>使用淘宝镜像来替换官方镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后就可以使用cnpm命令来安装Hexo了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>淘宝NPM镜像是一个完整npmjs.org镜像，你可以用此代替官方版本(只读)，同步频率目前为10分钟 一次，以保证尽量与官方服务同步。</p></div><p>因为我本人是一个坚定的<strong>K.I.S.S</strong>(Keep It Simple, Stupid)支持者，崇尚Unix的设计哲学。所以我在安装Hexo时会选择方法一，因为它不需要安装额外的软件，只是修改了用户的配置，比较精简。</p><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>切换目录到用户桌面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">cd</span> ~/Desktop</span><br></pre></td></tr></table></figure><p>创建空文件夹，名字可以随便取，但最好跟你的博客有关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir xxx_blog</span><br><span class="line">$&gt; <span class="built_in">cd</span> xxx_blog</span><br></pre></td></tr></table></figure><p>初始化博客文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo init</span><br></pre></td></tr></table></figure><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>Hexo-cli在这个过程中会将landscape主题包以及其所依赖的Hexo软件包都下载下来并以本地安装的方式安装到博客文件夹下的node_modules目录下。关于安装的软件包的详细信息，可以打开博客文件夹下的package.json来查看。</p></div><p>安装Hexo默认的依赖和插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install</span><br></pre></td></tr></table></figure><p>安装Git插件并保存为Hexo的依赖，为部署到GitHub Page做准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置Git和GitHub"><a href="#配置Git和GitHub" class="headerlink" title="配置Git和GitHub"></a>配置Git和GitHub</h3><p>已配置过<strong>SSH Key</strong>的可以略过本小节。</p><ul><li><p>打开Shell软件（Windows下<strong>Git Bash</strong>，Ubuntu下为默认的<strong>Terminal</strong>），依次输入以下命令</p><p>配置全局的用户名和E-mail地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; git config --global user.name <span class="string">&quot;your_name&quot;</span></span><br><span class="line">$&gt; git config --global user.email <span class="string">&quot;your_email@xxx.com&quot;</span></span><br></pre></td></tr></table></figure><p>根据E-mail地址生成特定的ssh密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ssh-keygen -t rsa -C <span class="string">&quot;your_email@xxx.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>Windows用户注意：如果生成的.ssh文件夹默认不在C:\Users\xxx下，你可以通过向用户添加HOME环境变量为C:\Users\xxx来解决这个问题。</p></div></strong></p></li><li><p>登录GitHub并点击<strong>Setting</strong>选项。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/1_install_config/github_settings.png" alt="github_settings"></p></li><li><p>使用文本编辑器打开<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件，将里面的内容添加到你的GitHub账户设置中的<strong>SSH Key</strong>中去。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/1_install_config/github_ssh_keys.png" alt="github_ssh_keys"></p></li><li><p>再次打开Shell软件（Windows下<strong>Git Bash</strong>，Ubuntu下为默认的<strong>Terminal</strong>），输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果Shell软件返回以下信息，就说明Git已经配置好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h3><p>已配置过<strong>GitHub Page</strong>的可以略过本小节。</p><ul><li><p>登录你的GitHub，点击<strong>New repository</strong>。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/1_install_config/github_new_repository.png" alt="github_new_repository"></p></li><li><p>填写仓库的名字和相关描述。</p><p><img src="https://myyerrol-1257317595.cos.ap-beijing.myqcloud.com/websites/blog/images/hexo_tutorials/1_install_config/github_create_repository.png" alt="github_create_repository"></p><p><strong><p class="text-danger"><p>在设置界面上填写Repository name时一定要注意，仓库的名字是固定的。即your_name.github.io</p></p></strong></p></li><li><p>点击<strong>Create repository</strong>完成。</p></li></ul><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>以下是生成的<code>_config.yaml</code>中的默认内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下讲解每个参数的含义以及推荐的基本配置</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>title</strong></td><td>网站标题</td><td>Hexo</td><td>自由发挥</td></tr><tr><td><strong>subtitle</strong></td><td>网站副标题</td><td>x</td><td>自由发挥</td></tr><tr><td><strong>description</strong></td><td>网站描述</td><td>x</td><td>自由发挥</td></tr><tr><td><strong>author</strong></td><td>作者的名字</td><td>John Doe</td><td>英文用户名</td></tr><tr><td><strong>language</strong></td><td>网站的语言</td><td>英文</td><td>zh-cn或en</td></tr><tr><td><strong>timezone</strong></td><td>网站时区</td><td>本电脑时区</td><td>不写</td></tr></tbody></table></div><p><strong><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>修改language参数时一定要注意：要看themes/xxx/languages文件夹下的文件名，根据具体的文件名来填写参数。特别是对于zh-cn和zh-CN这两种写法，Windows和Git默认是不进行区分的，但你在填写参数时一定要区分开来，否则Hexo只会使用默认的英文。</p></div></strong></p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>url</strong></td><td>网址</td><td><a href="http://yoursite.com">http://yoursite.com</a></td><td>不改</td></tr><tr><td><strong>root</strong></td><td>网址根目录</td><td>/</td><td>不改</td></tr><tr><td><strong>permalink</strong></td><td>文章的永久链接</td><td>:year/:month/:day/:title/</td><td>:lang/:year/:month/:day/:title/</td></tr><tr><td><strong>permalink_defaults</strong></td><td>永久链接中的默认值</td><td>x</td><td>lang: zh-cn</td></tr></tbody></table></div><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>source_dir</strong></td><td>资源文件夹（存放自己的博客文章）</td><td><code>source</code></td><td>不改</td></tr><tr><td><strong>public_dir</strong></td><td>公共文件夹（存放生成的站点文件）</td><td><code>public</code></td><td>不改</td></tr><tr><td><strong>tag_dir</strong></td><td>标签文件夹</td><td><code>tags</code></td><td>不改</td></tr><tr><td><strong>archive_dir</strong></td><td>归档文件夹</td><td><code>archives</code></td><td>不改</td></tr><tr><td><strong>category_dir</strong></td><td>分类文件夹</td><td><code>categories</code></td><td>不改</td></tr><tr><td><strong>code_dir</strong></td><td>代码文件夹</td><td><code>downloads/code</code></td><td>不改</td></tr><tr><td><strong>i18n_dir</strong></td><td>国际化文件夹</td><td>:lang</td><td>不改</td></tr><tr><td><strong>skip_render</strong></td><td>跳过指定文件的渲染</td><td>x</td><td>不写</td></tr></tbody></table></div><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>new_post_name</strong></td><td>新文章的文件名称</td><td>:title.md</td><td>:lang/:year-:month-:day-:title.md</td></tr><tr><td><strong>default_layout</strong></td><td>默认布局</td><td>post</td><td>不改</td></tr><tr><td><strong>titlecase</strong></td><td>标题转换为Title Case模式</td><td>false</td><td>不改</td></tr><tr><td><strong>external_link</strong></td><td>在新标签中打开链接</td><td>true</td><td>不改</td></tr><tr><td><strong>finename_case</strong></td><td>文件名转换为大写或小写</td><td>0</td><td>不改</td></tr><tr><td><strong>render_drafts</strong></td><td>显示草稿</td><td>false</td><td>不改</td></tr><tr><td><strong>post_asset_folder</strong></td><td>启用资源文件夹</td><td>false</td><td>不改</td></tr><tr><td><strong>relative_link</strong></td><td>把链接更改为相对于根目录的地址</td><td>false</td><td>不改</td></tr><tr><td><strong>future</strong></td><td>显示未来的文章</td><td>true</td><td>不改</td></tr><tr><td><strong>highlight</strong></td><td>代码块的设置</td><td>…</td><td>tab_replace: true</td></tr></tbody></table></div><h4 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>default_category</strong></td><td>默认分类</td><td>uncategorized</td><td>不改</td></tr><tr><td><strong>category_map</strong></td><td>分类别名</td><td>x</td><td>不写</td></tr><tr><td><strong>tag_map</strong></td><td>标签别名</td><td>x</td><td>不写</td></tr></tbody></table></div><h4 id="日期-amp-时间格式"><a href="#日期-amp-时间格式" class="headerlink" title="日期 &amp; 时间格式"></a>日期 &amp; 时间格式</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>date_format</strong></td><td>日期格式</td><td>YYYY-MM-DD</td><td>不改</td></tr><tr><td><strong>time_format</strong></td><td>时间格式</td><td>HH:mm:ss</td><td>不改</td></tr></tbody></table></div><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>per_page</strong></td><td>每页显示的文章数量</td><td>10</td><td>不改</td></tr><tr><td><strong>pagination_dir</strong></td><td>分页目录</td><td>page</td><td>不改</td></tr></tbody></table></div><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th><th>推荐</th></tr></thead><tbody><tr><td><strong>theme</strong></td><td>主题</td><td>landscape</td><td><a href="https://hexo.io/themes/">主题列表</a></td></tr></tbody></table></div><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><strong>deploy</strong></td><td>部署配置</td><td>x</td></tr></tbody></table></div><p>最后讲一下Hexo<strong>部署</strong>的详细配置过程</p><p>修改以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:your_name/your_name.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>到此，Hexo的安装和基本配置就全部结束了。如果你按照教程一步一步走到这里没问题的话，那祝贺你，你已经拥有了自己的第一个博客了！当然，如果你在安装和配置Hexo的过程中出现了自己无法解决的问题，你可以在下面的留言板块中提出你的问题，我会尽我所能帮助你解决出现的问题！</p></div><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>Hexo的命令极简单，安装后只需要记住以下五个常用的即可。<strong>执行命令时，需要Shell处于当前<code>xxx_blog</code>文件夹根目录下</strong>。</p><ul><li><p>新建一篇文章，默认使用<code>_config.yaml</code>中<strong>default_layout</strong>参数指定的布局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo generate</span><br></pre></td></tr></table></figure><p>或者简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo g</span><br></pre></td></tr></table></figure></li><li><p>启动本地调试服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo server</span><br></pre></td></tr></table></figure><p>或者简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到远程网站，部署前请确保已经安装Git插件并已经按照上述完成了<code>_config.yaml</code>中的相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo deploy</span><br></pre></td></tr></table></figure><p>或者简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo d</span><br></pre></td></tr></table></figure></li><li><p>清除缓存文件<code>db.json</code>和已生成的静态文件夹<code>public</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; hexo clean</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，最基本的Hexo博客网站就已经搭建好了，后续就是使用Markdown语法来写文章，最后部署就行了。当然，以上只是Hexo配置和使用的最基本流程，如果你想拥有个性化的博客网站界面以及一些增强功能的话，我会在接下来的文章中详细地介绍Hexo主题的配置方法，它肯定可以让你的博客变得更加酷炫的。</p>]]></content>
      
      
      <categories>
          
          <category> 博客教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客教程系列（0x00）：总纲</title>
      <link href="/zh-cn/2017/03/31/blog_tutorial_0_superclass/"/>
      <url>/zh-cn/2017/03/31/blog_tutorial_0_superclass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我大一时就想过搭建一个属于自己的博客网站来记录一些自己曾经做过项目的开发经验和个人的生活感悟等，但由于时间缘故，我的这个想法一直没有实现。时间一晃到了大四，由于毕设前期任务不是很重，所以这次我决定要花一些时间把自己的博客网站搭建出来，一方面算是实现了自己当初的想法，另一方面也可以有机会将自己大学本科四年的经历总结下来，以供他人学习借鉴。</p><p>搭建网站的一般做法是：先买个域名，再租个服务器，最后在其上部署WordPress来进行相关的配置。虽然WordPress学起来不难，但是这样做不仅需要花钱，而且还需要不少前期准备工作，搭建起来比较繁琐。后来我经同学介绍认识了Hexo，才发现它的简洁和强大，接下来简要地介绍一下Hexo。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><h4 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h4><p>可以部署到GitHub、GitCafe和七牛上，都是完全免费的。</p></li><li><h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><p>比部署WordPress要简单得多，只需要简单几部就能搭建好环境，仅需要记住几条简短的命令和Markdown语法，即可写出精彩的文章。</p></li><li><h4 id="稳定"><a href="#稳定" class="headerlink" title="稳定"></a>稳定</h4><p>不用去操心服务器主机的运维。</p></li><li><h4 id="快速"><a href="#快速" class="headerlink" title="快速"></a>快速</h4><p>Node.js所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。同时将网站部署到GitHub、GitCafe、七牛，在全球都可获得优秀的访问速度。</p></li><li><h4 id="强大"><a href="#强大" class="headerlink" title="强大"></a>强大</h4><p>Hexo拥有强大的插件系统，安装插件可以让Hexo支持Jade、CoffeeScript。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在开始接触Hexo之后，我在网上搜集并学习一些有关Hexo的教程资料，算是基本掌握了Hexo的配置和使用方法。总之，我的个人博客网站已经搭建完成，后续我会使用这个平台来记录自己大学四年以及未来的项目经验和生活感悟。当然，我会首先把上面的Hexo教程系列文章完成，希望能让更多的人可以据此来搭建网站并分享自己的故事。</p>]]></content>
      
      
      <categories>
          
          <category> 博客教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
